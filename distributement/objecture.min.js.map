{"version":3,"file":"objecture.min.js","sources":["../../Core-Plex/distributement/core-plex.js","../../Recourse/distributement/recourse.js","../development/model/local-storage/index.js","../development/schema/verification/index.js","../development/schema/validation/index.js","../development/schema/validator/index.js","../development/schema/validators/RequiredValidator/index.js","../development/schema/validators/TypeValidator/index.js","../development/schema/validators/RangeValidator/index.js","../development/schema/validators/LengthValidator/index.js","../development/schema/validators/EnumValidator/index.js","../development/schema/validators/MatchValidator/index.js","../development/schema/options/index.js","../development/schema/index.js","../development/model/events/model/index.js","../development/model/change/index.js","../development/model/events/validator/index.js","../development/model/methods/object/index.js","../development/model/methods/object/assign/index.js","../development/model/methods/object/define-properties/index.js","../development/model/methods/object/define-property/index.js","../development/model/methods/object/freeze/index.js","../development/model/methods/object/seal/index.js","../development/model/methods/array/index.js","../development/model/methods/array/concat/index.js","../development/model/methods/array/copy-within/index.js","../development/model/methods/array/fill/index.js","../development/model/methods/array/pop/index.js","../development/model/methods/array/push/index.js","../development/model/methods/array/reverse/index.js","../development/model/methods/array/shift/index.js","../development/model/methods/array/splice/index.js","../development/model/methods/array/unshift/index.js","../development/model/methods/map/index.js","../development/model/methods/map/get-property/index.js","../development/model/methods/map/get-property/get-content-property/index.js","../development/model/methods/map/get-property/get-content/index.js","../development/model/methods/map/set-property/index.js","../development/model/methods/map/set-property/set-content-property/index.js","../development/model/methods/map/set-property/set-content/index.js","../development/model/methods/map/delete-property/index.js","../development/model/methods/map/delete-property/delete-content-property/index.js","../development/model/methods/map/delete-property/delete-content/index.js","../development/model/methods/index.js","../development/model/assign/index.js","../development/model/index.js","../development/model/options/index.js"],"sourcesContent":["const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nObject.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nObject.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nObject.values(Types);\n[\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nconst defaultAccessor$1 = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar Accessors = {\n  default: defaultAccessor$1};\n\nconst Options$2 = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options$2, $options);\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object);\n    const object = accessor($object);\n    if(!object) continue iterateAccessors\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        $value !== object\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction recursiveAssign($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction expandEvents($propEvents, $scopeKey = ':scope') {\n  if(\n    Array.isArray($propEvents) ||\n    $propEvents === undefined\n  ) { return $propEvents }\n  const propEvents = [];\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.trim().split(' ');\n    let path, type, listener;\n    if(propEventSettings.length === 1) {\n      path = $scopeKey;\n      type = propEventSettings[0];\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0];\n      type = propEventSettings[1];\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0];\n      $propEventListener[1];\n    }\n    else {\n      listener = $propEventListener;\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    };\n    propEvents.push(propEvent);\n  }\n  return propEvents\n}\n\nconst defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar accessors = {\n  default: defaultAccessor};\n\nvar Settings$1 = ($settings = {}) => {\n  const Settings = {\n    events: {},\n    enableEvents: false,\n    propertyDirectory: {\n      accessors: [accessors.default],\n      scopeKey: ':scope', \n      maxDepth: 10,\n    },\n    propertyDefinitions: {\n      getEvents: 'getEvents',\n      addEvents: 'addEvents',\n      removeEvents: 'removeEvents',\n      enableEvents: 'enableEvents',\n      disableEvents: 'disableEvents',\n      reenableEvents: 'reenableEvents',\n      emitEvents: 'emitEvents',\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'propertyDefinitions':\n      case 'propertyDirectory':\n        Settings[$settingKey] = Object.assign(Settings[$settingKey], $settingValue);\n        break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nfunction handleNoCommaBraces(span) {\n    if (span.length < 3) {\n        return \"{\" + span + \"}\";\n    }\n    var separatorI = -1;\n    for (var i = 2; i < span.length; i++) {\n        if (span[i] === '.' && span[i - 1] === '.' && (i < 2 || span[i - 2] !== '\\\\')) {\n            if (separatorI > -1) {\n                return \"{\" + span + \"}\";\n            }\n            separatorI = i - 1;\n        }\n    }\n    if (separatorI > -1) {\n        var rangeStart = span.substr(0, separatorI);\n        var rangeEnd = span.substr(separatorI + 2);\n        if (rangeStart.length > 0 && rangeEnd.length > 0) {\n            return \"[\" + span.substr(0, separatorI) + \"-\" + span.substr(separatorI + 2) + \"]\";\n        }\n    }\n    return \"{\" + span + \"}\";\n}\nfunction expand(pattern) {\n    if (typeof pattern !== 'string') {\n        throw new TypeError(\"A pattern must be a string, but \" + typeof pattern + \" given\");\n    }\n    var scanning = false;\n    var openingBraces = 0;\n    var closingBraces = 0;\n    var handledUntil = -1;\n    var results = [''];\n    var alternatives = [];\n    var span;\n    for (var i = 0; i < pattern.length; i++) {\n        var char = pattern[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '{') {\n            if (scanning) {\n                openingBraces++;\n            }\n            else if (i > handledUntil && !openingBraces) {\n                span = pattern.substring(handledUntil + 1, i);\n                for (var j = 0; j < results.length; j++) {\n                    results[j] += span;\n                }\n                alternatives = [];\n                handledUntil = i;\n                scanning = true;\n                openingBraces++;\n            }\n            else {\n                openingBraces--;\n            }\n        }\n        else if (char === '}') {\n            if (scanning) {\n                closingBraces++;\n            }\n            else if (closingBraces === 1) {\n                span = pattern.substring(handledUntil + 1, i);\n                if (alternatives.length > 0) {\n                    var newResults = [];\n                    alternatives.push(expand(span));\n                    for (var j = 0; j < results.length; j++) {\n                        for (var k = 0; k < alternatives.length; k++) {\n                            for (var l = 0; l < alternatives[k].length; l++) {\n                                newResults.push(results[j] + alternatives[k][l]);\n                            }\n                        }\n                    }\n                    results = newResults;\n                }\n                else {\n                    span = handleNoCommaBraces(span);\n                    for (var j = 0; j < results.length; j++) {\n                        results[j] += span;\n                    }\n                }\n                handledUntil = i;\n                closingBraces--;\n            }\n            else {\n                closingBraces--;\n            }\n        }\n        else if (!scanning && char === ',' && closingBraces - openingBraces === 1) {\n            span = pattern.substring(handledUntil + 1, i);\n            alternatives.push(expand(span));\n            handledUntil = i;\n        }\n        if (scanning && (closingBraces === openingBraces || i === pattern.length - 1)) {\n            scanning = false;\n            i = handledUntil - 1;\n        }\n    }\n    if (handledUntil === -1) {\n        return [pattern];\n    }\n    var unhandledFrom = pattern[handledUntil] === '{' ? handledUntil : handledUntil + 1;\n    if (unhandledFrom < pattern.length) {\n        span = pattern.substr(unhandledFrom);\n        for (var j = 0; j < results.length; j++) {\n            results[j] += span;\n        }\n    }\n    return results;\n}\n\nfunction negate(pattern, options) {\n    var supportNegation = options['!'] !== false;\n    var supportParens = options['()'] !== false;\n    var isNegated = false;\n    var i;\n    if (supportNegation) {\n        for (i = 0; i < pattern.length && pattern[i] === '!'; i++) {\n            if (supportParens && pattern[i + 1] === '(') {\n                i--;\n                break;\n            }\n            isNegated = !isNegated;\n        }\n        if (i > 0) {\n            pattern = pattern.substr(i);\n        }\n    }\n    return { pattern: pattern, isNegated: isNegated };\n}\n\nfunction escapeRegExpChar(char) { if (char === '-' ||\n    char === '^' ||\n    char === '$' ||\n    char === '+' ||\n    char === '.' ||\n    char === '(' ||\n    char === ')' ||\n    char === '|' ||\n    char === '[' ||\n    char === ']' ||\n    char === '{' ||\n    char === '}' ||\n    char === '*' ||\n    char === '?' ||\n    char === '\\\\') {\n    return \"\\\\\" + char;\n}\nelse {\n    return char;\n} }\nfunction escapeRegExpString(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += escapeRegExpChar(str[i]);\n    }\n    return result;\n}\n\nfunction Pattern(source, options, excludeDot) {\n    var separator = typeof options.separator === 'undefined' ? true : options.separator;\n    var separatorSplitter = '';\n    var separatorMatcher = '';\n    var wildcard = '.';\n    if (separator === true) {\n        separatorSplitter = '/';\n        separatorMatcher = '[/\\\\\\\\]';\n        wildcard = '[^/\\\\\\\\]';\n    }\n    else if (separator) {\n        separatorSplitter = separator;\n        separatorMatcher = escapeRegExpString(separatorSplitter);\n        if (separatorMatcher.length > 1) {\n            separatorMatcher = \"(?:\" + separatorMatcher + \")\";\n            wildcard = \"((?!\" + separatorMatcher + \").)\";\n        }\n        else {\n            wildcard = \"[^\" + separatorMatcher + \"]\";\n        }\n    }\n    else {\n        wildcard = '.';\n    }\n    var requiredSeparator = separator ? separatorMatcher + \"+?\" : '';\n    var optionalSeparator = separator ? separatorMatcher + \"*?\" : '';\n    var segments = separator ? source.split(separatorSplitter) : [source];\n    var support = {\n        qMark: options['?'] !== false,\n        star: options['*'] !== false,\n        globstar: separator && options['**'] !== false,\n        brackets: options['[]'] !== false,\n        extglobs: options['()'] !== false,\n        excludeDot: excludeDot && options.excludeDot !== false,\n    };\n    return {\n        source: source,\n        segments: segments,\n        options: options,\n        separator: separator,\n        separatorSplitter: separatorSplitter,\n        separatorMatcher: separatorMatcher,\n        optionalSeparator: optionalSeparator,\n        requiredSeparator: requiredSeparator,\n        wildcard: wildcard,\n        support: support,\n    };\n}\nfunction Segment(source, pattern, isFirst, isLast) { return {\n    source: source,\n    isFirst: isFirst,\n    isLast: isLast,\n    end: source.length - 1,\n}; }\nfunction Result() {\nreturn {\n    match: '',\n    unmatch: '',\n    useUnmatch: false,\n}; }\nfunction State(pattern, segment, result) { return {\n    pattern: pattern,\n    segment: segment,\n    result: result,\n    openingBracket: segment.end + 1,\n    closingBracket: -1,\n    openingParens: 0,\n    closingParens: 0,\n    parensHandledUntil: -1,\n    extglobModifiers: [],\n    scanningForParens: false,\n    escapeChar: false,\n    addToMatch: true,\n    addToUnmatch: pattern.support.extglobs,\n    dotHandled: false,\n    i: -1,\n    char: '',\n    nextChar: '',\n}; }\n\nvar EXCLUDE_DOT_PATTERN = '(?!\\\\.)';\nfunction add(state, addition, excludeDot) {\n    if (state.addToUnmatch) {\n        state.result.unmatch += addition;\n    }\n    if (state.addToMatch) {\n        if (excludeDot && !state.dotHandled) {\n            addition = EXCLUDE_DOT_PATTERN + addition;\n        }\n        state.dotHandled = true;\n        state.result.match += addition;\n    }\n    return state.result;\n}\nfunction convertSegment(pattern, segment, result) {\n    var support = pattern.support;\n    var state = State(pattern, segment, result);\n    var separatorMatcher = segment.isLast\n        ? pattern.optionalSeparator\n        : pattern.requiredSeparator;\n    if (!support.excludeDot) {\n        state.dotHandled = true;\n    }\n    if (segment.end === -1) {\n        return segment.isLast && !segment.isFirst ? result : add(state, separatorMatcher);\n    }\n    if (support.globstar && segment.source === '**') {\n        var prefix = !state.dotHandled ? EXCLUDE_DOT_PATTERN : '';\n        var globstarSegment = prefix + pattern.wildcard + \"*?\" + separatorMatcher;\n        return add(state, \"(?:\" + globstarSegment + \")*?\");\n    }\n    while (++state.i <= segment.end) {\n        state.char = state.segment.source[state.i];\n        state.nextChar = state.i < segment.end ? segment.source[state.i + 1] : '';\n        if (state.char === '\\\\') {\n            if (state.i < state.segment.end) {\n                state.escapeChar = true;\n                continue;\n            }\n            else {\n                state.char = '';\n            }\n        }\n        var pattern = state.pattern, segment = state.segment, char = state.char, i = state.i;\n        if (pattern.support.brackets && !state.scanningForParens) {\n            if (i > state.openingBracket && i <= state.closingBracket) {\n                if (state.escapeChar) {\n                    add(state, escapeRegExpChar(char));\n                }\n                else if (i === state.closingBracket) {\n                    add(state, ']');\n                    state.openingBracket = segment.source.length;\n                }\n                else if (char === '-' && i === state.closingBracket - 1) {\n                    add(state, '\\\\-');\n                }\n                else if (char === '!' && i === state.openingBracket + 1) {\n                    add(state, '^');\n                }\n                else if (char === ']') {\n                    add(state, '\\\\]');\n                }\n                else {\n                    add(state, char);\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (i > state.openingBracket) {\n                if (char === ']' &&\n                    !state.escapeChar &&\n                    i > state.openingBracket + 1 &&\n                    i > state.closingBracket) {\n                    state.closingBracket = i;\n                    state.i = state.openingBracket;\n                    if (pattern.separator) {\n                        add(state, \"(?!\" + pattern.separatorMatcher + \")[\", true);\n                    }\n                    else {\n                        add(state, '[', true);\n                    }\n                }\n                else if (i === segment.end) {\n                    add(state, '\\\\[');\n                    state.i = state.openingBracket;\n                    state.openingBracket = segment.source.length;\n                    state.closingBracket = segment.source.length;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (char === '[' &&\n                !state.escapeChar &&\n                i > state.closingBracket &&\n                i < segment.end) {\n                state.openingBracket = i;\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        if (state.pattern.support.extglobs) {\n            var extglobModifiers = state.extglobModifiers, char = state.char, nextChar = state.nextChar, i = state.i;\n            if (nextChar === '(' &&\n                !state.escapeChar &&\n                (char === '@' || char === '?' || char === '*' || char === '+' || char === '!')) {\n                if (state.scanningForParens) {\n                    state.openingParens++;\n                }\n                else if (i > state.parensHandledUntil && !state.closingParens) {\n                    state.parensHandledUntil = i;\n                    state.scanningForParens = true;\n                    state.openingParens++;\n                }\n                else if (state.closingParens >= state.openingParens) {\n                    if (char === '!') {\n                        state.addToMatch = true;\n                        state.addToUnmatch = false;\n                        add(state, state.pattern.wildcard + \"*?\", true);\n                        state.addToMatch = false;\n                        state.addToUnmatch = true;\n                        state.result.useUnmatch = true;\n                    }\n                    extglobModifiers.push(char);\n                    add(state, '(?:', true);\n                    state.openingParens--;\n                    state.i++;\n                    continue;\n                }\n                else {\n                    state.openingParens--;\n                }\n            }\n            else if (char === ')' && !state.escapeChar) {\n                if (state.scanningForParens) {\n                    state.closingParens++;\n                }\n                else if (extglobModifiers.length) {\n                    var modifier_1 = extglobModifiers.pop();\n                    if (modifier_1 === '!' && extglobModifiers.indexOf('!') !== -1) {\n                        throw new Error(\"Nested negated extglobs aren't supported\");\n                    }\n                    modifier_1 = modifier_1 === '!' || modifier_1 === '@' ? '' : modifier_1;\n                    add(state, \")\" + modifier_1);\n                    state.addToMatch = true;\n                    state.addToUnmatch = true;\n                    state.closingParens--;\n                    continue;\n                }\n            }\n            else if (char === '|' && state.closingParens &&\n                !state.scanningForParens &&\n                !state.escapeChar) {\n                add(state, '|');\n                continue;\n            }\n            if (state.scanningForParens) {\n                if (state.closingParens === state.openingParens || i === state.segment.end) {\n                    state.scanningForParens = false;\n                    state.i = state.parensHandledUntil - 1;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        var pattern = state.pattern;\n        var support = pattern.support;\n        if (!state.escapeChar && support.star && state.char === '*') {\n            if (state.i === state.segment.end || state.nextChar !== '*') {\n                add(state, pattern.wildcard + \"*?\", true);\n            }\n        }\n        else if (!state.escapeChar && support.qMark && state.char === '?') {\n            add(state, pattern.wildcard, true);\n        }\n        else {\n            add(state, escapeRegExpChar(state.char));\n        }\n        state.escapeChar = false;\n    }\n    return add(state, separatorMatcher);\n}\nfunction convert(source, options, excludeDot) {\n    var pattern = Pattern(source, options, excludeDot);\n    var result = Result();\n    var segments = pattern.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = Segment(segments[i], pattern, i === 0, i === segments.length - 1);\n        convertSegment(pattern, segment, result);\n    }\n    if (result.useUnmatch) {\n        return \"(?!^\" + result.unmatch + \"$)\" + result.match;\n    }\n    else {\n        return result.match;\n    }\n}\n\nfunction flatMap(array, predicate) {\n    var results = [];\n    for (var i = 0; i < array.length; i++) {\n        var mappedValue = predicate(array[i]);\n        for (var j = 0; j < mappedValue.length; j++) {\n            results.push(mappedValue[j]);\n        }\n    }\n    return results;\n}\nfunction compile(patterns, options) {\n    patterns = Array.isArray(patterns) ? patterns : [patterns];\n    if (options['{}'] !== false) {\n        patterns = flatMap(patterns, expand);\n    }\n    var positiveResults = [];\n    var negativeResults = [];\n    var result = '';\n    for (var i = 0; i < patterns.length; i++) {\n        var negatedPattern = negate(patterns[i], options);\n        var convertedPattern = convert(negatedPattern.pattern, options, !negatedPattern.isNegated);\n        if (negatedPattern.isNegated) {\n            negativeResults.push(convertedPattern);\n        }\n        else {\n            positiveResults.push(convertedPattern);\n        }\n    }\n    if (negativeResults.length) {\n        result = \"(?!(?:\" + negativeResults.join('|') + \")$)\";\n    }\n    if (positiveResults.length > 1) {\n        result += \"(?:\" + positiveResults.join('|') + \")\";\n    }\n    else if (positiveResults.length === 1) {\n        result += positiveResults[0];\n    }\n    else if (result.length) {\n        result += convert('**', options, true);\n    }\n    return \"^\" + result + \"$\";\n}\nfunction isMatch(regexp, sample) { if (typeof sample !== 'string') {\n    throw new TypeError(\"Sample must be a string, but \" + typeof sample + \" given\");\n} return regexp.test(sample); }\n/**\n * Compiles one or more glob patterns into a RegExp and returns an isMatch function.\n * The isMatch function takes a sample string as its only argument and returns true\n * if the string matches the pattern(s).\n *\n * ```js\n * outmatch('src/*.js')('src/index.js') //=> true\n * ```\n *\n * ```js\n * const isMatch = outmatch('*.example.com', '.')\n * isMatch('foo.example.com') //=> true\n * isMatch('foo.bar.com') //=> false\n * ```\n */\nfunction outmatch(pattern, options) {\n    if (typeof pattern !== 'string' && !Array.isArray(pattern)) {\n        throw new TypeError(\"The first argument must be a single pattern string or an array of patterns, but \" + typeof pattern + \" given\");\n    }\n    if (typeof options === 'string' || typeof options === 'boolean') {\n        options = { separator: options };\n    }\n    if (arguments.length === 2 &&\n        !(typeof options === 'undefined' ||\n            (typeof options === 'object' && options !== null && !Array.isArray(options)))) {\n        throw new TypeError(\"The second argument must be an options object or a string/boolean separator, but \" + typeof options + \" given\");\n    }\n    options = options || {};\n    if (options.separator === '\\\\') {\n        throw new Error('\\\\ is not a valid separator');\n    }\n    var regexpPattern = compile(pattern, options);\n    var regexp = new RegExp(regexpPattern, options.flags);\n    var fn = isMatch.bind(null, regexp);\n    fn.options = options;\n    fn.pattern = pattern;\n    fn.regexp = regexp;\n    return fn;\n}\n\nvar Settings = ($settings = {}) => {\n  const Settings = {\n    enable: false,\n    assign: 'addEventListener', deassign: 'removeEventListener', transsign: 'dispatchEvent',\n    bindListener: true,\n    errorLog: false,\n    methods: {\n      assign: {\n        addEventListener: function addEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['addEventListener'](type, listener, options || useCapture)\n        },\n        on: function on($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['on'](type, listener)\n        },\n        once: function once($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['once'](type, listener)\n        },\n      }, \n      deassign: {\n        removeEventListener: function removeEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['removeEventListener'](type, listener, options || useCapture)\n        },\n        off: function off($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['off'](type, listener)\n        },\n      },\n      transsign: {\n        dispatchEvent: function dispatchEvent($eventDefinition, $target, $event) {\n          return $target['dispatchEvent']($event)\n        },\n        emit: function emit($eventDefinition, $target, $type, ...$arguments) {\n          return $target['emit']($type, ...$arguments)\n        },\n      },\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'methods': \n        Settings[$settingKey] = recursiveAssign(Settings[$settingKey], $settingValue);\n        break\n      case 'enableEvents': break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nclass EventDefinition {\n  #context\n  #enable = false\n  #nontranssigned = []\n  #_targets = []\n  #_assign\n  #_deassign\n  #_transsign\n  constructor($settings, $context) { \n    if(!$settings || !$context) { return this }\n    const settings = Settings($settings);\n    const assigned = [];\n    const deassigned = [];\n    const transsigned = [];\n    Object.defineProperties(this, {\n      'settings': { value: settings },\n      'path': { value: settings.path },\n      'type': { value: settings.type },\n      'assigned': { value: assigned },\n      'deassigned': { value: deassigned },\n      'transsigned': { value: transsigned },\n      'listener':  { configurable: true, get() {\n        const typeOfListener = typeOf(settings.listener);\n        let listener; \n        if(typeOfListener === 'string') {\n          let listenerTarget = $context;\n          iterateListenerPathKeys: \n          for(const $pathKey of settings.listener.split('.')) {\n            const value = listenerTarget[$pathKey];\n            if(value !== undefined) { listenerTarget = listenerTarget[$pathKey]; }\n            else { break iterateListenerPathKeys }\n          }\n          if(typeOf(listenerTarget) === 'function') {\n            listener = listenerTarget;\n          }\n        }\n        else { listener = settings.listener; }\n        if(settings.bindListener === true) {\n          listener = listener.bind(this.#context);\n        }\n        Object.defineProperty(this, 'listener', { value: listener });\n        return listener\n      } }\n    });\n    this.#context = $context;\n    this.enable = this.settings.enable;\n  }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    const targets = this.#targets;\n    const assigned = this.assigned;\n    const deassigned = this.deassigned;\n    assigned.length = 0;\n    deassigned.length = 0;\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { path, target, enable } = $targetElement;\n      this.settings;\n      if(enable === $enable) { continue iterateTargetElements }\n      if($enable === true) {\n        try {\n          this.#assign(target);\n          $targetElement.enable = $enable;\n          assigned.push($targetElement);\n          \n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n      else if($enable === false) {\n        try {\n          this.#deassign(target);\n          $targetElement.enable = $enable;\n          deassigned.push($targetElement);\n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n    }\n    this.#enable = $enable;\n  }\n  get #target() { return this.settings.target }\n  get #targets() {\n    const pretargets = this.#_targets;\n    const targets = [];\n    if(this.#target) {\n      for(const $target of [].concat(this.#target)) {\n        const pretargetElement = pretargets.find(\n          ($pretarget) => $pretarget?.path === this.path\n        );\n        if(pretargetElement !== undefined) {\n          targets.push(pretargetElement);\n        }\n        else if(pretargetElement === undefined) {ptargets.push({\n            path: this.path,\n            target: $target,\n            enable: false,\n          });\n        }\n      }\n    }\n    else if(typeOf(this.path) === 'string') {\n      const targetPaths = [];\n      if(this.path === this.#scopeKey) {\n        const targetElement = {\n          path: this.path,\n          target: this.#context,\n          enable: false,\n        };\n        targets.push(targetElement);\n      }\n      else {\n        if(this.settings.propertyDirectory) {\n          const propertyDirectory = this.#propertyDirectory;\n          const propertyPathMatcher = outmatch(this.path, {\n            separator: '.',\n          });\n          for(const [$propertyPath, $propertyValue] of propertyDirectory) {\n            const propertyPathMatch = propertyPathMatcher($propertyPath);\n            if(propertyPathMatch === true) { targetPaths.push([$propertyPath, $propertyValue]); }\n          }\n          if(this.path.charAt(0) === '*') {\n            targetPaths.unshift(this.#scopeKey);\n          }\n        }\n        else {\n          targetPaths.push(this.path);\n        }\n        for(const [$targetPath, $targetValue] of targetPaths) {\n          const pretargetElement = pretargets.find(\n            ($pretarget) => $pretarget.path === $targetPath\n          );\n          let target = $targetValue;\n          let targetElement;\n          if(target !== undefined) {\n            if(target === pretargetElement?.target) {\n              targetElement = pretargetElement;\n            }\n            else if(typeof target === 'object') {\n              targetElement = {\n                path: $targetPath,\n                target: target,\n                enable: false,\n              };\n            }\n          }\n          if(targetElement !== undefined) { targets.push(targetElement); }\n        }\n      }\n    }\n    this.#_targets = targets;\n    return this.#_targets\n  }\n  get #scopeKey() { return this.settings.propertyDirectory.scopeKey }\n  get #assign() {\n    if(this.#_assign !== undefined) { return this.#_assign }\n    this.#_assign = this.settings.methods.assign[this.settings.assign].bind(null, this);\n    return this.#_assign\n  }\n  get #deassign() {\n    if(this.#_deassign !== undefined) { return this.#_deassign }\n    this.#_deassign = this.settings.methods.deassign[this.settings.deassign].bind(null, this);\n    return this.#_deassign\n  }\n  get #transsign() {\n    if(this.#_transsign !== undefined) { return this.#_transsign }\n    this.#_transsign = this.settings.methods.transsign[this.settings.transsign].bind(null, this);\n    return this.#_transsign\n  }\n  get #propertyDirectory() {\n    if(!this.settings.propertyDirectory) { return null }\n    const propertyDirectorySettings = Object.assign(this.settings.propertyDirectory, { values: true });\n    return propertyDirectory(this.#context, propertyDirectorySettings)\n  }\n  emit() {\n    const targets = this.#targets;\n    const transsigned = this.transsigned;\n    const nontranssigned = this.#nontranssigned;\n    transsigned.length = 0;\n    nontranssigned.length = 0;\n    for(const $targetElement of targets) {\n      const { target } = $targetElement;\n      try {\n        this.#transsign(target, ...arguments);\n        transsigned.push($targetElement);\n      }\n      catch($err) { nontranssigned.push($targetElement); }\n    }\n    return this\n  }\n}\n\nclass Core extends EventTarget {\n  static implement = function ($target, $settings) {\n    if(!$target || !$settings) { return undefined }\n    const settings = Settings$1($settings);\n    const events = [];\n    Object.defineProperties($target, {\n      [settings.propertyDefinitions.getEvents]: {\n        enumerable: false, writable: false, \n        value: function getEvents() {\n          if(!arguments[0]) { return events }\n          const getEvents = [];\n          const $filterEvents = [].concat(arguments[0]);\n          for(const $filterEvent of $filterEvents) {\n            for(const $event of events) {\n              let match;\n              iterateEventFilterProperties: \n              for(const [\n                $filterEventPropertyKey, $filterEventPropertyValue\n              ] of Object.entries($filterEvent)) {\n                let eventFilterMatch;\n                if($filterEventPropertyKey === 'listener') {\n                  eventFilterMatch = (\n                    $event.settings[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                else {\n                  eventFilterMatch = (\n                    $event[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                if(match !== false) { match = eventFilterMatch; }\n                else { break iterateEventFilterProperties }\n              }\n              if(match === true) { getEvents.push($event); }\n            }\n          }\n          return getEvents\n        }\n      },\n      [settings.propertyDefinitions.addEvents]: {\n        enumerable: false, writable: false, \n        value: function addEvents() {\n          if(!arguments.length) { return $target }\n          let $addEvents = expandEvents(arguments[0], settings.propertyDirectory.scopeKey);\n          let $enableEvents = arguments[1] || false;\n          for(let $addEvent of $addEvents) {\n            const event = {};\n            for(const $settingKey of [\n              'assign', 'deassign', 'transsign', 'propertyDirectory', 'bindListener'\n            ]) {\n              const settingValue = settings[$settingKey];\n              if(settingValue !== undefined) { event[$settingKey] = settingValue; }\n            }\n            recursiveAssign(event, $addEvent);\n            const eventDefinition = new EventDefinition(event, $target);\n            if($enableEvents) { eventDefinition.enable = true; }\n            events.push(eventDefinition);\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.removeEvents]: {\n        enumerable: false, writable: false, \n        value: function removeEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          let eventsIndex = events.length - 1;\n          while(eventsIndex > -1) {\n            const event = events[eventsIndex];\n            if($events.includes(event)) {\n              event.enable = false;\n              events.splice(eventsIndex, 1);\n            }\n            eventsIndex--;\n          }\n          return $target\n        }\n      },\n      [settings.propertyDefinitions.enableEvents]: {\n        enumerable: false, writable: false, \n        value: function enableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = true; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.disableEvents]: {\n        enumerable: false, writable: false, \n        value: function disableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = false; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.reenableEvents]: {\n        enumerable: false, writable: false, \n        value: function reenableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          for(const $event of $events) {\n            $event.enable = false;\n            $event.enable = true;\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.emitEvents]: {\n        enumerable: false, writable: false, \n        value: function emitEvents($filterEvents, ...$eventParameters) {\n          const $events = $target[settings.propertyDefinitions.getEvents]($filterEvents);\n          for(const $event of $events) {\n            $event.emit(...$eventParameters);\n          }\n          return $target\n        },\n      },\n    });\n    if(settings.events) { $target[settings.propertyDefinitions.addEvents](settings.events); }\n    if(settings.enableEvents === true) { $target[settings.propertyDefinitions.enableEvents](); }\n    return $target\n  }\n  constructor($settings = {}) {\n    super();\n    return Core.implement(this, $settings)\n  }\n}\n\nexport { Core as default };\n//# sourceMappingURL=core-plex.js.map\n","const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives);\nconst PrimitiveValues = Object.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nconst ObjectKeys = Object.keys(Objects);\nconst ObjectValues = Object.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nconst TypeKeys = Object.keys(Types);\nconst TypeValues = Object.values(Types);\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ObjectKeys: ObjectKeys,\n  ObjectValues: ObjectValues,\n  Objects: Objects,\n  PrimitiveKeys: PrimitiveKeys,\n  PrimitiveValues: PrimitiveValues,\n  Primitives: Primitives,\n  TypeKeys: TypeKeys,\n  TypeMethods: TypeMethods,\n  TypeValues: TypeValues,\n  Types: Types\n});\n\nvar regularExpressions = {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n};\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction subpaths($path) {\n  return $path.split(\n    new RegExp(regularExpressions.quotationEscape)\n  )\n}\nfunction keypaths($path) {\n  const _subpaths = subpaths($path);\n  _subpaths.pop();\n  return _subpaths\n}\nfunction key($path) { return subpaths($path).pop() }\nfunction root($path) { return subpaths($path).shift() }\nfunction typeofRoot($path) { return (\n  Number(root($path))\n) ? 'array' : 'object' }\nfunction parse($path) {\n  return {\n    subpaths: subpaths($path),\n    keypaths: keypaths($path),\n    key: key($path),\n    root: root($path),\n    typeofRoot: typeofRoot($path),\n  }\n}\n\nfunction typedObjectLiteral($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf($value);\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase();\n    if(value === 'object') { _typedObjectLiteral = {}; }\n    else if(value === 'array') { _typedObjectLiteral = []; }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  }\n  return _typedObjectLiteral\n}\n\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  let subtarget = $source;\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath]; }\n  return subtarget[key]\n}\nfunction set($path, $source) {\n  const {\n    keypaths, key, typeofRoot\n  } = parse($path);\n  const target = typedObjectLiteral(typeofRoot);\n  let subtarget = target;\n  for(const $subpath of keypaths) {\n    if(Number($subpath)) { subtarget[$subpath] = []; }\n    else { subtarget[$subpath] = {}; }\n    subtarget = subtarget[$subpath];\n  }\n  subtarget[key] = $source;\n  return target\n}\n\nconst ValidPropertyTypes = ['string', 'function'];\nfunction expandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !ValidPropertyTypes.includes(typeOfProperty) ||\n    !ObjectKeys.includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    const sourceValue = (\n      ObjectKeys.includes(typeOf($sourceValue))\n    ) ? expandTree($sourceValue, $property) : $sourceValue;\n    if(typeOfProperty === ValidPropertyTypes[0]) {\n      target[$sourceKey] = set($property, sourceValue);\n    }\n    else if(typeOfProperty === ValidPropertyTypes[1]) {\n      target[$sourceKey] = $property(sourceValue);\n    }\n  }\n  return target\n}\n\nfunction impandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = get($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nvar isArrayLike = ($source) => {\n  let isArrayLike;\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'array') { isArrayLike = true; }\n  else if(\n    typeOfSource === 'object' &&\n    Number.isInteger($source.length) && $source.length >= 0\n  ) {\n    iterateSourceKeys: \n    for(const $sourceKey of Object.keys(\n      Object.getOwnPropertyDescriptors($source)\n    )) {\n      if($sourceKey === 'length') { continue iterateSourceKeys }\n      isArrayLike = !isNaN($sourceKey);\n      if(!isArrayLike) { break iterateSourceKeys }\n    }\n  }\n  else { isArrayLike = false; }\n  return isArrayLike\n};\n\nconst defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar Accessors = {\n  default: defaultAccessor};\n\nconst Options$2 = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options$2, $options);\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object);\n    const object = accessor($object);\n    if(!object) continue iterateAccessors\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        $value !== object\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction recursiveAssign($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction recursiveAssignConcat($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if( \n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssignConcat($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else if(\n        typeOfTargetPropertyValue === 'array' &&\n        typeOfSourcePropertyValue === 'array'\n      ) {\n        $target[$sourcePropertyKey] = $target[$sourcePropertyKey].concat($sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nvar Options$1 = { type: false };\n\nfunction recursiveGetOwnPropertyDescriptor($properties, $propertyKey, $options) {\n  const options = Object.assign({}, Options$1, $options);\n  const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey);\n  if(options.type) { propertyDescriptor.type = typeOf(propertyDescriptor.value); }\n  if(['array', 'object'].includes(typeOf(propertyDescriptor.value))) {\n    propertyDescriptor.value = recursiveGetOwnPropertyDescriptors(propertyDescriptor.value, options);\n  }\n  return propertyDescriptor\n}\n\nfunction recursiveGetOwnPropertyDescriptors($properties, $options) {\n  const options = Object.assign({}, Options$1, $options);\n  const propertyDescriptors = {};\n  for(const $propertyKey of Object.keys(Object.getOwnPropertyDescriptors($properties))) {\n    propertyDescriptors[$propertyKey] = recursiveGetOwnPropertyDescriptor($properties, $propertyKey, options);\n  }\n  return propertyDescriptors\n}\n\nvar Options = { typeCoercion: false };\n\nfunction recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, $options) {\n  const options = Object.assign({}, Options, $options);\n  const typeOfPropertyValue = typeOf($propertyDescriptor.value);\n  if(['array', 'object'].includes(typeOfPropertyValue)) {\n    const propertyValue = isArrayLike(Object.defineProperties(\n      typedObjectLiteral(typeOfPropertyValue), $propertyDescriptor.value\n    )) ? [] : {};\n    $propertyDescriptor.value = recursiveDefineProperties(propertyValue, $propertyDescriptor.value, options);\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor($propertyDescriptor, 'type') !== undefined &&\n    !['undefined', 'null'].includes(typeOfPropertyValue)\n  ) {\n    $propertyDescriptor.value = Primitives[$propertyDescriptor.type](value);\n  }\n  Object.defineProperty($target, $propertyKey, $propertyDescriptor);\n  return $target\n}\n\nfunction recursiveDefineProperties($target, $propertyDescriptors, $options) {\n  const options = Object.assign({}, Options, $options);\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, options);\n  }\n  return $target\n}\n\nfunction recursiveFreeze($target) {\n  for(const [$propertyKey, $propertyValue] of Object.entries($target)) {\n    if($propertyValue && typeof $propertyValue === 'object') {\n      recursiveFreeze($propertyValue);\n    }\n  }\n  return Object.freeze($target)\n}\n\nexport { expandTree, impandTree, isArrayLike, propertyDirectory, recursiveAssign, recursiveAssignConcat, recursiveDefineProperties, recursiveDefineProperty, recursiveFreeze, recursiveGetOwnPropertyDescriptor, recursiveGetOwnPropertyDescriptors, regularExpressions, typeOf, typedObjectLiteral, index as variables };\n//# sourceMappingURL=recourse.js.map\n","import { recursiveDefineProperties, recursiveGetOwnPropertyDescriptors, impandTree } from 'recourse'\nexport default class LocalStorage extends EventTarget {\n  #db = localStorage\n  #path\n  constructor($path) {\n    super()\n    this.path = $path\n  }\n  get path() { return this.#path }\n  set path($path) {\n    if(this.#path !== undefined) return\n    this.#path = $path\n  }\n  get() {\n    try{ return recursiveDefineProperties(\n      JSON.parse(this.#db.getItem(this.path))\n    ) }\n    catch($err) { console.error($err) }\n  }\n  set($data) {\n    try { return this.#db.setItem(this.path, JSON.stringify(\n      recursiveGetOwnPropertyDescriptors($data)\n    )) }\n    catch($err) { console.error($err) }\n  }\n  remove() {\n    try { return this.#db.removeItem(this.path) }\n    catch($err) { console.error($err) }\n  }\n}","export default class Verification extends EventTarget {\n  constructor($settings) {\n    super()\n    const settings = Object.assign({}, $settings)\n    Object.defineProperties(this, {\n      'type': { value: settings.type },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'message': { configurable: true, get() {\n        let message\n        if(this.pass !== undefined) {\n          message = settings.messages[String(this.pass)](this)\n          Object.defineProperty(this, 'message', { value: message })\n        }\n        return message\n      } },\n      'pass': { writable: true, \n        set pass($pass) {\n          Object.defineProperty(this, 'pass', { value: $pass })\n        },\n      },\n    })\n  }\n}","import { typedObjectLiteral } from 'recourse'\nimport Verification from '../verification/index.js'\nconst Messages = {\n  'true': ($validation) => `${$validation.valid}`,\n  'false': ($validation) => `${$validation.valid}`,\n}\nfunction report($format = \"expand\", $prevalidation) {\n  const prevalidation = $prevalidation || this\n  const schema = prevalidation.schema\n  const validations = [].concat(\n    prevalidation.advance, prevalidation.deadvance, prevalidation.unadvance\n  )\n  if($format === \"expand\") {\n    const _report = typedObjectLiteral(schema.type)\n    iterateValidations: \n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      )\n      _report[$validation.key] = {}\n      iterateVerifications: \n      for(const $verification of verifications) {\n        _report[$validation.key][$verification.type] = {}\n        if($verification.validation) {\n          _report[$validation.key][$verification.type] = this.report($format, $verification.validation)\n        }\n        else {\n          _report[$validation.key][$verification.type] = $verification\n        }\n      }\n    }\n    return _report\n  }\n  if($format === \"impand\") {\n    if(prevalidation.valid === false) { return false }\n    const _report = typedObjectLiteral(schema.type)\n    iterateValidations: \n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      )\n      let reportValue\n      iterateVerifications: \n      for(const $verification of verifications) {\n        if($verification.type === 'type') {\n          if($verification.validation && $validation.valid) {\n            reportValue = this.report($format, $verification.validation)\n          }\n          break iterateVerifications\n        }\n      }\n      if(!reportValue) { reportValue = $validation.valid }\n      _report[$validation.key] = reportValue\n    }\n    return _report\n  }\n}\nexport default class Validation extends EventTarget {\n  constructor($settings = {}, $schema) {\n    super()\n    const settings = Object.assign({ messages: Messages }, $settings)\n    let valid\n    const advance = []\n    const deadvance = []\n    const unadvance = []\n    Object.defineProperties(this, {\n      'schema': { value: $schema },\n      'verificationType': { value: settings.verificationType },\n      'required': { value: settings.required },\n      'definition': { value: settings.definition },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'advance': { value: advance },\n      'deadvance': { value: deadvance },\n      'unadvance': { value: unadvance },\n      'valid': {\n        writable: true,\n        get valid() { return valid },\n        set valid($valid) { Object.defineProperty(this, 'valid', { value: $valid }) }\n      },\n      'report': { configurable: true, get() {\n        const _report = report.bind(this)\n        Object.defineProperty(this, 'report', { value: _report })\n        return _report\n      } },\n    })\n  }\n}\n\n","import { recursiveAssign } from 'recourse'\nimport Verification from '../verification/index.js'\nimport Validation from '../validation/index.js'\nconst Messages = {\n  'true': ($verification) => `${$verification.pass}`,\n  'false': ($verification) => `${$verification.pass}`,\n}\nexport default class Validator extends EventTarget {\n  constructor($definition = {}, $schema) {\n    super()\n    const definition = Object.freeze(\n      Object.assign({ messages: Messages }, $definition)\n    )\n    Object.defineProperties(this, {\n      'definition': { value: definition },\n      'schema': { value: $schema },\n      'type': { value: definition.type },\n      'messages': { value: definition.messages },\n      'validate': { configurable: true, get() {\n        function validate($key, $value, $source, $target) {\n          const { definition, messages, type } = this\n          let verification = new Verification({\n            type: type,\n            key: $key,\n            value: definition.value,\n            messages: recursiveAssign({}, messages, definition.messages),\n          })\n          const validation = definition.validate(...arguments)\n          if(typeof validation === 'object') {\n            verification.validation = validation\n            verification.pass = validation.valid\n          }\n          else { verification.pass = validation }\n          return verification\n        }\n        const boundValidate = validate.bind(this)\n        Object.defineProperty(this, 'validate', {\n          value: boundValidate\n        })\n        return boundValidate\n      } },\n    })\n  }\n}","import { recursiveAssign, typedObjectLiteral } from 'recourse'\nimport Schema from '../../index.js'\nimport Validator from '../../validator/index.js'\nexport default class RequiredValidator extends Validator {\n  constructor($definition, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'required',\n      validate: ($key, $value, $source, $target) => {\n        const { requiredProperties, requiredPropertiesSize, type } = $schema\n        const corequiredProperties = Object.assign({}, requiredProperties)\n        let corequiredPropertiesSize = requiredPropertiesSize\n        const properties = Object.assign(typedObjectLiteral(type), $source, $target)\n        const definition = this.definition\n        let pass\n        if(!requiredPropertiesSize) { pass = true }\n        else {\n          if(Object.hasOwn(corequiredProperties, $key)) {\n            delete corequiredProperties[$key]\n            corequiredPropertiesSize--\n          }\n          if(corequiredPropertiesSize) {\n            const coschema = new Schema(corequiredProperties, {\n              path: $schema.path,\n              parent: $schema.parent,\n            })\n            const comodel = Object.assign({}, $target, $source)\n            const covalidation = coschema.validate(comodel)\n            pass = covalidation.valid\n          }\n        }\n        return pass\n      }\n    }), $schema)\n  }\n}","import { typeOf, variables } from 'recourse'\nimport Validator from '../../validator/index.js'\nconst { ObjectKeys, TypeKeys } = variables\nimport Schema from '../../index.js'\nexport default class TypeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'type',\n      validate: ($key, $value, $source, $target) => {\n        let pass\n        const definition = this.definition\n        let typeOfDefinitionValue = typeOf(definition.value)\n        if(typeOfDefinitionValue === 'function') {\n          typeOfDefinitionValue = typeOf(definition.value())\n        }\n        else if(definition.value instanceof Schema) {\n          typeOfDefinitionValue = definition.value.type\n        }\n        else {\n          typeOfDefinitionValue = typeOf(definition.value)\n        }\n        if(TypeKeys.includes(typeOfDefinitionValue)) {\n          const typeOfValue = typeOf($value)\n          if(typeOfValue === 'undefined') { pass = false }\n          else if(typeOfDefinitionValue === 'undefined') { pass = true }\n          else if(definition.value instanceof Schema) {\n            const validation = definition.value.validate($value, $source)\n            pass = validation\n          }\n          else { pass = (typeOfDefinitionValue === typeOfValue) }\n        }\n        else { pass = false }\n        return pass\n      },\n    }), $schema)\n  }\n}\n\n","import Validator from '../../validator/index.js'\nexport default class RangeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'range',\n      validate: ($key, $value) => {\n        const definition = this.definition\n        let pass\n        if(typeof $value !== 'number') { pass = false }\n        else {\n          const { min, max } = definition\n          let validMin, validMax\n          if(min !== undefined) { validMin = ($value >= min.value) }\n          else { validMin = true }\n          if(max !== undefined) { validMax = ($value <= max.value) }\n          else { validMax = true }\n          if(validMin && validMax) { pass = true }\n          else { pass = false}\n        }\n        return pass\n      }\n    }), $schema)\n  }\n}","import Validator from '../../validator/index.js'\nexport default class LengthValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'length',\n      validate: ($key, $value) => {\n        const definition = this.definition\n        let pass\n        if(typeof $value !== 'string') { pass = false }\n        else {\n          const { min, max } = definition\n          let validMin, validMax\n          if(min !== undefined) {\n            validMin = ($value.length >= min.value)\n          }\n          else { validMin = true }\n          if(max !== undefined) {\n            validMax = ($value.length <= max.value)\n          }\n          else { validMax = true }\n          if(validMin && validMax) { pass = true }          \n          else { pass = false}\n        }\n        return pass\n      },\n    }), $schema)\n  }\n}","import Validator from '../../validator/index.js'\nexport default class EnumValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'enum',\n      validate: ($key, $value) => {\n        const definition = this.definition\n        let pass\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false}\n        else {\n          const enumeration = definition.value\n          pass = enumeration.includes($value)\n        }\n        return pass\n      },\n    }), $schema)\n  }\n}","import Validator from '../../validator/index.js'\nexport default class MatchValidator extends Validator {\n  constructor($settings = {}, $schema) {\n    super(Object.assign($settings, {\n      type: 'match',\n      validate: ($key, $value) => {\n        const definition = this.settings\n        let pass\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false}\n        else {\n          const match = definition\n          const valueMatch = (match.value.exec($value) !== null)\n        }\n        return pass ? true : false\n      },\n    }), $schema)\n  }\n}","import { recursiveAssign } from 'recourse'\nexport default (...$options) => Object.assign({\n  required: false,\n  verificationType: 'all', \n  // verificationType: 'one',\n  strict: false,\n  properties: {\n    type: 'type',\n    value: 'value',\n  },\n}, ...$options)","import { typedObjectLiteral, typeOf, variables } from 'recourse'\nimport Verification from './verification/index.js'\nimport Validation from './validation/index.js'\nimport {\n  RequiredValidator, TypeValidator, RangeValidator, \n  LengthValidator, EnumValidator, MatchValidator\n} from './validators/index.js'\nimport Options from './options/index.js' \n\nclass Schema extends EventTarget {\n  constructor($properties = {}, $options = {}) {\n    super()\n    Object.defineProperties(this, {\n      'options': { value: Options($options) },\n      'type': { value: typeOf($properties) },\n      'parent': { configurable: true, get() {\n        const { options } = this\n        const parent = (options.parent) ? options.parent : null\n        Object.defineProperty(this, 'parent', { value: parent })\n        return parent\n      } },\n      'root': { configurable: true, get() {\n        let root = this\n        iterateParents: \n        while(root) {\n          if([undefined, null].includes(root.parent)) { break iterateParents }\n          root = root.parent\n        }\n        return root\n      } },\n      'key': { configurable: true, get() {\n        const { path } = this\n        const key = (path) ? path.split('.').pop() : null\n        Object.defineProperty(this, 'key', { value: key })\n        return key\n      } },\n      'path': { configurable: true, get() {\n        const { options } = this\n        const path = (options.path)\n          ? String(options.path)\n          : null\n        Object.defineProperty(this, 'path', { value: path })\n        return path\n      } },\n      'required': { configurable: true, get() {\n        const required = this.options.required\n        Object.defineProperty(this, 'required', { value: required })\n        return required\n      } },\n      'requiredProperties': { configurable: true, get() {\n        const requiredProperties = typedObjectLiteral(this.type)\n        iterateContextEntries: \n        for(const [$propertyKey, $propertyDefinition] of Object.entries(this.target)) {\n          if($propertyDefinition.required?.value === true) {\n            requiredProperties[$propertyKey] = $propertyDefinition\n          }\n        }\n        Object.defineProperty(this, 'requiredProperties', { value: Object.freeze(requiredProperties) })\n        return requiredProperties\n      } },\n      'requiredPropertiesSize': { configurable: true, get() {\n        const requiredPropertiesSize = Object.keys(this.requiredProperties).length\n        Object.defineProperty(this, 'requiredPropertiesSize', { value: requiredPropertiesSize })\n        return requiredPropertiesSize\n      } },\n      'verificationType': { configurable: true, get() {\n        const verificationType = this.options.verificationType\n        Object.defineProperty(this, 'verificationType', { value: verificationType })\n        return verificationType\n      } },\n      'target': { configurable: true, get() {\n        let properties\n        const type = this.type\n        if(type === 'array') { properties = $properties.slice(0, 1) }\n        else if(type === 'object') { properties = $properties }\n        const target = parseProperties(properties, this)\n        Object.defineProperty(this, 'target', { value: target })\n        return target\n      } },\n      'validate': { value: function(...$arguments) {\n        let { $sourceName, $source, $target } = parseValidateArguments(...$arguments)\n        $target = $target || typedObjectLiteral($source)\n        const { target, path, required, type, verificationType } = this\n        let validation = new Validation({\n          required, verificationType,\n          definition: target,\n          key: $sourceName, \n          value: $source,\n        }, this)\n        const sourceProperties = Object.entries($source)\n        let sourcePropertyIndex = 0\n        while(sourcePropertyIndex < sourceProperties.length) {\n          const [$sourceKey, $sourceValue] = sourceProperties[sourcePropertyIndex]\n          const propertyValidation = this.validateProperty($sourceKey, $sourceValue, $source, $target)\n          if(propertyValidation.valid === true) { validation.advance.push(propertyValidation) } \n          else if(propertyValidation.valid === false) { validation.deadvance.push(propertyValidation) } \n          else if(propertyValidation.valid === undefined) { validation.unadvance.push(propertyValidation )}\n          sourcePropertyIndex++\n        }\n        if(validation.advance.length) { validation.valid = true }\n        else if(validation.deadvance.length) { validation.valid = false }\n        else if(validation.unadvance.length) { validation.valid = undefined }\n        else { validation.valid = true }\n        return validation\n      } },\n      'validateProperty': { value: function() {\n        const { $key, $value, $source, $target } = parseValidatePropertyArguments(...arguments)\n        const { target, path, required, schema, type, verificationType } = this\n        let propertyDefinition\n        if(type === 'array') { propertyDefinition = target[0] }\n        else if(type === 'object') { propertyDefinition = target[$key] }\n        const propertyValidation = new Validation({\n          required,\n          verificationType,\n          definition: propertyDefinition,\n          key: $key,\n          value: $value,\n        }, this)\n        if(propertyDefinition === undefined) {\n          const verification = new Verification({\n            type: null,\n            definition: null,\n            key: $key,\n            value: $value,\n          }, this)\n          verification.pass = false\n          propertyValidation.unadvance.push(verification)\n        }\n        else {\n          iteratePropertyDefinitionValidators:\n          for(const [$validatorIndex, $validator] of Object.entries(propertyDefinition.validators)) {\n            const verification = $validator.validate($key, $value, $source, $target)\n            if(verification.pass === true) { propertyValidation.advance.push(verification) }\n            else if(verification.pass === false) { propertyValidation.deadvance.push(verification) }\n            else if(verification.pass === undefined) { propertyValidation.unadvance.push(verification) }\n            if(this.verificationType === 'one' && propertyValidation.deadvance.length) {\n              break iteratePropertyDefinitionValidators\n            }\n          }\n        }\n        if(propertyValidation.deadvance.length) { propertyValidation.valid = false }\n        else if(propertyValidation.advance.length) { propertyValidation.valid = true }\n        else if(propertyValidation.unadvance.length) { propertyValidation.valid = false }\n        return propertyValidation\n      } },\n    })\n  }\n}\nfunction parseValidateArguments(...$arguments) {\n  let $sourceName, $source, $target\n  if($arguments.length === 1) {\n    $sourceName = null; $source = $arguments.shift(); $target = null\n  }\n  else if($arguments.length === 2) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = null\n    }\n    else if($arguments[0] && typeof $arguments[0] === 'object') {\n      $sourceName = null; $source = $arguments.shift(); $target = $arguments.shift()\n    }\n  }\n  else if($arguments.length === 3) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = $arguments.shift()\n    }\n  }\n  return { $sourceName, $source, $target }\n}\nfunction parseValidatePropertyArguments(...$arguments) {\n  let [$key, $value, $source, $target] = $arguments\n  return { $key, $value, $source, $target }\n}\nfunction parseProperties($properties, $schema) {\n  const properties = typedObjectLiteral($properties)\n  if(_isPropertyDefinition($properties, $schema)) { return $properties }\n  iterateProperties: \n  for(const [\n    $propertyKey, $propertyValue\n  ] of Object.entries($properties)) {\n    let propertyDefinition = {}\n    const typeOfPropertyValue = typeOf($propertyValue)\n    const isPropertyDefinition = _isPropertyDefinition($propertyValue, $schema)\n    if(variables.TypeValues.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: $propertyValue } })\n    }\n    else if(variables.TypeKeys.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: variables.Types[$propertyValue] } })\n    }\n    else if(!isPropertyDefinition) {\n      const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey\n      Object.assign(propertyDefinition, {\n        type: { type: 'type', value: new Schema($propertyValue, Object.assign({}, $schema.options, {\n          parent: $schema,\n          path: subpropertyPath\n        })) }\n      })\n    }\n    else if(isPropertyDefinition) {\n      for(const [$propertyValidatorName, $propertyValidator] of Object.entries($propertyValue)) {\n        const isValidatorDefinition = _isValidatorDefinition($propertyValidator, $schema)\n        if(!isValidatorDefinition) {\n          let propertyValidator\n          if($propertyValidatorName === 'type') {\n            if($propertyValidator && typeof $propertyValidator === 'object') {\n              const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey\n              propertyValidator = new Schema($propertyValidator, Object.assign({}, $schema.options, {\n                parent: $schema, \n                path: subpropertyPath,\n              }))\n            }\n            else {\n              propertyValidator = $propertyValidator\n            }\n          }\n          else {\n            propertyValidator = $propertyValidator\n          }\n          propertyDefinition[$propertyValidatorName] = {\n            type: $propertyValidatorName, value: propertyValidator\n          }\n        }\n        else if(isValidatorDefinition) {\n          propertyDefinition[$propertyValidatorName] = $propertyValidator\n        }\n      }\n    }\n    propertyDefinition.validators = []\n    properties[$propertyKey] = propertyDefinition\n    const validators = new Map()\n    validators.set('type', Object.assign({}, {\n      type: 'type', validator: TypeValidator, value: propertyDefinition.type.value\n    }))\n    validators.set('required', Object.assign({}, {\n      type: 'required', validator: RequiredValidator, value: propertyDefinition.required?.value || false\n    }))\n    if(propertyDefinition.range) { validators.set('range', Object.assign({}, propertyDefinition.range, {\n      type: 'range', validator: RangeValidator\n    })) }\n    else if(propertyDefinition.min || propertyDefinition.max) { validators.set('range', Object.assign({}, {\n      type: 'range', min: propertyDefinition.min, max: propertyDefinition.max, validator: RangeValidator\n    })) }\n    if(propertyDefinition.length) { validators.set('length', Object.assign({}, propertyDefinition.length, {\n      type: 'length', validator: LengthValidator\n    })) }\n    else if(propertyDefinition.minLength || propertyDefinition.maxLength) { validators.set('length', Object.assign({}, {\n      type: 'length', min: propertyDefinition.minLength, max: maxLength, validator: LengthValidator\n    })) }\n    if(propertyDefinition.enum) { validators.set('enum', Object.assign({}, propertyDefinition.enum, {\n      type: 'enum', validator: EnumValidator\n    })) }\n    if(propertyDefinition.match) { validators.set('match', Object.assign({}, propertyDefinition.match, {\n      type: 'match', validator: MatchValidator\n    })) }\n    delete propertyDefinition.min\n    delete propertyDefinition.max\n    delete propertyDefinition.minLength\n    delete propertyDefinition.maxLength\n    for(const [\n      $validatorName, $validatorSettings\n    ] of validators.entries()) {\n      const ValidatorClass = $validatorSettings.validator\n      propertyDefinition[$validatorName] = $validatorSettings\n      propertyDefinition.validators.push(new ValidatorClass($validatorSettings, $schema))\n    }\n  }\n  return properties\n}\nfunction _isPropertyDefinition($object, $schema) {\n  if(!$object || $object instanceof Schema) { return false }\n  const typeKey = $schema.options.properties.type\n  return Object.hasOwn($object, typeKey)\n}\nfunction _isValidatorDefinition($object, $schema) {\n  if(!$object) { return false }\n  const valueKey = $schema.options.properties.value\n  return Object.hasOwn($object, valueKey)\n}\nexport default Schema","export default class ModelEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type, $settings)\n    Object.defineProperties(this, {\n      'model': { get () { return $model } },\n      'key': { configurable: true, get () {\n        const key = (this.path) ? this.path.split('.').pop() : null\n        Object.defineProperty(this, 'key', { value: key })\n        return key\n      } },\n      'change': { configurable: true, get () {\n        const change = $settings.change\n        Object.defineProperty(this, 'change', { value: change })\n        return change\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value\n        Object.defineProperty(this, 'value', { value: value })\n        return value\n      } },\n      'path': { configurable: true, get () {\n        const path = $settings.path\n        Object.defineProperty(this, 'path', { value: path })\n        return path\n      } },\n      'detail': { configurable: true, get () {\n        const detail = $settings.detail\n        Object.defineProperty(this, 'detail', { value: detail })\n        return detail\n      } },\n    })\n  }\n}","export default class Change {\n  #_keyter = false \n  #_preter = false \n  #_anter = false \n  #_conter = false\n  #keyter\n  #preter\n  #anter\n  #conter\n  constructor($settings = {}) {\n    for(const [$key, $value] of Object.entries($settings)) { this[$key] = $value }\n  }\n  get preter() { return this.#preter }\n  set preter($preter) {\n    if(this.#_preter === true) { return this.#preter }\n    this.#preter = $preter?.valueOf()\n    this.#_preter = true\n  }\n  get anter() { return this.#anter }\n  set anter($anter) {\n    if(this.#_anter === true) { return this.#anter }\n    this.#anter = $anter?.valueOf()\n    this.#_anter = true\n  }\n  get conter() {\n    if(\n      this.#_conter === true ||\n      [this.#_preter, this.#_anter].includes(false)\n    ) { return this.#conter }\n    const preter = JSON.stringify(this.preter)\n    const anter = JSON.stringify(this.anter)\n    let conter\n    if(anter !== preter) { conter = true }\n    else { conter = false }\n    this.#conter = conter\n    this.#_conter = true\n    return this.#conter\n  }\n}","export default class ValidatorEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type)\n    Object.defineProperties(this, {\n      'key': { configurable: true, get () {\n        const key = $settings.key\n        Object.defineProperty(this, 'key', { value: key })\n        return key\n      } },\n      'path': { configurable: true, get () {\n        const path = ($model.path)\n          ? [$model.path, $settings.key].join('.')\n          : $settings.key\n        Object.defineProperty(this, 'path', { value: path })\n        return path\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value\n        Object.defineProperty(this, 'value', { value: value, })\n        return value\n      } },\n      'valid': { configurable: true, get () {\n        const valid = $settings.valid\n        Object.defineProperty(this, 'valid', { value: valid })\n        return valid\n      } },\n    })\n  }\n}","import assign from './assign/index.js'\nimport defineProperties from './define-properties/index.js'\nimport defineProperty from './define-property/index.js'\nimport freeze from './freeze/index.js'\nimport seal from './seal/index.js'\nexport default {\n  assign,\n  defineProperties,\n  defineProperty,\n  freeze,\n  seal,\n}","import { recursiveAssign, typedObjectLiteral } from 'recourse'\nimport Change from '../../../change/index.js'\nimport { ModelEvent, ValidatorEvent } from '../../../events/index.js'\nexport default function assign($model, $options, ...$sources) {\n  const options = Object.assign({}, $options)\n  const assignObject = 'assign'\n  const assignArray = options.assignArray || 'assign'\n  const { path, schema, source, target } = $model\n  const { enableValidation, mutatorEvents, required, sourceTree, validationEvents } = options\n  const assignedSources = []\n  const assignChange = new Change({ preter: $model })\n  iterateAssignSources: \n  for(let $source of $sources) {\n    let assignedSource\n    const assignSourceChange = new Change({ preter: $model })\n    if(Array.isArray($source)) { assignedSource = [] }\n    else if($source && typeof $source === 'object') { assignedSource = {} }\n    let validObject, validObjectReport\n    if(enableValidation && schema) {\n      validObject = schema.validate($source, $model.valueOf())\n      validObjectReport = validObject.report()\n    }\n    iterateSourceProperties:\n    for(let [$sourceKey, $sourceValue] of Object.entries($source)) {\n      const assignSourcePropertyChange = new Change({ preter: target[$sourceKey] })\n      const assignSourcePropertyKeyChange = new Change({ preter: target[$sourceKey] })\n      if(schema && enableValidation) {\n        const validatorTarget = $model.valueOf()\n        const validatorSource = $source\n        const validSourceProperty = schema.validateProperty($sourceKey, $sourceValue, validatorSource, validatorTarget)\n        if(validationEvents) {\n          let type, propertyType\n          const validatorEventPath = (path) ? [path, $sourceKey].join('.') : String($sourceKey)\n          if(validSourceProperty.valid) {\n            type = 'validProperty'\n            propertyType = ['validProperty', $sourceKey].join(':')\n          }\n          else {\n            type = 'nonvalidProperty'\n            propertyType = ['nonvalidProperty', $sourceKey].join(':')\n          }\n          for(const $eventType of [type, propertyType]) {\n            $model.dispatchEvent(new ValidatorEvent($eventType, validSourceProperty, $model))\n          }\n        }\n        if(!validSourceProperty.valid) { continue iterateSourceProperties }\n      }\n      let sourceValue\n      if($sourceValue && typeof $sourceValue === 'object') {\n        if($sourceValue instanceof $model.constructor) {\n          sourceValue = $sourceValue.valueOf()\n        }\n        let subschema\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value }\n        else if(schema?.type === 'object') { subschema = schema.target[$sourceKey].type.value }\n        else { subschema = null }\n        const modelPath = (path)\n          ? [path, $sourceKey].join('.')\n          : String($sourceKey)\n        if(sourceTree === false) {\n          const suboptions = recursiveAssign({}, options, {\n            path: modelPath,\n            parent: $model,\n          })\n          sourceValue = new $model.constructor($sourceValue, subschema, suboptions)\n          const assignment = { [$sourceKey]: sourceValue }\n          Object.assign(target, assignment)\n          Object.assign(assignedSource, assignment)\n        }\n        else {\n          if(target[$sourceKey] instanceof $model.constructor) {\n            sourceValue = target[$sourceKey]\n          }\n          else {\n            const subproperties = typedObjectLiteral($sourceValue)\n            const suboptions = recursiveAssign({}, options, {\n              path: modelPath,\n              parent: $model,\n            })\n            sourceValue = new $model.constructor(subproperties, subschema, suboptions)\n          }\n          const assignment = { [$sourceKey]: sourceValue }\n          Object.assign(target, assignment)\n          Object.assign(assignedSource, assignment)\n          $model.retroReenableEvents()\n          if(sourceValue.type === 'array') {\n            if(['push', 'unshift'].includes(assignArray)) { sourceValue[assignArray](...$sourceValue) }\n            else { sourceValue[assignArray]($sourceValue) }\n          }\n          else if(sourceValue.type === 'object') { sourceValue[assignObject]($sourceValue) }\n        }\n      }\n      else {\n        sourceValue = $sourceValue\n        const assignment = { [$sourceKey]: sourceValue }\n        Object.assign(target, assignment)\n        Object.assign(assignedSource, assignment)\n      }\n      if(mutatorEvents) {\n        const modelEventPath = (path) ? [path, $sourceKey].join('.') : String($sourceKey)\n        if(mutatorEvents['assignSourceProperty:$key']) {\n          const type = ['assignSourceProperty', $sourceKey].join(':')\n          assignSourcePropertyKeyChange.anter = target[$sourceKey]\n          $model.dispatchEvent(\n            new ModelEvent(type, {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyKeyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          )\n        }\n        if(mutatorEvents['assignSourceProperty']) {\n          assignSourcePropertyChange.anter = target[$sourceKey]\n          $model.dispatchEvent(\n            new ModelEvent('assignSourceProperty', {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          )\n        }\n      }\n    }\n    assignedSources.push(assignedSource)\n    if(mutatorEvents && mutatorEvents['assignSource']) {\n      assignSourceChange.anter = $model\n      $model.dispatchEvent(\n        new ModelEvent('assignSource', {\n          path,\n          change: assignSourceChange,\n          detail: {\n            source: assignedSource,\n          },\n        }, $model)\n      )\n    }\n  }\n  if(mutatorEvents && mutatorEvents['assign']) {\n    assignChange.anter = $model\n    $model.dispatchEvent(\n      new ModelEvent('assign', { \n        path,\n        change: assignChange,\n        detail: {\n          sources: assignedSources,\n        },\n      }, $model)\n    )\n  }\n  return $model\n}","import { typedObjectLiteral } from 'recourse'\nimport Change from '../../../change/index.js'\nimport { ModelEvent, ValidatorEvent } from '../../../events/index.js'\nexport default function defineProperties($model, $options, $propertyDescriptors) {\n  const { path, schema } = $model\n  let {\n    enableValidation, mutatorEvents, required, \n    validation, validationEvents, validationReport\n  } = $options\n  const propertyDescriptorEntries = Object.entries($propertyDescriptors)\n  const definePropertiesChange = new Change({ preter: $model })\n  iteratePropertyDescriptors: \n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of propertyDescriptorEntries) {\n    $model.defineProperty($propertyKey, $propertyDescriptor, Object.assign({}, $options, {\n      validation, validationReport\n    }))\n  }\n  if(mutatorEvents && mutatorEvents['defineProperties']) {\n    definePropertiesChange.anter = $model\n    $model.dispatchEvent(\n      new ModelEvent(\n        'defineProperties',\n        {\n          path,\n          value: $model.valueOf(),\n          detail: {\n            descriptors: $propertyDescriptors,\n          },\n        },\n        $model\n      )\n    )\n  }\n  return $model\n}","import { impandTree, recursiveAssign, typedObjectLiteral } from 'recourse'\nimport Change from '../../../change/index.js'\nimport { ModelEvent, ValidatorEvent } from '../../../events/index.js'\nexport default function defineProperty($model, $options, $propertyKey, $propertyDescriptor) {\n  const options = Object.assign({}, $options)\n  const assignObject = 'defineProperties'\n  const assignArray = options.assignArray || 'defineProperties'\n  const {\n    descriptorTree, enableValidation, mutatorEvents, \n    validation, validationEvents, validationReport\n  } = options\n  const { target, path, schema } = $model\n  const propertyValue = $propertyDescriptor.value\n  const targetPropertyDescriptor = Object.getOwnPropertyDescriptor(target, $propertyKey) || {}\n  const targetPropertyValue = targetPropertyDescriptor.value\n  const definePropertyChange = new Change({ preter: targetPropertyValue })\n  const definePropertyKeyChange = new Change({ preter: targetPropertyValue })\n  const targetPropertyValueIsModelInstance = targetPropertyValue instanceof $model.constructor\n  if(schema && enableValidation) {\n    const validProperty = schema.validateProperty(\n      $propertyKey, \n      impandTree(propertyValue, 'value') || propertyValue,\n      {},\n      $model.valueOf()\n    )\n    if(validationEvents) {\n      let type, propertyType\n      const validatorPath = (path)\n        ? [path, $propertyKey].join('.')\n        : String($propertyKey)\n      if(validProperty.valid) {\n        type = 'validProperty'\n        propertyType = ['validProperty', $propertyKey].join(':')\n      }\n      else {\n        type = 'nonvalidProperty'\n        propertyType = ['nonvalidProperty', $propertyKey].join(':')\n      }\n      for(const $eventType of [type, propertyType]) {\n        $model.dispatchEvent(new ValidatorEvent($eventType, validProperty, $model))\n      }\n    }\n    if(!validProperty.valid) { return $model }\n  }\n  if(propertyValue && typeof propertyValue === 'object') {\n    const modelPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey)\n    if(targetPropertyValueIsModelInstance) {\n      if(descriptorTree === true) {\n        targetPropertyValue.defineProperties($propertyDescriptor)\n      }\n      else {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor)\n      }\n    }\n    else {\n      let subschema\n      if(schema) {\n        if(schema.type === 'array') { subschema = schema.target[0].type.value }\n        else if(schema.type === 'object') { subschema = schema.target[$propertyKey].type.value }\n        else { subschema = undefined }\n      }\n      let subtarget = typedObjectLiteral(propertyValue)\n      const suboptions = recursiveAssign({}, options, {\n        path: modelPath,\n        parent: $model,\n      })\n      const submodel = new $model.constructor(\n        subtarget, subschema, suboptions\n      )\n      if(descriptorTree === true) {\n        target[$propertyKey] = submodel\n        $model.retroReenableEvents()\n        if(submodel.type === 'array') {\n          if(['push', 'unshift'].includes(assignArray)) { submodel[assignArray](...propertyValue) }\n          else { submodel[assignArray](propertyValue) }\n        }\n        else if(submodel.type === 'object') { submodel[assignObject](propertyValue) }\n      }\n      else if(descriptorTree === false) {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor)\n      }\n    }\n  }\n  else {\n    Object.defineProperty(target, $propertyKey, $propertyDescriptor)\n  }\n  if(mutatorEvents) {\n    const modelEventPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey)\n    if(mutatorEvents['defineProperty:$key']) {\n      definePropertyKeyChange.anter = target[$propertyKey]\n      const type = ['defineProperty', $propertyKey].join(':')\n      $model.dispatchEvent(\n        new ModelEvent(type, {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyKeyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ))\n    }\n    if(mutatorEvents['defineProperty']) {\n      definePropertyChange.anter = target[$propertyKey]\n      $model.dispatchEvent(\n        new ModelEvent('defineProperty', {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ))\n    }\n  }\n  return $model\n}","import { ModelEvent } from '../../../events/index.js'\nexport default function freeze($model, $options) {\n  const { recursive, mutatorEvents } = $options\n  const { target } = $model\n  if(recursive === true) {\n    iterateProperties: \n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.freeze()\n        if(mutatorEvents && mutatorEvents['freezeProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'freezeProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          )\n        }\n      }\n    }\n  }\n  Object.freeze(target)\n  if(mutatorEvents && mutatorEvents['freeze']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'freeze',\n        { path: $model.path },\n        $model\n      )\n    )\n  }\n  return $model\n}","import { ModelEvent } from '../../../events/index.js'\nexport default function seal($model, $options) {\n  const { recursive, mutatorEvents } = $options\n  const { target } = $model\n  if(recursive === true) {\n    iterateProperties: \n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.seal()\n        if(mutatorEvents && mutatorEvents['sealProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'sealProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          )\n        }\n      }\n    }\n  }\n  Object.seal(target)\n  if(mutatorEvents && mutatorEvents['seal']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'seal',\n        { path: $model.path },\n        $model\n      )\n    )\n  }\n  return $model\n}","import Concat from './concat/index.js'\nimport CopyWithin from './copy-within/index.js'\nimport Fill from './fill/index.js'\nimport Pop from './pop/index.js'\nimport Push from './push/index.js'\nimport Reverse from './reverse/index.js'\nimport Shift from './shift/index.js'\nimport Splice from './splice/index.js'\nimport Unshift from './unshift/index.js'\nexport default {\n  concat: Concat,\n  copyWithin: CopyWithin,\n  fill: Fill,\n  pop: Pop,\n  push: Push,\n  reverse: Reverse,\n  shift: Shift,\n  splice: Splice,\n  unshift: Unshift,\n}","import { typedObjectLiteral } from 'recourse'\nimport { ModelEvent, ValidatorEvent } from '../../../events/index.js'\nexport default function concat($model, $options) {\n  const { target, path, schema } = $model\n  const { enableValidation, mutatorEvents, source, validationEvents } = $options\n  const $arguments = [].concat(...arguments)\n  let valueIndex = target.length\n  const values = []\n  let targetConcat = [...Array.from(target)]\n  let model\n  iterateValues: \n  for(let $value of $arguments) {\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf()\n      const validatorSource = source || typedObjectLiteral(validatorTarget)\n      const validValue = schema.validateProperty(valueIndex, $subvalue, validatorSource, validatorTarget)\n      if(schema &&validationEvents) {\n        let type, propertyType\n        const validatorPath = (path)\n          ? [path, valueIndex].join('.')\n          : String(valueIndex)\n        if(validValue.valid) {\n          type = 'validProperty'\n          propertyType = ['validProperty', valueIndex].join(':')\n        }\n        else {\n          type = 'nonvalidProperty'\n          propertyType = ['nonvalidProperty', valueIndex].join(':')\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validValue, $model))\n        }\n      }\n      if(!validValue.valid) { valueIndex++; continue iterateValues }\n    }\n    const modelPath = (path)\n      ? [path, valueIndex].join('.')\n      : String(valueIndex)\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf() }\n      let subschema = schema?.target[0].type.value || null\n      const submodel = typedObjectLiteral($value)\n      let value = new $model.constructor(submodel, subschema, {\n        path: modelPath,\n        parent: $model,\n      })\n      value.concat($value)\n      values[valueIndex] = value\n    }\n    else {\n      values[valueIndex] = $value\n    }\n    targetConcat = Array.prototype.concat.call(targetConcat, values[valueIndex])\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, valueIndex].join('.')\n        : String(valueIndex)\n      if(mutatorEvents['concatElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        )\n      }\n      if(mutatorEvents['concatElement:$index']) {\n        const type = ['concatElement', valueIndex].join(':')\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        )\n      }\n    }\n    valueIndex++\n  }\n  model = new $model.constructor(targetConcat, schema, $model.options)\n  if(mutatorEvents && mutatorEvents['concat']) {\n    $model.dispatchEvent(\n      new ModelEvent('concat', {\n        path,\n        detail: {\n          values: model,\n        },\n      }, $model)\n    )\n  }\n  return model\n}","import { ModelEvent } from '../../../events/index.js'\nexport default function copyWithin($model, $options) {\n  const { target, path } = $model\n  const { enableValidation, validationEvents, mutatorEvents } = $options\n  const $arguments = [...arguments]\n  const copyTarget = (\n    arguments[0] >= 0\n  ) ? arguments[0]\n    : target.length = arguments[0]\n  const start = (\n    arguments[1] >= 0\n  ) ? arguments[1]\n    : target.length + arguments[1]\n  const end = (\n    arguments[2] === undefined\n  ) ? target.length\n    : (\n    arguments[2] >= 0\n  ) ? arguments[2]\n    : target.length + arguments[2]\n  const copiedItems = []\n  let copyIndex = start\n  let targetIndex = copyTarget\n  iterateCopyIndex: \n  while(copyIndex < end) {\n    const copyItem = target[copyIndex]\n    copiedItems.push(copyItem)\n    Array.prototype.copyWithin.call(\n      target,\n      targetIndex,\n      copyIndex,\n      copyIndex + 1\n    )\n    $model.retroReenableEvents()\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, copyIndex].join('.')\n        : String(copyIndex)\n      if(mutatorEvents['copyWithinElement']) {\n        $model.dispatchEvent(\n          new ModelEvent(\n            'copyWithinElement',\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        )\n      }\n      if(mutatorEvents['copyWithinElement:$index']) {\n        const type  = ['copyWithinElement', copyIndex].join(':')\n        $model.dispatchEvent(\n          new ModelEvent(\n            type,\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        )\n      }\n    }\n    copyIndex++\n    targetIndex++\n  }\n  // Array Copy Within Event\n  if(mutatorEvents && mutatorEvents['copyWithin']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'copyWithin',\n        {\n          path,\n          detail: {\n            target: copyTarget,\n            start: start,\n            end: end,\n            items: copiedItems,\n          },\n        },\n        $model\n      )\n    )\n  }\n  return $model\n}","import { typedObjectLiteral } from 'recourse'\nimport { ModelEvent, ValidatorEvent } from '../../../events/index.js'\nexport default function fill($model, $options, ...$arguments) {\n  const options = Object.assign({}, $options)\n  const { target, path, schema } = $model\n  const assignObject = options.assignObject\n  const assignArray = options.assignArray || assignObject\n  const { enableValidation, lengthen, mutatorEvents, validationEvents } = options\n  const filled = []\n  let $start\n  if(typeof $arguments[1] === 'number') {\n    $start = ($arguments[1] >= 0)\n      ? $arguments[1]\n      : target.length + $arguments[1]\n  }\n  else { $start = 0 }\n  let $end\n  if(typeof $arguments[2] === 'number') {\n    $end = ($arguments[2] >= 0)\n      ? $arguments[2]\n      : target.length + $arguments[2]\n  } else { $end = target.length }\n  if(lengthen && target.length < $end) { target.length = $end }\n  let fillIndex = $start\n  iterateFillIndexes: \n  while(\n    fillIndex < target.length &&\n    fillIndex < $end\n  ) {\n    if(schema && enableValidation) {\n      let validValue = schema.validate(validValue, $model.valueOf())\n      if(validationEvents) {\n        let type, propertyType\n        const validatorPath = (path)\n          ? [path, fillIndex].join('.')\n          : String(fillIndex)\n        if(validValue.valid) {\n          type = 'validProperty'\n          propertyType = ['validProperty', fillIndex].join(':')\n        }\n        else {\n          type = 'nonvalidProperty'\n          propertyType = ['nonvalidProperty', fillIndex].join(':')\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validValue, $model))\n        }\n      }\n      if(!validValue.valid) { continue iterateFillIndexes }\n    }\n    const modelPath = (path)\n      ? [path, fillIndex].join('.')\n      : String(fillIndex)\n    let $value = $arguments[0]\n    let value\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf() }\n      const subschema = schema?.target[0].type.value || null\n      const subproperties = typedObjectLiteral($value)\n      const suboptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      })\n      value = new $model.constructor(subproperties, subschema, suboptions)\n    }\n    Array.prototype.fill.call(target, value, fillIndex, fillIndex + 1)\n    $model.retroReenableEvents()\n    if(value.type === 'array') {\n      if(['push', 'unshift'].includes(assignArray)) { value[assignArray](...$value) }\n      else { value[assignArray]($value) }\n    }\n    else if(value.type === 'object') { value[assignObject]($value) }\n    filled.push(value)\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, fillIndex].join('.')\n        : String(fillIndex)\n      if(mutatorEvents['fillElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('fillElement', {\n            path: modelEventPath, \n            value: value,\n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        )\n      }\n      if(mutatorEvents['fillElement:$index']) {\n        const type = ['fillElement', fillIndex].join(':')\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        )\n      }\n    }\n    fillIndex++\n  }\n  if(mutatorEvents && mutatorEvents['fill']) {\n    $model.dispatchEvent(\n      new ModelEvent('fill', {\n        path,\n        detail: {\n          start: $start,\n          end: $end,\n          filled,\n        },\n      },\n      $model)\n    )\n  }\n  return $model\n}","import { ModelEvent } from '../../../events/index.js'\nexport default function pop($model, $options) {\n  const { mutatorEvents } = $options\n  const { target, path } = $model\n  const popElement = Array.prototype.pop.call(target)\n  const popElementIndex = target.length - 1\n  $model.retroReenableEvents()\n  if(mutatorEvents && mutatorEvents['pop']) {\n    const modelEventPath = (path)\n      ? [path, popElementIndex].join('.')\n      : String(popElementIndex)\n      $model.dispatchEvent(\n      new ModelEvent(\n        'pop',\n        {\n          path: modelEventPath,\n          value: popElement,\n          detail: {\n            elementIndex: popElementIndex,\n            element: popElement,\n          },\n        },\n        $model\n      )\n    )\n  }\n  return popElement\n}","import { recursiveAssign, typedObjectLiteral, typeOf } from 'recourse'\nimport { ModelEvent, ValidatorEvent } from '../../../events/index.js'\nexport default function push($model, $options, ...$elements) {\n  const options = Object.assign({}, $options)\n  const assignArray = 'push'\n  const assignObject = options.assignObject\n  const { enableValidation, mutatorEvents, source, validationEvents } = options\n  const { target, path, schema } = $model\n  const elements = []\n  let elementsIndex = 0\n  iterateElements:\n  for(let $element of $elements) {\n    let element\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf()\n      const validatorSource = source || typedObjectLiteral(validatorTarget)\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget)\n      if(validationEvents) {\n        let type, propertyType\n        const validatorPath = (path)\n          ? [path, elementsIndex].join('.')\n          : String(elementsIndex)\n        if(validElement.valid) {\n          type = 'validProperty'\n          propertyType = ['validProperty', elementsIndex].join(':')\n        }\n        else {\n          type = 'nonvalidProperty'\n          propertyType = ['nonvalidProperty', elementsIndex].join(':')\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validElement, $model))\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex)\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element\n      const subschema = schema?.target[0].type.value || null\n      const subproperties = typedObjectLiteral(typeOf($element))\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      })\n      element = new $model.constructor(subproperties, subschema, submodelOptions)\n      Array.prototype.push.call(target, element)\n      $model.retroReenableEvents()\n      if(element.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { element[assignArray](...$element) }\n        else { element[assignArray]($element) }\n      }\n      else if(element.type === 'object') { element[assignObject]($element) }\n    }\n    else {\n      element = $element\n      Array.prototype.push.call(target, element)\n    }\n    elements.push(element)\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex)\n      if(mutatorEvents['pushElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('pushElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        )\n      }\n      if(mutatorEvents['pushElement:$index']) {\n        const type = ['pushElement', elementsIndex].join(':')\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        )\n      }\n    }\n    elementsIndex++\n  }\n  if(mutatorEvents && mutatorEvents['push']) {\n    $model.dispatchEvent(\n      new ModelEvent('push', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    )\n  }\n  return target.length\n}","import { ModelEvent } from '../../../events/index.js'\nexport default function reverse($model, $options) {\n  const { mutatorEvents } = $options\n  const { target, path } = $model\n  Array.prototype.reverse.call(target, ...arguments)\n  $model.retroReenableEvents()\n  if(mutatorEvents && mutatorEvents['reverse']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'reverse',\n        {\n          path,\n          detail: {\n            reference: target\n          },\n        },\n        $model\n      )\n    )\n  }\n  return $model\n}","import { ModelEvent } from '../../../events/index.js'\nexport default function shift($model, $options) {\n  const { mutatorEvents } = $options\n  const { target, path } = $model\n  const shiftElement = Array.prototype.shift.call(target)\n  const shiftElementIndex = 0\n  $model.retroReenableEvents()\n  if(mutatorEvents && mutatorEvents['shift']) {\n    const modelEventPath = (path)\n      ? [path, shiftElementIndex].join('.')\n      : String(shiftElementIndex)\n    $model.dispatchEvent(\n      new ModelEvent(\n        'shift',\n        {\n          path: modelEventPath,\n          value: shiftElement,\n          detail: {\n            elementIndex: shiftElementIndex,\n            element: shiftElement,\n          },\n        },\n        $model\n      )\n    )\n  }\n  return shiftElement\n}","import { typedObjectLiteral } from 'recourse'\nimport { ModelEvent } from '../../../events/index.js'\nexport default function splice($model, $options) {\n  const options = Object.assign({}, $options)\n  const assignObject = options.assignObject\n  const assignArray = options.assignArray || assignObject\n  const { mutatorEvents, source } = options\n  const { target, path, schema } = $model\n  const { enableValidation, validationEvents } = options\n  const $arguments = [...arguments]\n  const $start = ($arguments[0] >= 0)\n    ? $arguments[0]\n    : target.length + $arguments[0]\n  const $deleteCount = ($arguments[1] <= 0)\n    ? 0\n    : (\n      $arguments[1] === undefined ||\n      $start + $arguments[1] >= target.length\n    ) ? target.length - $start\n      : $arguments[1]\n  const $addItems = $arguments.slice(2)\n  const addCount = $addItems.length\n  const deleteItems = []\n  let deleteItemsIndex = 0\n  spliceDelete:\n  while(deleteItemsIndex < $deleteCount) {\n    const deleteItem = Array.prototype.splice.call(target, $start, 1)[0]\n    deleteItems.push(deleteItem)\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, deleteItemsIndex].join('.')\n        : String(deleteItemsIndex)\n      if(mutatorEvents['spliceDeleteElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceDeleteElement', {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        )\n      }\n      if(mutatorEvents['spliceDeleteElement:$index']) {\n        const type = ['spliceDeleteElement', deleteItemsIndex].join(':')\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        )\n      }\n    }\n    deleteItemsIndex++\n  }\n  let addItemsIndex = 0\n  spliceAdd: \n  while(addItemsIndex < addCount) {\n    let addItem = $addItems[addItemsIndex]\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf()\n      const validatorSource = source || typedObjectLiteral(validatorTarget)\n      const validAddItem = schema.validateProperty(elementIndex, element, validatorSource, validatorTarget)\n      if(validationEvents) {\n        let type, propertyType\n        const validatorEventPath = (path)\n          ? [path, addItemsIndex].join('.')\n          : String(addItemsIndex)\n        if(validAddItem.valid) {\n          type = 'validProperty'\n          propertyType = ['validProperty', addItemsIndex].join(':')\n        }\n        else {\n          type = 'nonvalidProperty'\n          propertyType = ['nonvalidProperty', addItemsIndex].join(':')\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validAddItem, $model))\n        }\n      }\n      if(!validAddItem.valid) { addItemsIndex++; continue spliceAdd }\n    }\n    const modelPath = (path)\n      ? [path, addItemsIndex].join('.')\n      : String(addItemsIndex)\n    let startIndex = $start + addItemsIndex\n    if(addItem && typeof addItem === 'object') {\n      if(addItem instanceof $model.constructor) { addItem = addItem.valueOf() }\n      const subschema = schema?.target[0].type.value || null\n      const subproperties = typedObjectLiteral(addItem)\n      const suboptions = recursiveAssign({}, options, {\n        path: modelPath,\n        parent: $model,\n      })\n      addItem = new $model.constructor(subproperties, subschema, suboptions)\n      Array.prototype.splice.call(target, startIndex, 0, addItem)\n      $model.retroReenableEvents()\n      if(addItem.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { addItem[assignArray](...$value) }\n        else { addItem[assignArray]($value) }\n      }\n      else if(addItem.type === 'object') { addItem[assignObject]($value) }\n    }\n    else {\n      Array.prototype.splice.call(target, startIndex, 0, addItem)\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, addItemsIndex].join('.')\n        : String(addItemsIndex)\n      if(mutatorEvents['spliceAddElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceAddElement', {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        )\n      }\n      if(mutatorEvents['spliceAddElement:$index']) {\n        const type = ['spliceAddElement', addItemsIndex].join(':')\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        )\n      }\n    }\n    addItemsIndex++\n  }\n  if(mutatorEvents && mutatorEvents['splice']) {\n    $model.dispatchEvent(\n      new ModelEvent('splice', {\n        path,\n        detail: {\n          $start,\n          deleted: deleteItems,\n          added: $addItems,\n          length: target.length,\n        },\n      },\n      $model)\n    )\n  }\n  return deleteItems\n}","import { recursiveAssign, typedObjectLiteral, typeOf } from 'recourse'\nimport { ModelEvent } from '../../../events/index.js'\nexport default function unshift($model, $options, ...$elements) {\n  const options = Object.assign({}, $options)\n  const assignArray = 'unshift'\n  const assignObject = options.assignObject\n  const { enableValidation, mutatorEvents, source, validationEvents } = options\n  const { target, path, schema } = $model\n  const elements = []\n  let elementsIndex = 0\n  iterateElements:\n  for(let $element of $elements) {\n    let element\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf()\n      const validatorSource = source || typedObjectLiteral(validatorTarget)\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget)\n      if(validationEvents) {\n        let type, propertyType\n        const validatorPath = (path)\n          ? [path, elementsIndex].join('.')\n          : String(elementsIndex)\n        if(validElement.valid) {\n          type = 'validProperty'\n          propertyType = ['validProperty', elementsIndex].join(':')\n        }\n        else {\n          type = 'nonvalidProperty'\n          propertyType = ['nonvalidProperty', elementsIndex].join(':')\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validElement, $model))\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex)\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element\n      const subschema = schema?.target[0].type.value || null\n      const subproperties = typedObjectLiteral(typeOf($element))\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      })\n      element = new $model.constructor(subproperties, subschema, submodelOptions)\n      Array.prototype.unshift.call(target, element)\n      $model.retroReenableEvents()\n      if(element.type === 'array') { element[assignArray](...$element) }\n      else if(element.type === 'object') { element[assignObject]($element) }\n    }\n    else {\n      element = $element\n      Array.prototype.unshift.call(target, element)\n    }\n    elements.unshift(element)\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex)\n      if(mutatorEvents['unshiftElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('unshiftElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        )\n      }\n      if(mutatorEvents['unshiftElement:$index']) {\n        const type = ['unshiftElement', elementsIndex].join(':')\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        )\n      }\n    }\n    elementsIndex++\n  }\n  if(mutatorEvents && mutatorEvents['unshift']) {\n    $model.dispatchEvent(\n      new ModelEvent('unshift', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    )\n  }\n  return target.length\n}","import getProperty from './get-property/index.js'\nimport setProperty from './set-property/index.js'\nimport deleteProperty from './delete-property/index.js'\nexport default {\n  get: getProperty,\n  set: setProperty,\n  delete: deleteProperty,\n}","import { recursiveAssign } from 'recourse'\nimport getContent from './get-content/index.js'\nimport getContentProperty from './get-content-property/index.js'\nexport default function getProperty($model, $options, ...$arguments) {\n  let getProperty\n  const options = $options\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { recursiveAssign(options, $arguments[1]) }\n    getProperty = getContentProperty($model, options, ...$arguments)\n  }\n  else {\n    if($arguments.length === 1) { recursiveAssign(options, $arguments[0]) }\n    getProperty = getContent($model, options, ...$arguments)\n  }\n  return getProperty\n}","import { regularExpressions } from 'recourse'\nimport { ModelEvent } from '../../../../events/index.js'\nexport default function getContentProperty($model, $options, $path) {\n  const { target, path } = $model\n  const { mutatorEvents, pathkey, subpathError } = $options\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n    const propertyKey = subpaths.shift()\n    let propertyValue = target[propertyKey]\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.get(subpaths.join('.'), $options)\n    }\n    if(mutatorEvents) {\n      if(mutatorEvents['getProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('getProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        )\n      }\n      if(mutatorEvents['getProperty:$key']) {\n        const type = ['getProperty', propertyKey].join(':')\n        const _path = [path, propertyKey].join('.')\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        )\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    const propertyValue = target[propertyKey]\n    return propertyValue\n  }\n}","import { ModelEvent } from '../../../../events/index.js'\nexport default function getContent($model, $options) {\n  const { path } = $model\n  const { mutatorEvents } = $options\n  if(mutatorEvents && mutatorEvents['get']) {\n    $model.dispatchEvent(\n      new ModelEvent('get', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    )\n  }\n  return $model\n}","import { recursiveAssign } from 'recourse'\nimport setContent from './set-content/index.js'\nimport setContentProperty from './set-content-property/index.js'\nexport default function setProperty($model, $options, ...$arguments) {\n  let setProperty\n  const options = $options\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 3) { recursiveAssign(options, $arguments[2]) }\n    setProperty = setContentProperty($model, options, ...$arguments)\n  }\n  else {\n    if($arguments.length === 2) { recursiveAssign(options, $arguments[1]) }\n    setProperty = setContent($model, options, ...$arguments)\n  }\n  return setProperty\n}","import { recursiveAssign, regularExpressions, typedObjectLiteral, typeOf } from 'recourse'\nimport Change from '../../../../change/index.js'\nimport { ModelEvent, ValidatorEvent } from '../../../../events/index.js'\nexport default function setContentProperty($model, $options, $path, $value) {\n  const options = Object.assign({}, $options)\n  const assignObject = 'set'\n  const assignArray = options.assignArray || 'set'\n  const { target, path, schema } = $model\n  const {\n    enableValidation, mutatorEvents, pathkey, \n    recursive, subpathError, \n    validationEvents, source, \n  } = options\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n    const propertyKey = subpaths.shift()\n    let propertyValue\n    const typeOfPropertyValue = typeOf($value)\n    const modelPath = (path)\n      ? [path, propertyKey].join('.')\n      : String(propertyKey)\n    if(subpaths.length) {\n      if(recursive && target[propertyKey] === undefined) {\n        let subschema\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value }\n        else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value }\n        else { subschema = undefined }\n        let submodel\n        if(typeOfPropertyValue === 'array') { submodel = [] }\n        else if(typeOfPropertyValue === 'object') { submodel = {} }\n        else {\n          if(isNaN(Number(propertyKey))) { submodel = {} }\n          else { submodel = [] }\n        }\n        const submodelOptions = recursiveAssign({}, options, {\n          path: modelPath,\n          parent: $model,\n        })\n        propertyValue = new $model.constructor(submodel, subschema, submodelOptions)\n      }\n      else {\n        propertyValue = target[propertyKey]\n      }\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value) }\n        else { propertyValue[assignArray]($value) }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject](subpaths.join('.'), $value, options) }\n      return propertyValue\n    }\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf()\n      const validatorSource = source || typedObjectLiteral(validatorTarget)\n      const validTargetProp = schema.validateProperty(propertyKey, $value, validatorSource, validatorTarget)\n      if(validationEvents) {\n        let type, propertyType\n        if(validTargetProp.valid) {\n          type = 'validProperty'\n          propertyType = ['validProperty', propertyKey].join(':')\n        }\n        else {\n          type = 'nonvalidProperty'\n          propertyType = ['nonvalidProperty', propertyKey].join(':')\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validTargetProp, $model))\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf() }\n      const typeOfPropertyValue= typeOf($value)\n      let subschema\n      let submodel\n      if(schema?.type === 'array') { subschema = schema.target[0].type.value }\n      else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value }\n      else { subschema = undefined }\n      if(typeOfPropertyValue === 'array') { submodel = [] }\n      else if(typeOfPropertyValue === 'object') { submodel = {} }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {} }\n        else { submodel = [] }\n      }\n      const submodelOptions = recursiveAssign({}, options, {\n        path: modelPath,\n        parent: $model,\n      })\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions)\n      target[propertyKey] = propertyValue\n      $model.retroReenableEvents()\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value) }\n        else { propertyValue[assignArray]($value) }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value) }\n    }\n    else {\n      propertyValue = $value\n      target[propertyKey] = propertyValue\n    }\n    // const _propertyValue = (propertyValue === null) ? null : propertyValue.valueOf()\n    const _propertyValue = propertyValue.valueOf()\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey)\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            }\n          }, $model)\n        )\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':')\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        )\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    let propertyKey = $path\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf() }\n      const typeOfPropertyValue = typeOf($value)\n      let subschema\n      let submodel\n      if(schema?.type === 'array') {\n        subschema = schema.target[0].type.value\n      }\n      if(schema?.type === 'object') {\n        subschema = schema.target[propertyKey].type.value\n      }\n      else { subschema = undefined }\n      if(typeOfPropertyValue === 'array') { submodel = [] }\n      else if(typeOfPropertyValue === 'object') { submodel = {} }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {} }\n        else { submodel = [] }\n      }\n      const modelPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey)\n      const submodelOptions = recursiveAssign({}, options, {\n        path: modelPath,\n        parent: $model,\n      })\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions)\n      target[propertyKey] = propertyValue\n      $model.retroReenableEvents()\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value) }\n        else { propertyValue[assignArray]($value) }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value) }\n    }\n    else {\n      propertyValue = $value\n      target[propertyKey] = propertyValue\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey)\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            },\n          }, $model)\n        )\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':')\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        )\n      }\n    }\n    return propertyValue\n  }\n}","import { ModelEvent, ValidatorEvent } from '../../../../events/index.js'\nimport Change from '../../../../change/index.js'\nexport default function setContent($model, $options, $properties) {\n  const { path, schema } = $model\n  let { enableValidation, mutatorEvents, required, validationEvents  } = $options\n  iterateProperties: \n  for(const [$propertyKey, $propertyValue] of Object.entries($properties)) {\n    $model.set($propertyKey, $propertyValue, Object.assign($options, {\n      source: $properties,\n    }))\n  }\n  if(mutatorEvents && mutatorEvents['set']) {\n    $model.dispatchEvent(\n      new ModelEvent('set', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    )\n  }\n  return $model\n}","import { recursiveAssign } from 'recourse'\nimport deleteContent from './delete-content/index.js'\nimport deleteContentProperty from './delete-content-property/index.js'\nexport default function deleteProperty($model, $options, ...$arguments) {\n  let deleteProperty\n  const options = $options\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { recursiveAssign(options, $arguments[1]) }\n    deleteProperty = deleteContentProperty($model, options, ...$arguments)\n  }\n  else {\n    if($arguments.length === 1) { recursiveAssign(options, $arguments[0]) }\n    deleteProperty = deleteContent($model, options, ...$arguments)\n  }\n  return deleteProperty\n}","import { regularExpressions } from 'recourse'\nimport { ModelEvent, ValidatorEvent } from '../../../../events/index.js'\nexport default function deleteContentProperty($model, $options, $path) {\n  const { target, path, schema } = $model\n  const { mutatorEvents, pathkey, subpathError, enableValidation, validationEvents } = $options\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n    const propertyKey = subpaths.shift()\n    let propertyValue = target[propertyKey]\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.delete(subpaths.join('.'), $options)\n    }\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf()\n      delete differedPropertyProxy[propertyKey]\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, {}, $model.valueOf())\n      if(validationEvents) {\n        let type, propertyType\n        const validatorEventPath = (path)\n          ? [path, propertyKey].join('.')\n          : String(propertyKey)\n        if(validTargetProp.valid) {\n          type = 'validProperty'\n          propertyType = ['validProperty', propertyKey].join(':')\n        }\n        else {\n          type = 'nonvalidProperty'\n          propertyType = ['nonvalidProperty', propertyKey].join(':')\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent($eventType, Object.assign(validTargetProp, {\n              path: validatorEventPath\n            }), $model)\n          )\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if(propertyValue && typeof propertyValue === 'object') {\n      propertyValue.delete($options)\n    }\n    delete target[propertyKey]\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        )\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':')\n        const _path = [path, propertyKey].join('.')\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        )\n      }\n    }\n    return undefined\n  }\n  else if(pathkey === false) {\n    const propertyKey = $path\n    const propertyValue = target[propertyKey]\n\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf()\n      delete differedPropertyProxy[propertyKey]\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, $model.valueOf())\n      if(validationEvents) {\n        let type, propertyType\n        const validatorEventPath = (path)\n          ? [path, propertyKey].join('.')\n          : String(propertyKey)\n        if(validTargetProp.valid) {\n          type = 'validProperty'\n          propertyType = ['validProperty', propertyKey].join(':')\n        }\n        else {\n          type = 'nonvalidProperty'\n          propertyType = ['nonvalidProperty', propertyKey].join(':')\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent($eventType, validTargetProp, $model)\n          )\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n  \n    if(propertyValue instanceof $model.constructor) {\n      propertyValue.delete($options)\n    }\n    delete target[propertyKey]\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        )\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':')\n        const _path = [path, propertyKey].join('.')\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        )\n      }\n    }\n    return undefined\n  }\n}","import { ModelEvent } from '../../../../events/index.js'\nexport default function deleteContent($model, $options) {\n  const { target } = $model\n  for(const [$targetPropertyKey, $targetPropertyValue] of Object.entries(target)) {\n    $model.delete($targetPropertyKey, $options)\n  }\n  const { path } = $model\n  const { mutatorEvents } = $options\n  if(mutatorEvents && mutatorEvents['delete']) {\n    $model.dispatchEvent(\n      new ModelEvent('delete', {\n        path,\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    )\n  }\n  return $model\n}","import { recursiveAssign, recursiveFreeze } from 'recourse'\nimport ObjectProperty from './object/index.js'\nimport ArrayProperty from './array/index.js'\nimport MapProperty from './map/index.js'\nconst Defaults = Object.freeze({\n  object: [{\n    keys: ['valueOf'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function valueOf() { return $model.parse({ type: 'object' }) } }\n    },\n  }, {\n    keys: ['toString'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function toString($parseSettings = {}) {\n        const replacer = ($parseSettings.replacer !== undefined)\n          ? $parseSettings.replacer : null\n        const space = ($parseSettings.space !== undefined)\n          ? $parseSettings.space : 0\n        return $model.parse({ type: 'string', replacer, space })\n      } }\n    }, \n  }, {\n    keys: [\n      'entries', 'fromEntries', 'getOwnPropertyDescriptors', \n      'getOwnPropertyDescriptor', 'getOwnPropertyNames', \n      /* 'getOwnPropertySymbols', */ 'groupBy', 'hasOwn', 'is', \n      'getPrototypeOf', 'isExtensible', 'isFrozen', 'isSealed', \n      'keys', 'preventExtensions', 'values',\n    ],\n    methodDescriptor: function($methodName, $model) {\n      return { value: Object[$methodName].bind(null, $model.valueOf()) }\n    },\n  }, {\n    keys: ['propertyIsEnumerable', 'hasOwnProperty'], \n    methodDescriptor: function($methodName, $model) {\n      return { value: () => $model.parse({ type: 'object' })[$methodName] }\n    },\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ObjectProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ObjectProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  array: [{\n    keys: ['length'], \n    methodDescriptor: function($propertyName, $model, $options) {\n      return {\n        get() { return $model.target.length },\n        set($propertyValue) { $model.target.length = $propertyValue },\n      }\n    }\n  }, {\n    keys: [\n      'from', 'fromAsync', 'isArray', 'of', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array[$methodName] }\n    }, \n  }, {\n    keys: [\n      'at', 'every', 'filter', 'find', 'findIndex', 'findLast',\n      'findLastIndex', 'flat', 'flatMap', 'forEach', 'includes', \n      'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', \n      'slice', 'some', 'sort', 'toReversed',  'toSorted', 'toSpliced', \n      'with', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array.prototype[$methodName].bind(null, $model) }\n    }\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ArrayProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ArrayProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  map: [{\n    type: 'mutators',\n    keys: Object.keys(MapProperty),\n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: MapProperty[$methodName].bind(null, $model, $options) }\n    }\n  }]\n})\nexport default function Methods($model) {\n  iterateDefaultPropertyClasses: // Object, Array, Map\n  for(const [$propertyClassName, $propertyClasses] of Object.entries(Defaults)) {\n    iteratePropertyClasses: \n    for(const $propertyClass of $propertyClasses) {\n      const { keys, methodDescriptor, type } = $propertyClass\n      for(const $methodName of keys) {\n        if($propertyClassName === 'map' || type === 'mutators') {\n          const modelMethodOptions = structuredClone(\n            $model.options.methods[$propertyClassName][$methodName]\n          )\n          const methodOptions = Object.assign({}, $model.options, modelMethodOptions)\n          delete methodOptions.mutatorEvents\n          methodOptions.mutatorEvents = modelMethodOptions.mutatorEvents\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName, $model, methodOptions)\n          )\n        }\n        else {\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName,  $model)\n          )\n        }\n      }\n    }\n  }\n  return $model\n}\n","import { recursiveAssign, typedObjectLiteral } from 'recourse'\nconst ValidArrayAssigmentMethods = Object.freeze(\n  ['push', 'unshift']\n)\nconst ValidObjectAssigmentMethods = Object.freeze(\n  ['assign', 'defineProperties', 'set']\n)\n\nexport default function Assign($model, $properties, $options) {\n  const { type } = $model\n  const { assignObject, assignArray /*, autoload */ } = $options\n  if(type === 'array' && ValidArrayAssigmentMethods.includes(assignArray)) {\n    $model[assignArray](...$properties)\n  }\n  else if(type === 'object' && ValidObjectAssigmentMethods.includes(assignObject)) {\n    $model[assignObject]($properties)\n  }\n  return $model\n}","import Core from 'core-plex'\nimport { typedObjectLiteral, typeOf } from 'recourse'\nimport LocalStorage from './local-storage/index.js'\nimport Schema from '../schema/index.js'\nimport Options from './options/index.js'\nimport ModelEvent from './events/model/index.js'\nimport Methods from './methods/index.js'\nimport Assign from './assign/index.js'\n\nexport default class Model extends Core {\n  constructor($properties = {}, $schema = null, $options = {}) {\n    super({ propertyDirectory: { accessors: [($target, $property) => {\n      if($property === undefined) { return $target.target }\n      else { return $target.get($property) }\n    }] } })\n    if($properties instanceof Model) { $properties = $properties.valueOf() }\n    let parent = null\n    let path = null\n    try {\n      Object.defineProperty(this, 'mount', { value: function($mount) {\n        const mountParent = $mount.parent\n        const mountPath = $mount.path\n        const property = (mountPath) ? mountPath.split('.').pop() : mountPath\n        if(parent) { parent.unmount(property) }\n        parent = mountParent\n        path = mountPath\n      } })\n    }\n    catch($err) { console.error($err) }\n    try {\n      Object.defineProperty(this, 'unmount', { value: function($unmount) {\n        const unmountPath = $unmount.path\n        delete this[$property]\n      } })\n    }\n    catch($err) { console.error($err) }\n    Object.defineProperties(this, {\n      'options': { configurable: true, get() {\n        const options = Options($options)\n        if(options.events) {\n          this.addEvents(options.events)\n          delete options.events\n        }\n        if(options.enableEvents) {\n          const typeofEnableEvents = typeof options.enableEvents\n          if(typeofEnableEvents === 'boolean') { this.enableEvents() }\n          else if(typeofEnableEvents === 'object') { this.enableEvents(options.enableEvents) }\n        }\n        Object.defineProperty(this, 'options', { value: options })\n        return options\n      } },\n      'parent': { get() { return parent } },\n      'path': { get() { return path } },\n      'key': { get() { return (path) ? path.pop() : path } },\n      'target': { configurable: true, get() {\n        const target = typedObjectLiteral($properties)\n        Object.defineProperty(this, 'target', { value: target })\n        return target\n      } },\n      'type': { configurable: true, get() {\n        const type = typeOf(this.target)\n        Object.defineProperty(this, 'type', { value: type })\n        return type\n      } },\n      'schema': { configurable: true, get() {\n        const typeOfSchema = typeOf($schema)\n        let schema\n        if(['undefined', 'null'].includes(typeOfSchema)) { schema = null }\n        else if($schema instanceof Schema) { schema = $schema }\n        else if(['array', 'object'].includes(typeOfSchema)) { schema = new Schema($schema) }\n        Object.defineProperty(this, 'schema', { value: schema })\n        return schema\n      } },\n    })\n    this.mount({\n      parent: this.options.parent,\n      path: this.options.path\n    })\n    if(localStorage && this.options.localStorage) {\n      Object.defineProperties(this,  {\n        'localStorage': { configurable: true, get() {\n          let _localStorage\n          let path = [window.location.pathname]\n          if(this.path) { path.push(this.path) }\n          path = path.join('')\n          _localStorage = new LocalStorage(path)\n          Object.defineProperty(this, 'localStorage', { value: _localStorage })\n          return _localStorage\n        } },\n        'save': { value: function save() {\n          return this.localStorage.set(this.valueOf())\n        } },\n        'load': { value: function load() {\n          return this.localStorage.get()\n        } },\n        'unload': { value: function unload() {\n          return this.localStorage.remove()\n        } },\n      })\n    }\n    Methods(this)\n    if(this.options.autoload) {\n      Assign(this, this.load() || $properties, this.options)\n    }\n    else {\n      Assign(this, $properties, this.options)\n    }\n  }\n  retroReenableEvents() {\n    let model = this\n    while(model) {\n      model.reenableEvents({ enable: true })\n      model = model.parent\n    }\n    return this\n  }\n  parse($settings = { type: 'object', replacer: null, space: 0 }) {\n    let parsement = typedObjectLiteral(this.type)\n    for(const [\n      $propertyDescriptorName, $propertyDescriptor\n    ] of Object.entries(\n      Object.getOwnPropertyDescriptors(this.target))\n    ) {\n      let { enumerable, value, writable, configurable } = $propertyDescriptor\n      if(value instanceof Model) {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value: value.valueOf(), writable, configurable\n        })\n      }\n      else {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value, writable, configurable\n        })\n      }\n    }\n    let { type, replacer, space } = $settings\n    if(type === 'object') { return parsement }\n    else if(type === 'string') { return JSON.stringify(parsement, replacer, space) }\n    else { return undefined }\n  }\n}","import { recursiveAssign } from 'recourse'\nexport default ($options) => {\n  const Options = recursiveAssign({\n    autoload: false, \n    autosave: false, \n    localStorage: false, \n    path: null, \n    parent: null, \n    enableEvents: false,\n    enableValidation: true, \n    validationEvents: {\n      'validProperty:$key': true,\n      'validProperty': true,\n      'nonvalidProperty:$key': true,\n      'nonvalidProperty': true,\n    },\n    pathkey: true,\n    subpathError: false,\n    assignObject: 'set', \n    assignArray: 'set', \n    methods: {\n      map: {\n        get: {\n          mutatorEvents: {\n            'get': true,\n            'getProperty': true,\n            'getProperty:$key': true,\n          },\n        },\n        set: {\n          recursive: true,\n          mutatorEvents: {\n            'set': true,\n            'setProperty': true,\n            'setProperty:$key': true,\n          },\n        },\n        delete: {\n          mutatorEvents: {\n            'delete': true,\n            'deleteProperty': true,\n            'deleteProperty:$key': true,\n          },\n        },\n      },\n      array: {\n        concat: {\n          mutatorEvents: {\n            'concatElement:$index': true,\n            'concatElement': true,\n            'concat': true,\n          }\n        },\n        copyWithin: {\n          mutatorEvents: {\n            'copyWithinElement:$index': true,\n            'copyWithinElement': true,\n            'copyWithin': true,\n          }\n        },\n        fill: {\n          lengthen: true,\n          mutatorEvents: {\n            'fillElement:$index': true,\n            'fillElement': true,\n            'fill': true,\n          }\n        },\n        pop: {\n          mutatorEvents: { 'pop': true  },\n        },\n        push: {\n          mutatorEvents: {\n            'pushElement:$index': true,\n            'pushElement': true,\n            'push': true,\n          }\n        },\n        reverse: {\n          mutatorEvents: { 'reverse': true  },\n        },\n        shift: {\n          mutatorEvents: { 'shift': true  },\n        },\n        splice: {\n          mutatorEvents: {\n            'spliceDeleteElement:$index': true,\n            'spliceDeleteElement': true,\n            'spliceAddElement:$index': true,\n            'spliceAddElement': true,\n            'splice': true,\n          }\n        },\n        unshift: {\n          mutatorEvents: {\n            'unshiftElement:$index': true,\n            'unshiftElement': true,\n            'unshift': true,\n          }\n        },\n      },\n      object: {\n        assign: {\n          sourceTree: true,\n          mutatorEvents: {\n            'assignSourceProperty:$key': true,\n            'assignSourceProperty': true,\n            'assignSource': true,\n            'assign': true,\n          },\n        },\n        defineProperties: {\n          descriptorTree: true,\n          mutatorEvents: { 'defineProperties': true },\n        },\n        defineProperty: {\n          descriptorTree: true,\n          mutatorEvents: {\n            'defineProperty': true,\n            'defineProperty:$key': true,\n          },\n        },\n        freeze: {\n          recursive: true,\n          mutatorEvents: {\n            'freezeProperty': true,\n            'freeze': true,\n          },\n        },\n        seal: {\n          recursive: true,\n          mutatorEvents: {\n            'sealProperty': true,\n            'seal': true,\n          },\n        },\n      },\n    },\n  }, $options)\n  return Options\n}"],"names":["Primitives","string","String","number","Number","boolean","Boolean","bigint","BigInt","undefined","null","Object","values","Objects","object","array","Array","Types","assign","typeOf","$data","prototype","toString","call","slice","toLowerCase","Options$2","depth","maxDepth","accessors","default","$target","$property","propertyDirectory","$object","$options","_propertyDirectory","options","$accessor","bind","accessor","$key","$value","entries","push","subtargets","$subtargetKey","$subtarget","path","join","recursiveAssign","$sources","$source","$sourcePropertyKey","$sourcePropertyValue","typeOfTargetPropertyValue","typeOfSourcePropertyValue","handleNoCommaBraces","span","length","separatorI","i","rangeStart","substr","rangeEnd","expand","pattern","TypeError","scanning","openingBraces","closingBraces","handledUntil","results","alternatives","char","substring","j","newResults","k","l","unhandledFrom","negate","supportNegation","supportParens","isNegated","escapeRegExpChar","Pattern","source","excludeDot","separator","separatorSplitter","separatorMatcher","wildcard","str","result","escapeRegExpString","requiredSeparator","optionalSeparator","segments","split","support","qMark","star","globstar","brackets","extglobs","Segment","isFirst","isLast","end","EXCLUDE_DOT_PATTERN","add","state","addition","addToUnmatch","unmatch","addToMatch","dotHandled","match","convertSegment","segment","openingBracket","closingBracket","openingParens","closingParens","parensHandledUntil","extglobModifiers","scanningForParens","escapeChar","nextChar","State","modifier_1","pop","indexOf","Error","useUnmatch","convert","isMatch","regexp","sample","test","outmatch","isArray","arguments","regexpPattern","patterns","predicate","mappedValue","flatMap","positiveResults","negativeResults","negatedPattern","convertedPattern","compile","RegExp","flags","fn","EventDefinition","context","enable","nontranssigned","_targets","_assign","_deassign","_transsign","constructor","$settings","$context","this","settings","Settings","deassign","transsign","bindListener","errorLog","methods","addEventListener","$eventDefinition","type","listener","useCapture","on","once","removeEventListener","off","dispatchEvent","$event","emit","$type","$arguments","$settingKey","$settingValue","defineProperties","value","assigned","deassigned","transsigned","configurable","get","listenerTarget","iterateListenerPathKeys","$pathKey","defineProperty","$enable","targets","$targetElement","target","$err","console","error","pretargets","concat","pretargetElement","find","$pretarget","ptargets","targetPaths","scopeKey","targetElement","propertyPathMatcher","$propertyPath","$propertyValue","charAt","unshift","$targetPath","$targetValue","propertyDirectorySettings","Core","EventTarget","static","events","enableEvents","propertyDefinitions","getEvents","addEvents","removeEvents","disableEvents","reenableEvents","emitEvents","Settings$1","enumerable","writable","$filterEvents","$filterEvent","iterateEventFilterProperties","$filterEventPropertyKey","$filterEventPropertyValue","eventFilterMatch","$addEvents","$propEvents","$scopeKey","propEvents","$propEventSettings","$propEventListener","propEventSettings","trim","propEvent","expandEvents","$enableEvents","$addEvent","event","settingValue","eventDefinition","$events","eventsIndex","includes","splice","$eventParameters","super","implement","PrimitiveKeys","keys","PrimitiveValues","ObjectKeys","ObjectValues","TypeKeys","TypeValues","TypeMethods","index","freeze","__proto__","regularExpressions","typedObjectLiteral","_typedObjectLiteral","typeOfValue","$path","subpaths","key","subtarget","$subpath","impandTree","typeOfProperty","typeOfSource","$sourceKey","$sourceValue","Options$1","recursiveGetOwnPropertyDescriptor","$properties","$propertyKey","propertyDescriptor","getOwnPropertyDescriptor","recursiveGetOwnPropertyDescriptors","propertyDescriptors","getOwnPropertyDescriptors","Options","typeCoercion","recursiveDefineProperty","$propertyDescriptor","typeOfPropertyValue","propertyValue","isArrayLike","isInteger","iterateSourceKeys","isNaN","recursiveDefineProperties","$propertyDescriptors","LocalStorage","db","localStorage","JSON","parse","getItem","set","setItem","stringify","remove","removeItem","Verification","message","pass","messages","$pass","Messages","true","$validation","valid","false","report","$format","$prevalidation","prevalidation","schema","validations","advance","deadvance","unadvance","_report","verifications","$verification","validation","reportValue","iterateVerifications","Validation","$schema","verificationType","required","definition","$valid","Validator","$definition","validate","boundValidate","verification","RequiredValidator","requiredProperties","requiredPropertiesSize","corequiredProperties","corequiredPropertiesSize","hasOwn","coschema","Schema","parent","comodel","variables","TypeValidator","typeOfDefinitionValue","RangeValidator","min","max","validMin","validMax","LengthValidator","EnumValidator","MatchValidator","exec","strict","properties","root","iterateParents","$propertyDefinition","_isPropertyDefinition","propertyDefinition","isPropertyDefinition","$propertyValidatorName","$propertyValidator","isValidatorDefinition","_isValidatorDefinition","propertyValidator","subpropertyPath","validators","Map","validator","range","minLength","maxLength","enum","$validatorName","$validatorSettings","ValidatorClass","parseProperties","$sourceName","shift","parseValidateArguments","sourceProperties","sourcePropertyIndex","propertyValidation","validateProperty","parseValidatePropertyArguments","iteratePropertyDefinitionValidators","$validatorIndex","$validator","typeKey","valueKey","ModelEvent","CustomEvent","$model","model","change","detail","Change","_keyter","_preter","_anter","_conter","keyter","preter","anter","conter","$preter","valueOf","$anter","ObjectProperty","assignArray","enableValidation","mutatorEvents","sourceTree","validationEvents","assignedSources","assignChange","assignedSource","assignSourceChange","validObject","iterateSourceProperties","assignSourcePropertyChange","assignSourcePropertyKeyChange","validatorTarget","validatorSource","validSourceProperty","propertyType","$eventType","ValidatorEvent","sourceValue","subschema","modelPath","suboptions","assignment","subproperties","retroReenableEvents","modelEventPath","sources","validationReport","propertyDescriptorEntries","definePropertiesChange","descriptors","descriptorTree","targetPropertyValue","definePropertyChange","definePropertyKeyChange","targetPropertyValueIsModelInstance","validProperty","submodel","prop","descriptor","recursive","seal","ArrayProperty","valueIndex","targetConcat","from","iterateValues","validValue","$subvalue","copyWithin","copyTarget","start","copiedItems","copyIndex","targetIndex","copyItem","item","items","fill","assignObject","lengthen","filled","$start","$end","fillIndex","iterateFillIndexes","popElement","popElementIndex","elementIndex","element","$elements","elements","elementsIndex","$element","validElement","submodelOptions","reverse","reference","shiftElement","shiftElementIndex","$deleteCount","$addItems","addCount","deleteItems","deleteItemsIndex","deleteItem","deleteIndex","addItemsIndex","spliceAdd","addItem","validAddItem","startIndex","addIndex","deleted","added","MapProperty","getProperty","pathkey","subpathError","propertyKey","_path","getContentProperty","getContent","setProperty","validTargetProp","_propertyValue","setContentProperty","setContent","delete","deleteProperty","differedPropertyProxy","validatorEventPath","deleteContentProperty","$targetPropertyKey","$targetPropertyValue","deleteContent","Defaults","methodDescriptor","$methodName","$parseSettings","replacer","space","$propertyName","map","ValidArrayAssigmentMethods","ValidObjectAssigmentMethods","Assign","Model","$mount","mountParent","mountPath","property","unmount","$unmount","autoload","autosave","nonvalidProperty","concatElement","copyWithinElement","fillElement","pushElement","spliceDeleteElement","spliceAddElement","unshiftElement","assignSourceProperty","assignSource","freezeProperty","sealProperty","typeofEnableEvents","typeOfSchema","mount","_localStorage","window","location","pathname","save","load","unload","$propertyClassName","$propertyClasses","$propertyClass","modelMethodOptions","structuredClone","methodOptions","Methods","parsement","$propertyDescriptorName"],"mappings":"AAAA,MAAMA,EAAa,CACjBC,OAAUC,OACVC,OAAUC,OACVC,QAAWC,QACXC,OAAUC,OACVC,eAAaA,EACbC,KAAQ,MAEVC,OAAOC,OAAOZ,GACd,MAAMa,EAAU,CACdC,OAAUH,OACVI,MAASC,OAEXL,OAAOC,OAAOC,GACd,MAAMI,EAAQN,OAAOO,OAAO,CAAA,EAAIlB,EAAYa,GAC5CF,OAAOC,OAAOK,GAMd,IAAIE,EAAUC,GAAUT,OACrBU,UACAC,SACAC,KAAKH,GAAOI,MAAM,GAAG,GAAIC,cAS5B,MAAMC,EAAY,CAChBC,MAAO,EACPC,SAAU,GACVC,UAAW,CANG,CACdC,QALwB,CAACC,EAASC,SACjBvB,IAAduB,EAAkCD,EACvBA,EAAQC,IAQAF,UAExB,SAASG,EAAkBC,EAASC,GAClC,MAAMC,EAAqB,GACrBC,EAAU1B,OAAOO,OAAO,CAAA,EAAIQ,EAAWS,GAE7C,GADAE,EAAQV,QACLU,EAAQV,MAAQU,EAAQT,SAAY,OAAOQ,EAE9C,IAAI,MAAME,KAAaD,EAAQR,UAAW,CACxC,MACMf,EADWwB,EAAUC,KAAKL,EACjBM,CAASN,GACxB,GAAIpB,EACJ,IAAI,MAAO2B,EAAMC,KAAW/B,OAAOgC,QAAQ7B,GAGzC,GAFIuB,EAAQzB,OACJyB,EAAQzB,QAAUwB,EAAmBQ,KAAK,CAACH,EAAMC,IADnCN,EAAmBQ,KAAKH,GAG1B,iBAAXC,GACI,OAAXA,GACAA,IAAW5B,EACX,CACA,MAAM+B,EAAaZ,EAAkBS,EAAQL,GAC7C,GAAIA,EAAQzB,QAMP,GAAGyB,EAAQzB,OACd,IAAI,MAAOkC,EAAeC,KAAeF,EAAY,CACnD,MAAMG,EAAO,CAACP,EAAMK,GAAeG,KAAK,KACxCb,EAAmBQ,KAAK,CAACI,EAAMD,GAC3C,OATU,IAAI,MAAMA,KAAcF,EAAY,CAClC,MAAMG,EAAO,CAACP,EAAMM,GAAYE,KAAK,KACrCb,EAAmBQ,KAAKI,EACpC,CAQA,CAEA,CACE,OAAOZ,CACT,CAEA,SAASc,EAAgBnB,KAAYoB,GACnC,IAAIpB,EAAW,OAAOA,EAEtB,IAAI,MAAMqB,KAAWD,EACnB,GAAIC,EACJ,IAAI,MACFC,EAAoBC,KACjB3C,OAAOgC,QAAQS,GAAU,CAC5B,MAAMG,EAA4BpC,EAAOY,EAAQsB,IAC3CG,EAA4BrC,EAAOmC,GAKvCvB,EAAQsB,GAHsB,WAA9BE,GAC8B,WAA9BC,EAE8BN,EAAgBnB,EAAQsB,GAAqBC,GAG7CA,CAEtC,CAEE,OAAOvB,CACT,CA2CA,IAAIF,EAAY,CACdC,QALsB,CAACC,EAASC,SACfvB,IAAduB,EAAkCD,EACvBA,EAAQC,IAsCxB,SAASyB,EAAoBC,GACzB,GAAIA,EAAKC,OAAS,EACd,MAAO,IAAMD,EAAO,IAGxB,IADA,IAAIE,GAAe,EACVC,EAAI,EAAGA,EAAIH,EAAKC,OAAQE,IAC7B,GAAgB,MAAZH,EAAKG,IAA8B,MAAhBH,EAAKG,EAAI,KAAeA,EAAI,GAAqB,OAAhBH,EAAKG,EAAI,IAAc,CAC3E,GAAID,GAAa,EACb,MAAO,IAAMF,EAAO,IAExBE,EAAaC,EAAI,CAC7B,CAEI,GAAID,GAAa,EAAI,CACjB,IAAIE,EAAaJ,EAAKK,OAAO,EAAGH,GAC5BI,EAAWN,EAAKK,OAAOH,EAAa,GACxC,GAAIE,EAAWH,OAAS,GAAKK,EAASL,OAAS,EAC3C,MAAO,IAAMD,EAAKK,OAAO,EAAGH,GAAc,IAAMF,EAAKK,OAAOH,EAAa,GAAK,GAE1F,CACI,MAAO,IAAMF,EAAO,GACxB,CACA,SAASO,EAAOC,GACZ,GAAuB,iBAAZA,EACP,MAAM,IAAIC,UAAU,0CAA4CD,EAAU,UAS9E,IAPA,IAMIR,EANAU,GAAW,EACXC,EAAgB,EAChBC,EAAgB,EAChBC,GAAiB,EACjBC,EAAU,CAAC,IACXC,EAAe,GAEVZ,EAAI,EAAGA,EAAIK,EAAQP,OAAQE,IAAK,CACrC,IAAIa,EAAOR,EAAQL,GACnB,GAAa,OAATa,EAAJ,CAIA,GAAa,MAATA,EACA,GAAIN,EACAC,SAEC,GAAIR,EAAIU,IAAiBF,EAAe,CACzCX,EAAOQ,EAAQS,UAAUJ,EAAe,EAAGV,GAC3C,IAAK,IAAIe,EAAI,EAAGA,EAAIJ,EAAQb,OAAQiB,IAChCJ,EAAQI,IAAMlB,EAElBe,EAAe,GACfF,EAAeV,EACfO,GAAW,EACXC,GAChB,MAEgBA,SAGH,GAAa,MAATK,EACL,GAAIN,EACAE,SAEC,GAAsB,IAAlBA,EAAqB,CAE1B,GADAZ,EAAOQ,EAAQS,UAAUJ,EAAe,EAAGV,GACvCY,EAAad,OAAS,EAAG,CACzB,IAAIkB,EAAa,GACjBJ,EAAa7B,KAAKqB,EAAOP,IACzB,IAASkB,EAAI,EAAGA,EAAIJ,EAAQb,OAAQiB,IAChC,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAad,OAAQmB,IACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAaK,GAAGnB,OAAQoB,IACxCF,EAAWjC,KAAK4B,EAAQI,GAAKH,EAAaK,GAAGC,IAIzDP,EAAUK,CAC9B,KACqB,CACDnB,EAAOD,EAAoBC,GAC3B,IAASkB,EAAI,EAAGA,EAAIJ,EAAQb,OAAQiB,IAChCJ,EAAQI,IAAMlB,CAEtC,CACgBa,EAAeV,EACfS,GAChB,MAEgBA,SAGEF,GAAqB,MAATM,GAAgBJ,EAAgBD,GAAkB,IACpEX,EAAOQ,EAAQS,UAAUJ,EAAe,EAAGV,GAC3CY,EAAa7B,KAAKqB,EAAOP,IACzBa,EAAeV,IAEfO,GAAaE,IAAkBD,GAAiBR,IAAMK,EAAQP,OAAS,IACvES,GAAW,EACXP,EAAIU,EAAe,EAzD/B,MAFYV,GA6DZ,CACI,IAAqB,IAAjBU,EACA,MAAO,CAACL,GAEZ,IAAIc,EAA0C,MAA1Bd,EAAQK,GAAwBA,EAAeA,EAAe,EAClF,GAAIS,EAAgBd,EAAQP,OAAQ,CAChCD,EAAOQ,EAAQH,OAAOiB,GACtB,IAASJ,EAAI,EAAGA,EAAIJ,EAAQb,OAAQiB,IAChCJ,EAAQI,IAAMlB,CAE1B,CACI,OAAOc,CACX,CAEA,SAASS,EAAOf,EAAS7B,GACrB,IAGIwB,EAHAqB,GAAmC,IAAjB7C,EAAQ,KAC1B8C,GAAkC,IAAlB9C,EAAQ,MACxB+C,GAAY,EAEhB,GAAIF,EAAiB,CACjB,IAAKrB,EAAI,EAAGA,EAAIK,EAAQP,QAAyB,MAAfO,EAAQL,GAAYA,IAAK,CACvD,GAAIsB,GAAoC,MAAnBjB,EAAQL,EAAI,GAAY,CACzCA,IACA,KAChB,CACYuB,GAAaA,CACzB,CACYvB,EAAI,IACJK,EAAUA,EAAQH,OAAOF,GAErC,CACI,MAAO,CAAEK,QAASA,EAASkB,UAAWA,EAC1C,CAEA,SAASC,EAAiBX,GAAQ,MAAa,MAATA,GACzB,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,MAATA,GACS,OAATA,EACO,KAAOA,EAGPA,CACV,CASD,SAASY,EAAQC,EAAQlD,EAASmD,GAC9B,IAAIC,OAAyC,IAAtBpD,EAAQoD,WAAmCpD,EAAQoD,UACtEC,EAAoB,GACpBC,EAAmB,GACnBC,EAAW,KACG,IAAdH,GACAC,EAAoB,IACpBC,EAAmB,UACnBC,EAAW,YAOPA,EALCH,GAELE,EApBR,SAA4BE,GAExB,IADA,IAAIC,EAAS,GACJjC,EAAI,EAAGA,EAAIgC,EAAIlC,OAAQE,IAC5BiC,GAAUT,EAAiBQ,EAAIhC,IAEnC,OAAOiC,CACX,CAc2BC,CADnBL,EAAoBD,IAEC9B,OAAS,EAEf,QADXgC,EAAmB,MAAQA,EAAmB,KACP,MAG5B,KAAOA,EAAmB,IAI9B,IAEf,IAAIK,EAAoBP,EAAYE,EAAmB,KAAO,GAC1DM,EAAoBR,EAAYE,EAAmB,KAAO,GAC1DO,EAAWT,EAAYF,EAAOY,MAAMT,GAAqB,CAACH,GAS9D,MAAO,CACHA,OAAQA,EACRW,SAAUA,EACV7D,QAASA,EACToD,UAAWA,EACXC,kBAAmBA,EACnBC,iBAAkBA,EAClBM,kBAAmBA,EACnBD,kBAAmBA,EACnBJ,SAAUA,EACVQ,QAlBU,CACVC,OAAwB,IAAjBhE,EAAQ,KACfiE,MAAuB,IAAjBjE,EAAQ,KACdkE,SAAUd,IAA+B,IAAlBpD,EAAQ,MAC/BmE,UAA4B,IAAlBnE,EAAQ,MAClBoE,UAA4B,IAAlBpE,EAAQ,MAClBmD,WAAYA,IAAqC,IAAvBnD,EAAQmD,YAc1C,CACA,SAASkB,EAAQnB,EAAQrB,EAASyC,EAASC,GAAU,MAAO,CACxDrB,OAAQA,EACRoB,QAASA,EACTC,OAAQA,EACRC,IAAKtB,EAAO5B,OAAS,EACvB,CA2BF,IAAImD,EAAsB,UAC1B,SAASC,EAAIC,EAAOC,EAAUzB,GAW1B,OAVIwB,EAAME,eACNF,EAAMlB,OAAOqB,SAAWF,GAExBD,EAAMI,aACF5B,IAAewB,EAAMK,aACrBJ,EAAWH,EAAsBG,GAErCD,EAAMK,YAAa,EACnBL,EAAMlB,OAAOwB,OAASL,GAEnBD,EAAMlB,MACjB,CACA,SAASyB,EAAerD,EAASsD,EAAS1B,GACtC,IAAIM,EAAUlC,EAAQkC,QAClBY,EApCR,SAAe9C,EAASsD,EAAS1B,GAAU,MAAO,CAC9C5B,QAASA,EACTsD,QAASA,EACT1B,OAAQA,EACR2B,eAAgBD,EAAQX,IAAM,EAC9Ba,gBAAkB,EAClBC,cAAe,EACfC,cAAe,EACfC,oBAAsB,EACtBC,iBAAkB,GAClBC,mBAAmB,EACnBC,YAAY,EACZZ,YAAY,EACZF,aAAchD,EAAQkC,QAAQK,SAC9BY,YAAY,EACZxD,GAAK,EACLa,KAAM,GACNuD,SAAU,GACZ,CAkBcC,CAAMhE,EAASsD,EAAS1B,GAChCH,EAAmB6B,EAAQZ,OACzB1C,EAAQ+B,kBACR/B,EAAQ8B,kBAId,GAHKI,EAAQZ,aACTwB,EAAMK,YAAa,QAEnBG,EAAQX,IACR,OAAOW,EAAQZ,SAAWY,EAAQb,QAAUb,EAASiB,EAAIC,EAAOrB,GAEpE,GAAIS,EAAQG,UAA+B,OAAnBiB,EAAQjC,OAG5B,OAAOwB,EAAIC,EAAO,QAFJA,EAAMK,WAAmC,GAAtBP,GACF5C,EAAQ0B,SAAW,KAAOD,GACb,OAEhD,OAASqB,EAAMnD,GAAK2D,EAAQX,KAAK,CAG7B,GAFAG,EAAMtC,KAAOsC,EAAMQ,QAAQjC,OAAOyB,EAAMnD,GACxCmD,EAAMiB,SAAWjB,EAAMnD,EAAI2D,EAAQX,IAAMW,EAAQjC,OAAOyB,EAAMnD,EAAI,GAAK,GACpD,OAAfmD,EAAMtC,KAAe,CACrB,GAAIsC,EAAMnD,EAAImD,EAAMQ,QAAQX,IAAK,CAC7BG,EAAMgB,YAAa,EACnB,QAChB,CAEgBhB,EAAMtC,KAAO,EAE7B,CACYR,EAAU8C,EAAM9C,QAASsD,EAAUR,EAAMQ,QAA7C,IAAsD9C,EAAOsC,EAAMtC,KAAMb,EAAImD,EAAMnD,EACnF,GAAIK,EAAQkC,QAAQI,WAAaQ,EAAMe,kBAAmB,CACtD,GAAIlE,EAAImD,EAAMS,gBAAkB5D,GAAKmD,EAAMU,eAAgB,CACnDV,EAAMgB,WACNjB,EAAIC,EAAO3B,EAAiBX,IAEvBb,IAAMmD,EAAMU,gBACjBX,EAAIC,EAAO,KACXA,EAAMS,eAAiBD,EAAQjC,OAAO5B,QAExB,MAATe,GAAgBb,IAAMmD,EAAMU,eAAiB,EAClDX,EAAIC,EAAO,OAEG,MAATtC,GAAgBb,IAAMmD,EAAMS,eAAiB,EAClDV,EAAIC,EAAO,KAGXD,EAAIC,EADU,MAATtC,EACM,MAGAA,GAEfsC,EAAMgB,YAAa,EACnB,QAChB,CACY,GAAInE,EAAImD,EAAMS,eAAgB,CACb,MAAT/C,IACCsC,EAAMgB,YACPnE,EAAImD,EAAMS,eAAiB,GAC3B5D,EAAImD,EAAMU,gBACVV,EAAMU,eAAiB7D,EACvBmD,EAAMnD,EAAImD,EAAMS,eACZvD,EAAQuB,UACRsB,EAAIC,EAAO,MAAQ9C,EAAQyB,iBAAmB,MAAM,GAGpDoB,EAAIC,EAAO,KAAK,IAGfnD,IAAM2D,EAAQX,MACnBE,EAAIC,EAAO,OACXA,EAAMnD,EAAImD,EAAMS,eAChBT,EAAMS,eAAiBD,EAAQjC,OAAO5B,OACtCqD,EAAMU,eAAiBF,EAAQjC,OAAO5B,QAE1CqD,EAAMgB,YAAa,EACnB,QAChB,CACY,GAAa,MAATtD,IACCsC,EAAMgB,YACPnE,EAAImD,EAAMU,gBACV7D,EAAI2D,EAAQX,IAAK,CACjBG,EAAMS,eAAiB5D,EACvBmD,EAAMgB,YAAa,EACnB,QAChB,CACA,CACQ,GAAIhB,EAAM9C,QAAQkC,QAAQK,SAAU,CAChC,IAAIqB,EAAmBd,EAAMc,iBAAqCG,GAAnBvD,EAAOsC,EAAMtC,KAAiBsC,EAAMiB,UAAUpE,EAAImD,EAAMnD,EACvG,GAAiB,MAAboE,GACCjB,EAAMgB,YACG,MAATtD,GAAyB,MAATA,GAAyB,MAATA,GAAyB,MAATA,GAAyB,MAATA,GA4BhE,GAAa,MAATA,GAAiBsC,EAAMgB,YAiB3B,GAAa,MAATtD,GAAgBsC,EAAMY,gBAC1BZ,EAAMe,oBACNf,EAAMgB,WAAY,CACnBjB,EAAIC,EAAO,KACX,QAChB,OArBgB,GAAIA,EAAMe,kBACNf,EAAMY,qBAEL,GAAIE,EAAiBnE,OAAQ,CAC9B,IAAIwE,EAAaL,EAAiBM,MAClC,GAAmB,MAAfD,QAAsBL,EAAiBO,QAAQ,KAC/C,MAAM,IAAIC,MAAM,4CAGpBvB,EAAIC,EAAO,KADXmB,EAA4B,MAAfA,GAAqC,MAAfA,EAAqB,GAAKA,IAE7DnB,EAAMI,YAAa,EACnBJ,EAAME,cAAe,EACrBF,EAAMY,gBACN,QACpB,OA1CgB,GAAIZ,EAAMe,kBACNf,EAAMW,qBAEL,GAAI9D,EAAImD,EAAMa,qBAAuBb,EAAMY,cAC5CZ,EAAMa,mBAAqBhE,EAC3BmD,EAAMe,mBAAoB,EAC1Bf,EAAMW,oBAEL,IAAIX,EAAMY,eAAiBZ,EAAMW,cAAe,CACpC,MAATjD,IACAsC,EAAMI,YAAa,EACnBJ,EAAME,cAAe,EACrBH,EAAIC,EAAOA,EAAM9C,QAAQ0B,SAAW,MAAM,GAC1CoB,EAAMI,YAAa,EACnBJ,EAAME,cAAe,EACrBF,EAAMlB,OAAOyC,YAAa,GAE9BT,EAAiBlF,KAAK8B,GACtBqC,EAAIC,EAAO,OAAO,GAClBA,EAAMW,gBACNX,EAAMnD,IACN,QACpB,CAEoBmD,EAAMW,eAC1B,CAyBY,GAAIX,EAAMe,kBAAmB,CACrBf,EAAMY,gBAAkBZ,EAAMW,eAAiB9D,IAAMmD,EAAMQ,QAAQX,MACnEG,EAAMe,mBAAoB,EAC1Bf,EAAMnD,EAAImD,EAAMa,mBAAqB,GAEzCb,EAAMgB,YAAa,EACnB,QAChB,CACA,CAEY5B,GADAlC,EAAU8C,EAAM9C,SACEkC,SACjBY,EAAMgB,YAAc5B,EAAQE,MAAuB,MAAfU,EAAMtC,KACvCsC,EAAMnD,IAAMmD,EAAMQ,QAAQX,KAA0B,MAAnBG,EAAMiB,UACvClB,EAAIC,EAAO9C,EAAQ0B,SAAW,MAAM,IAGlCoB,EAAMgB,YAAc5B,EAAQC,OAAwB,MAAfW,EAAMtC,KACjDqC,EAAIC,EAAO9C,EAAQ0B,UAAU,GAG7BmB,EAAIC,EAAO3B,EAAiB2B,EAAMtC,OAEtCsC,EAAMgB,YAAa,CAC3B,CACI,OAAOjB,EAAIC,EAAOrB,EACtB,CACA,SAAS6C,EAAQjD,EAAQlD,EAASmD,GAI9B,IAHA,IAAItB,EAAUoB,EAAQC,EAAQlD,EAASmD,GACnCM,EAhND,CACHwB,MAAO,GACPH,QAAS,GACToB,YAAY,GA8MRrC,EAAWhC,EAAQgC,SACdrC,EAAI,EAAGA,EAAIqC,EAASvC,OAAQE,IAAK,CAEtC0D,EAAerD,EADDwC,EAAQR,EAASrC,GAAIK,EAAe,IAANL,EAASA,IAAMqC,EAASvC,OAAS,GAC5CmC,EACzC,CACI,OAAIA,EAAOyC,WACA,OAASzC,EAAOqB,QAAU,KAAOrB,EAAOwB,MAGxCxB,EAAOwB,KAEtB,CA4CA,SAASmB,EAAQC,EAAQC,GAAU,GAAsB,iBAAXA,EAC1C,MAAM,IAAIxE,UAAU,uCAAyCwE,EAAS,UACxE,OAAOD,EAAOE,KAAKD,EAAQ,CAgB7B,SAASE,EAAS3E,EAAS7B,GACvB,GAAuB,iBAAZ6B,IAAyBlD,MAAM8H,QAAQ5E,GAC9C,MAAM,IAAIC,UAAU,0FAA4FD,EAAU,UAK9H,GAHuB,iBAAZ7B,GAA2C,kBAAZA,IACtCA,EAAU,CAAEoD,UAAWpD,IAEF,IAArB0G,UAAUpF,aACW,IAAZtB,IACe,iBAAZA,GAAoC,OAAZA,GAAqBrB,MAAM8H,QAAQzG,IACvE,MAAM,IAAI8B,UAAU,2FAA6F9B,EAAU,UAG/H,GAA0B,QAD1BA,EAAUA,GAAW,CAAE,GACXoD,UACR,MAAM,IAAI6C,MAAM,+BAEpB,IAAIU,EAlER,SAAiBC,EAAU5G,GACvB4G,EAAWjI,MAAM8H,QAAQG,GAAYA,EAAW,CAACA,IAC3B,IAAlB5G,EAAQ,QACR4G,EAbR,SAAiBlI,EAAOmI,GAEpB,IADA,IAAI1E,EAAU,GACLX,EAAI,EAAGA,EAAI9C,EAAM4C,OAAQE,IAE9B,IADA,IAAIsF,EAAcD,EAAUnI,EAAM8C,IACzBe,EAAI,EAAGA,EAAIuE,EAAYxF,OAAQiB,IACpCJ,EAAQ5B,KAAKuG,EAAYvE,IAGjC,OAAOJ,CACX,CAImB4E,CAAQH,EAAUhF,IAKjC,IAHA,IAAIoF,EAAkB,GAClBC,EAAkB,GAClBxD,EAAS,GACJjC,EAAI,EAAGA,EAAIoF,EAAStF,OAAQE,IAAK,CACtC,IAAI0F,EAAiBtE,EAAOgE,EAASpF,GAAIxB,GACrCmH,EAAmBhB,EAAQe,EAAerF,QAAS7B,GAAUkH,EAAenE,WAC5EmE,EAAenE,UACfkE,EAAgB1G,KAAK4G,GAGrBH,EAAgBzG,KAAK4G,EAEjC,CAaI,OAZIF,EAAgB3F,SAChBmC,EAAS,SAAWwD,EAAgBrG,KAAK,KAAO,OAEhDoG,EAAgB1F,OAAS,EACzBmC,GAAU,MAAQuD,EAAgBpG,KAAK,KAAO,IAEd,IAA3BoG,EAAgB1F,OACrBmC,GAAUuD,EAAgB,GAErBvD,EAAOnC,SACZmC,GAAU0C,EAAQ,KAAMnG,GAAS,IAE9B,IAAMyD,EAAS,GAC1B,CAmCwB2D,CAAQvF,EAAS7B,GACjCqG,EAAS,IAAIgB,OAAOV,EAAe3G,EAAQsH,OAC3CC,EAAKnB,EAAQlG,KAAK,KAAMmG,GAI5B,OAHAkB,EAAGvH,QAAUA,EACbuH,EAAG1F,QAAUA,EACb0F,EAAGlB,OAASA,EACLkB,CACX,CA2DA,MAAMC,EACJC,GACAC,IAAU,EACVC,GAAkB,GAClBC,GAAY,GACZC,GACAC,GACAC,GACA,WAAAC,CAAYC,EAAWC,GACrB,IAAID,IAAcC,EAAY,OAAOC,KACrC,MAAMC,EAnEK,EAACH,EAAY,MAC1B,MAAMI,EAAW,CACfX,QAAQ,EACR7I,OAAQ,mBAAoByJ,SAAU,sBAAuBC,UAAW,gBACxEC,cAAc,EACdC,UAAU,EACVC,QAAS,CACP7J,OAAQ,CACN8J,iBAAkB,SAA0BC,EAAkBlJ,GAC5D,MAAMmJ,KAAEA,EAAIC,SAAEA,EAAQV,SAAEA,GAAaQ,GAC/B5I,QAAEA,EAAO+I,WAAEA,GAAeX,EAChC,OAAO1I,EAA0B,iBAAEmJ,EAAMC,EAAU9I,GAAW+I,EAC/D,EACDC,GAAI,SAAYJ,EAAkBlJ,GAChC,MAAMmJ,KAAEA,EAAIC,SAAEA,GAAaF,EAC3B,OAAOlJ,EAAY,GAAEmJ,EAAMC,EAC5B,EACDG,KAAM,SAAcL,EAAkBlJ,GACpC,MAAMmJ,KAAEA,EAAIC,SAAEA,GAAaF,EAC3B,OAAOlJ,EAAc,KAAEmJ,EAAMC,EAC9B,GAEHR,SAAU,CACRY,oBAAqB,SAA6BN,EAAkBlJ,GAClE,MAAMmJ,KAAEA,EAAIC,SAAEA,EAAQV,SAAEA,GAAaQ,GAC/B5I,QAAEA,EAAO+I,WAAEA,GAAeX,EAChC,OAAO1I,EAA6B,oBAAEmJ,EAAMC,EAAU9I,GAAW+I,EAClE,EACDI,IAAK,SAAaP,EAAkBlJ,GAClC,MAAMmJ,KAAEA,EAAIC,SAAEA,GAAaF,EAC3B,OAAOlJ,EAAa,IAAEmJ,EAAMC,EAC7B,GAEHP,UAAW,CACTa,cAAe,SAAuBR,EAAkBlJ,EAAS2J,GAC/D,OAAO3J,EAAuB,cAAE2J,EACjC,EACDC,KAAM,SAAcV,EAAkBlJ,EAAS6J,KAAUC,GACvD,OAAO9J,EAAc,KAAE6J,KAAUC,EAClC,KAIP,IAAI,MAAOC,EAAaC,KAAkBpL,OAAOgC,QAAQ2H,GACvD,OAAOwB,GACL,IAAK,UACHpB,EAASoB,GAAe5I,EAAgBwH,EAASoB,GAAcC,GAC/D,MACF,IAAK,eAAgB,MACrB,QACErB,EAASoB,GAAeC,EAI9B,OAAOrB,GAaYA,CAASJ,GAI1B3J,OAAOqL,iBAAiBxB,KAAM,CAC5BC,SAAY,CAAEwB,MAAOxB,GACrBzH,KAAQ,CAAEiJ,MAAOxB,EAASzH,MAC1BkI,KAAQ,CAAEe,MAAOxB,EAASS,MAC1BgB,SAAY,CAAED,MAPC,IAQfE,WAAc,CAAEF,MAPC,IAQjBG,YAAe,CAAEH,MAPC,IAQlBd,SAAa,CAAEkB,cAAc,EAAM,GAAAC,GAEjC,IAAInB,EACJ,GAAsB,WAFChK,EAAOsJ,EAASU,UAEP,CAC9B,IAAIoB,EAAiBhC,EACrBiC,EACA,IAAI,MAAMC,KAAYhC,EAASU,SAAShF,MAAM,KAAM,CAElD,QAAa1F,IADC8L,EAAeE,GAEtB,MAAMD,EADaD,EAAiBA,EAAeE,EAEtE,CACwC,aAA3BtL,EAAOoL,KACRpB,EAAWoB,EAEvB,MACepB,EAAWV,EAASU,SAK3B,OAJ6B,IAA1BV,EAASI,eACVM,EAAWA,EAAS5I,KAAKiI,MAAKV,IAEhCnJ,OAAO+L,eAAelC,KAAM,WAAY,CAAEyB,MAAOd,IAC1CA,CACR,KAEHX,MAAKV,EAAWS,EAChBC,KAAKT,OAASS,KAAKC,SAASV,MAChC,CACE,UAAIA,GAAW,OAAOS,MAAKT,CAAO,CAClC,UAAIA,CAAO4C,GACT,MAAMC,EAAUpC,MAAKoC,EACfV,EAAW1B,KAAK0B,SAChBC,EAAa3B,KAAK2B,WACxBD,EAASvI,OAAS,EAClBwI,EAAWxI,OAAS,EAEpB,IAAI,MAAMkJ,KAAkBD,EAAS,CACnC,MAAM5J,KAAEA,EAAI8J,OAAEA,EAAM/C,OAAEA,GAAW8C,EAEjC,GADArC,KAAKC,SACFV,IAAW4C,EACd,IAAe,IAAZA,EACD,IACEnC,MAAKtJ,EAAQ4L,GACbD,EAAe9C,OAAS4C,EACxBT,EAAStJ,KAAKiK,EAExB,CACQ,MAAME,GAAWvC,KAAKC,SAASK,UAAYkC,QAAQC,MAAMF,EAAQ,MAE9D,IAAe,IAAZJ,EACN,IACEnC,MAAKG,EAAUmC,GACfD,EAAe9C,OAAS4C,EACxBR,EAAWvJ,KAAKiK,EAC1B,CACQ,MAAME,GAAWvC,KAAKC,SAASK,UAAYkC,QAAQC,MAAMF,EAAQ,CAEzE,CACIvC,MAAKT,EAAU4C,CACnB,CACE,KAAIG,GAAY,OAAOtC,KAAKC,SAASqC,MAAM,CAC3C,KAAIF,GACF,MAAMM,EAAa1C,MAAKP,EAClB2C,EAAU,GAChB,GAAGpC,MAAKsC,EACN,IAAI,MAAM/K,IAAW,GAAGoL,OAAO3C,MAAKsC,GAAU,CAC5C,MAAMM,EAAmBF,EAAWG,MACjCC,GAAeA,GAAYtK,OAASwH,KAAKxH,YAEpBvC,IAArB2M,EACDR,EAAQhK,KAAKwK,QAEc3M,IAArB2M,GAAiCG,SAAS3K,KAAK,CACnDI,KAAMwH,KAAKxH,KACX8J,OAAQ/K,EACRgI,QAAQ,GAGpB,MAES,GAAyB,WAAtB5I,EAAOqJ,KAAKxH,MAAoB,CACtC,MAAMwK,EAAc,GACpB,GAAGhD,KAAKxH,OAASwH,MAAKiD,EAAW,CAC/B,MAAMC,EAAgB,CACpB1K,KAAMwH,KAAKxH,KACX8J,OAAQtC,MAAKV,EACbC,QAAQ,GAEV6C,EAAQhK,KAAK8K,EACrB,KACW,CACH,GAAGlD,KAAKC,SAASxI,kBAAmB,CAClC,MAAMA,EAAoBuI,MAAKvI,EACzB0L,EAAsB9E,EAAS2B,KAAKxH,KAAM,CAC9CyC,UAAW,MAEb,IAAI,MAAOmI,EAAeC,KAAmB5L,EAAmB,EAErC,IADC0L,EAAoBC,IACbJ,EAAY5K,KAAK,CAACgL,EAAeC,GAC9E,CACqC,MAAxBrD,KAAKxH,KAAK8K,OAAO,IAClBN,EAAYO,QAAQvD,MAAKiD,EAErC,MAEUD,EAAY5K,KAAK4H,KAAKxH,MAExB,IAAI,MAAOgL,EAAaC,KAAiBT,EAAa,CACpD,MAAMJ,EAAmBF,EAAWG,MACjCC,GAAeA,EAAWtK,OAASgL,IAEtC,IACIN,EADAZ,EAASmB,OAECxN,IAAXqM,IACEA,IAAWM,GAAkBN,OAC9BY,EAAgBN,EAEQ,iBAAXN,IACbY,EAAgB,CACd1K,KAAMgL,EACNlB,OAAQA,EACR/C,QAAQ,UAIOtJ,IAAlBiN,GAA+Bd,EAAQhK,KAAK8K,EACzD,CACA,CACA,CAEI,OADAlD,MAAKP,EAAY2C,EACVpC,MAAKP,CAChB,CACE,KAAIwD,GAAc,OAAOjD,KAAKC,SAASxI,kBAAkBwL,QAAQ,CACjE,KAAIvM,GACF,YAAqBT,IAAlB+J,MAAKN,IACRM,MAAKN,EAAWM,KAAKC,SAASM,QAAQ7J,OAAOsJ,KAAKC,SAASvJ,QAAQqB,KAAK,KAAMiI,OADrCA,MAAKN,CAGlD,CACE,KAAIS,GACF,YAAuBlK,IAApB+J,MAAKL,IACRK,MAAKL,EAAaK,KAAKC,SAASM,QAAQJ,SAASH,KAAKC,SAASE,UAAUpI,KAAK,KAAMiI,OADzCA,MAAKL,CAGpD,CACE,KAAIS,GACF,YAAwBnK,IAArB+J,MAAKJ,IACRI,MAAKJ,EAAcI,KAAKC,SAASM,QAAQH,UAAUJ,KAAKC,SAASG,WAAWrI,KAAK,KAAMiI,OAD3CA,MAAKJ,CAGrD,CACE,KAAInI,GACF,IAAIuI,KAAKC,SAASxI,kBAAqB,OAAO,KAC9C,MAAMiM,EAA4BvN,OAAOO,OAAOsJ,KAAKC,SAASxI,kBAAmB,CAAErB,QAAQ,IAC3F,OAAOqB,EAAkBuI,MAAKV,EAAUoE,EAC5C,CACE,IAAAvC,GACE,MAAMiB,EAAUpC,MAAKoC,EACfR,EAAc5B,KAAK4B,YACnBpC,EAAiBQ,MAAKR,EAC5BoC,EAAYzI,OAAS,EACrBqG,EAAerG,OAAS,EACxB,IAAI,MAAMkJ,KAAkBD,EAAS,CACnC,MAAME,OAAEA,GAAWD,EACnB,IACErC,MAAKI,EAAWkC,KAAW/D,WAC3BqD,EAAYxJ,KAAKiK,EACzB,CACM,MAAME,GAAQ/C,EAAepH,KAAKiK,EAAgB,CACxD,CACI,OAAOrC,IACX,EAGA,MAAM2D,UAAaC,YACjBC,iBAAmB,SAAUtM,EAASuI,GACpC,IAAIvI,IAAYuI,EAAa,OAC7B,MAAMG,EApyBO,EAACH,EAAY,MAC5B,MAAMI,EAAW,CACf4D,OAAQ,CAAE,EACVC,cAAc,EACdtM,kBAAmB,CACjBJ,UAAW,CAACA,EAAUC,SACtB2L,SAAU,SACV7L,SAAU,IAEZ4M,oBAAqB,CACnBC,UAAW,YACXC,UAAW,YACXC,aAAc,eACdJ,aAAc,eACdK,cAAe,gBACfC,eAAgB,iBAChBC,WAAY,eAGhB,IAAI,MAAOhD,EAAaC,KAAkBpL,OAAOgC,QAAQ2H,GACvD,OAAOwB,GACL,IAAK,sBACL,IAAK,oBACHpB,EAASoB,GAAenL,OAAOO,OAAOwJ,EAASoB,GAAcC,GAC7D,MACF,QACErB,EAASoB,GAAeC,EAI9B,OAAOrB,GAswBYqE,CAAWzE,GACtBgE,EAAS,GAoHf,OAnHA3N,OAAOqL,iBAAiBjK,EAAS,CAC/B,CAAC0I,EAAS+D,oBAAoBC,WAAY,CACxCO,YAAY,EAAOC,UAAU,EAC7BhD,MAAO,WACL,IAAIlD,UAAU,GAAM,OAAOuF,EAC3B,MAAMG,EAAY,GACZS,EAAgB,GAAG/B,OAAOpE,UAAU,IAC1C,IAAI,MAAMoG,KAAgBD,EACxB,IAAI,MAAMxD,KAAU4C,EAAQ,CAC1B,IAAIhH,EACJ8H,EACA,IAAI,MACFC,EAAyBC,KACtB3O,OAAOgC,QAAQwM,GAAe,CACjC,IAAII,EAWJ,GATEA,EAD6B,aAA5BF,EAEC3D,EAAOjB,SAAS4E,KAA6BC,EAK7C5D,EAAO2D,KAA6BC,GAG3B,IAAVhI,EACI,MAAM8H,EADS9H,EAAQiI,CAE9C,EAC2B,IAAVjI,GAAkBmH,EAAU7L,KAAK8I,EAClD,CAEU,OAAO+C,CACjB,GAEM,CAAChE,EAAS+D,oBAAoBE,WAAY,CACxCM,YAAY,EAAOC,UAAU,EAC7BhD,MAAO,WACL,IAAIlD,UAAUpF,OAAU,OAAO5B,EAC/B,IAAIyN,EAx3Bd,SAAsBC,EAAaC,EAAY,UAC7C,GACE1O,MAAM8H,QAAQ2G,SACEhP,IAAhBgP,EACE,OAAOA,EACX,MAAME,EAAa,GACnB,IAAI,MACFC,EAAoBC,KACjBlP,OAAOgC,QAAQ8M,GAAc,CAChC,MAAMK,EAAoBF,EAAmBG,OAAO5J,MAAM,KAC1D,IAAInD,EAAMkI,EAAMC,EACgB,IAA7B2E,EAAkBnM,QACnBX,EAAO0M,EACPxE,EAAO4E,EAAkB,IAEnBA,EAAkBnM,OAAS,IACjCX,EAAO8M,EAAkB,GACzB5E,EAAO4E,EAAkB,IAExB9O,MAAM8H,QAAQ+G,IACf1E,EAAW0E,EAAmB,GAC9BA,EAAmB,IAGnB1E,EAAW0E,EAEb,MAAMG,EAAY,CAChB9E,OACAlI,OACAmI,WACApB,QAAQ,GAEV4F,EAAW/M,KAAKoN,EACpB,CACE,OAAOL,CACT,CAq1B2BM,CAAalH,UAAU,GAAI0B,EAASxI,kBAAkBwL,UACnEyC,EAAgBnH,UAAU,KAAM,EACpC,IAAI,IAAIoH,KAAaX,EAAY,CAC/B,MAAMY,EAAQ,CAAE,EAChB,IAAI,MAAMtE,IAAe,CACvB,SAAU,WAAY,YAAa,oBAAqB,gBACvD,CACD,MAAMuE,EAAe5F,EAASqB,QACVrL,IAAjB4P,IAA8BD,EAAMtE,GAAeuE,EACpE,CACYnN,EAAgBkN,EAAOD,GACvB,MAAMG,EAAkB,IAAIzG,EAAgBuG,EAAOrO,GAChDmO,IAAiBI,EAAgBvG,QAAS,GAC7CuE,EAAO1L,KAAK0N,EACxB,CACU,OAAOvO,CACR,GAEH,CAAC0I,EAAS+D,oBAAoBG,cAAe,CAC3CK,YAAY,EAAOC,UAAU,EAC7BhD,MAAO,WACL,MAAMsE,EAAUxO,EAAQ0I,EAAS+D,oBAAoBC,WAAW1F,UAAU,IAC1E,GAAsB,IAAnBwH,EAAQ5M,OAAc,OAAO5B,EAChC,IAAIyO,EAAclC,EAAO3K,OAAS,EAClC,KAAM6M,GAAc,GAAI,CACtB,MAAMJ,EAAQ9B,EAAOkC,GAClBD,EAAQE,SAASL,KAClBA,EAAMrG,QAAS,EACfuE,EAAOoC,OAAOF,EAAa,IAE7BA,GACZ,CACU,OAAOzO,CACjB,GAEM,CAAC0I,EAAS+D,oBAAoBD,cAAe,CAC3CS,YAAY,EAAOC,UAAU,EAC7BhD,MAAO,WACL,MAAMsE,EAAUxO,EAAQ0I,EAAS+D,oBAAoBC,WAAW1F,UAAU,IAC1E,GAAsB,IAAnBwH,EAAQ5M,OAAc,OAAO5B,EAChC,IAAI,MAAM2J,KAAU6E,EAAW7E,EAAO3B,QAAS,EAC/C,OAAOhI,CACR,GAEH,CAAC0I,EAAS+D,oBAAoBI,eAAgB,CAC5CI,YAAY,EAAOC,UAAU,EAC7BhD,MAAO,WACL,MAAMsE,EAAUxO,EAAQ0I,EAAS+D,oBAAoBC,WAAW1F,UAAU,IAC1E,GAAsB,IAAnBwH,EAAQ5M,OAAc,OAAO5B,EAChC,IAAI,MAAM2J,KAAU6E,EAAW7E,EAAO3B,QAAS,EAC/C,OAAOhI,CACR,GAEH,CAAC0I,EAAS+D,oBAAoBK,gBAAiB,CAC7CG,YAAY,EAAOC,UAAU,EAC7BhD,MAAO,WACL,MAAMsE,EAAUxO,EAAQ0I,EAAS+D,oBAAoBC,WAAW1F,UAAU,IAC1E,IAAI,MAAM2C,KAAU6E,EAClB7E,EAAO3B,QAAS,EAChB2B,EAAO3B,QAAS,EAElB,OAAOhI,CACR,GAEH,CAAC0I,EAAS+D,oBAAoBM,YAAa,CACzCE,YAAY,EAAOC,UAAU,EAC7BhD,MAAO,SAAoBiD,KAAkByB,GAC3C,MAAMJ,EAAUxO,EAAQ0I,EAAS+D,oBAAoBC,WAAWS,GAChE,IAAI,MAAMxD,KAAU6E,EAClB7E,EAAOC,QAAQgF,GAEjB,OAAO5O,CACR,KAGF0I,EAAS6D,QAAUvM,EAAQ0I,EAAS+D,oBAAoBE,WAAWjE,EAAS6D,SAClD,IAA1B7D,EAAS8D,cAAyBxM,EAAQ0I,EAAS+D,oBAAoBD,gBACnExM,CACX,EACE,WAAAsI,CAAYC,EAAY,IAEtB,OADAsG,QACOzC,EAAK0C,UAAUrG,KAAMF,EAChC,EC7iCA,MAAMtK,EAAa,CACjBC,OAAUC,OACVC,OAAUC,OACVC,QAAWC,QACXC,OAAUC,OACVC,eAAaA,EACbC,KAAQ,MAEJoQ,EAAgBnQ,OAAOoQ,KAAK/Q,GAC5BgR,EAAkBrQ,OAAOC,OAAOZ,GAChCa,EAAU,CACdC,OAAUH,OACVI,MAASC,OAELiQ,EAAatQ,OAAOoQ,KAAKlQ,GACzBqQ,EAAevQ,OAAOC,OAAOC,GAC7BI,EAAQN,OAAOO,OAAO,CAAA,EAAIlB,EAAYa,GACtCsQ,EAAWxQ,OAAOoQ,KAAK9P,GACvBmQ,EAAazQ,OAAOC,OAAOK,GAC3BoQ,EAAc,CACnBrR,EAAWE,OAAQF,EAAWI,OAAQJ,EAAWM,QACjDO,EAAQF,OAAQE,EAAQG,OAGzB,IAAIsQ,EAAqB3Q,OAAO4Q,OAAO,CACrCC,UAAW,KACXP,WAAYA,EACZC,aAAcA,EACdrQ,QAASA,EACTiQ,cAAeA,EACfE,gBAAiBA,EACjBhR,WAAYA,EACZmR,SAAUA,EACVE,YAAaA,EACbD,WAAYA,EACZnQ,MAAOA,IAGLwQ,EACe,gCAGftQ,EAAUC,GAAUT,OACrBU,UACAC,SACAC,KAAKH,GAAOI,MAAM,GAAG,GAAIC,cA2B5B,SAASiQ,EAAmBhP,GAC1B,IAAIiP,EACJ,MAAMC,EAAczQ,EAAOuB,GAC3B,GAAmB,WAAhBkP,EAA0B,CAC3B,MAAM3F,EAAQvJ,EAAOjB,cACR,WAAVwK,EAAsB0F,EAAsB,CAAA,EAC7B,UAAV1F,IAAqB0F,EAAsB,GACvD,KAEuB,WAAhBC,EAA4BD,EAAsB,CAAA,EAC7B,UAAhBC,IAA2BD,EAAsB,IAE3D,OAAOA,CACT,CAEA,SAASrF,EAAIuF,EAAOzO,GAClB,MAAM0O,EAAWD,EAAM1L,MAAM,IAAIuD,OAAO+H,IAClCM,EAAMD,EAAS1J,MACrB,IAAI4J,EAAY5O,EAChB,IAAI,MAAM6O,KAAYH,EAAYE,EAAYA,EAAUC,GACxD,OAAOD,EAAUD,EACnB,CAuCA,SAASG,EAAW9O,EAASpB,GAC3B,MAAMmQ,EAAiBhR,EAAOa,GACxBoQ,EAAejR,EAAOiC,GAC5B,IACG,CAAC,SAAU,YAAYqN,SAAS0B,KAChC,CAAC,QAAS,UAAU1B,SAAS2B,GAC5B,OAAOhP,EACX,IAAI0J,EAAS4E,EAAmBtO,GAChC,IAAI,MAAOiP,EAAYC,KAAiB3R,OAAOgC,QAAQS,GAC/B,WAAnB+O,EAA+BrF,EAAOuF,GAAc/F,EAAItK,EAAWsQ,GAC3C,aAAnBH,IAAiCrF,EAAOuF,GAAcrQ,EAAUsQ,IACrExF,EAAOuF,IAA6C,iBAAvBvF,EAAOuF,KACrCvF,EAAOuF,GAAcH,EAAWpF,EAAOuF,GAAarQ,IAGxD,OAAO8K,CACT,CAwEA,SAAS5J,EAAgBnB,KAAYoB,GACnC,IAAIpB,EAAW,OAAOA,EAEtB,IAAI,MAAMqB,KAAWD,EACnB,GAAIC,EACJ,IAAI,MACFC,EAAoBC,KACjB3C,OAAOgC,QAAQS,GAAU,CAC5B,MAAMG,EAA4BpC,EAAOY,EAAQsB,IAC3CG,EAA4BrC,EAAOmC,GAKvCvB,EAAQsB,GAHsB,WAA9BE,GAC8B,WAA9BC,EAE8BN,EAAgBnB,EAAQsB,GAAqBC,GAG7CA,CAEtC,CAEE,OAAOvB,CACT,CAgCA,IAAIwQ,EAAY,CAAErH,MAAM,GAExB,SAASsH,EAAkCC,EAAaC,EAAcvQ,GACpE,MAAME,EAAU1B,OAAOO,OAAO,CAAA,EAAIqR,EAAWpQ,GACvCwQ,EAAqBhS,OAAOiS,yBAAyBH,EAAaC,GAKxE,OAJGrQ,EAAQ6I,OAAQyH,EAAmBzH,KAAO/J,EAAOwR,EAAmB1G,QACpE,CAAC,QAAS,UAAUwE,SAAStP,EAAOwR,EAAmB1G,UACxD0G,EAAmB1G,MAAQ4G,EAAmCF,EAAmB1G,MAAO5J,IAEnFsQ,CACT,CAEA,SAASE,EAAmCJ,EAAatQ,GACvD,MAAME,EAAU1B,OAAOO,OAAO,CAAA,EAAIqR,EAAWpQ,GACvC2Q,EAAsB,CAAE,EAC9B,IAAI,MAAMJ,KAAgB/R,OAAOoQ,KAAKpQ,OAAOoS,0BAA0BN,IACrEK,EAAoBJ,GAAgBF,EAAkCC,EAAaC,EAAcrQ,GAEnG,OAAOyQ,CACT,CAEA,IAAIE,EAAU,CAAEC,cAAc,GAE9B,SAASC,EAAwBnR,EAAS2Q,EAAcS,EAAqBhR,GAC3E,MAAME,EAAU1B,OAAOO,OAAO,CAAA,EAAI8R,EAAS7Q,GACrCiR,EAAsBjS,EAAOgS,EAAoBlH,OACvD,GAAG,CAAC,QAAS,UAAUwE,SAAS2C,GAAsB,CACpD,MAAMC,EAvJQ,CAACjQ,IACjB,IAAIkQ,EACJ,MAAMlB,EAAejR,EAAOiC,GAC5B,GAAoB,UAAjBgP,EAA4BkB,GAAc,OACxC,GACc,WAAjBlB,GACAhS,OAAOmT,UAAUnQ,EAAQO,SAAWP,EAAQO,QAAU,GAEtD6P,EACA,IAAI,MAAMnB,KAAc1R,OAAOoQ,KAC7BpQ,OAAOoS,0BAA0B3P,IAEjC,GAAkB,WAAfiP,IACHiB,GAAeG,MAAMpB,IACjBiB,GAAe,MAAME,OAGtBF,GAAc,EACrB,OAAOA,GAqIiBA,CAAY3S,OAAOqL,iBACvC0F,EAAmB0B,GAAsBD,EAAoBlH,QAC1D,GAAK,CAAE,EACZkH,EAAoBlH,MAAQyH,EAA0BL,EAAeF,EAAoBlH,MAAO5J,EACpG,MAEIA,EAAQ4Q,mBACyDxS,IAAjEE,OAAOiS,yBAAyBO,EAAqB,UACpD,CAAC,YAAa,QAAQ1C,SAAS2C,KAEhCD,EAAoBlH,MAAQjM,EAAWmT,EAAoBjI,MAAMe,QAGnE,OADAtL,OAAO+L,eAAe3K,EAAS2Q,EAAcS,GACtCpR,CACT,CAEA,SAAS2R,EAA0B3R,EAAS4R,EAAsBxR,GAChE,MAAME,EAAU1B,OAAOO,OAAO,CAAA,EAAI8R,EAAS7Q,GAC3C,IAAI,MACFuQ,EAAcS,KACXxS,OAAOgC,QAAQgR,GAClBT,EAAwBnR,EAAS2Q,EAAcS,EAAqB9Q,GAEtE,OAAON,CACT,CCpUe,MAAM6R,UAAqBxF,YACxCyF,GAAMC,aACN9Q,GACA,WAAAqH,CAAYwH,GACVjB,QACApG,KAAKxH,KAAO6O,CAChB,CACE,QAAI7O,GAAS,OAAOwH,MAAKxH,CAAK,CAC9B,QAAIA,CAAK6O,QACWpR,IAAf+J,MAAKxH,IACRwH,MAAKxH,EAAQ6O,EACjB,CACE,GAAAvF,GACE,IAAK,OAAOoH,EACVK,KAAKC,MAAMxJ,MAAKqJ,EAAII,QAAQzJ,KAAKxH,OAClC,CACD,MAAM+J,GAAQC,QAAQC,MAAMF,EAAK,CACrC,CACE,GAAAmH,CAAI9S,GACF,IAAM,OAAOoJ,MAAKqJ,EAAIM,QAAQ3J,KAAKxH,KAAM+Q,KAAKK,UAC5CvB,EAAmCzR,IACnC,CACF,MAAM2L,GAAQC,QAAQC,MAAMF,EAAK,CACrC,CACE,MAAAsH,GACE,IAAM,OAAO7J,MAAKqJ,EAAIS,WAAW9J,KAAKxH,KAAK,CAC3C,MAAM+J,GAAQC,QAAQC,MAAMF,EAAK,CACrC,EC5Be,MAAMwH,UAAqBnG,YACxC,WAAA/D,CAAYC,GACVsG,QACA,MAAMnG,EAAW9J,OAAOO,OAAO,CAAE,EAAEoJ,GACnC3J,OAAOqL,iBAAiBxB,KAAM,CAC5BU,KAAQ,CAAEe,MAAOxB,EAASS,MAC1B6G,IAAO,CAAE9F,MAAOxB,EAASsH,KACzB9F,MAAS,CAAEA,MAAOxB,EAASwB,OAC3BuI,QAAW,CAAEnI,cAAc,EAAM,GAAAC,GAC/B,IAAIkI,EAKJ,YAJiB/T,IAAd+J,KAAKiK,OACND,EAAU/J,EAASiK,SAASxU,OAAOsK,KAAKiK,OAAOjK,MAC/C7J,OAAO+L,eAAelC,KAAM,UAAW,CAAEyB,MAAOuI,KAE3CA,CACf,GACMC,KAAQ,CAAExF,UAAU,EAClB,QAAIwF,CAAKE,GACPhU,OAAO+L,eAAelC,KAAM,OAAQ,CAAEyB,MAAO0I,GAC9C,IAGT,ECpBA,MAAMC,EAAW,CACfC,KAASC,GAAgB,GAAGA,EAAYC,QACxCC,MAAUF,GAAgB,GAAGA,EAAYC,SAE3C,SAASE,EAAOC,EAAU,SAAUC,GAClC,MAAMC,EAAgBD,GAAkB3K,KAClC6K,EAASD,EAAcC,OACvBC,EAAc,GAAGnI,OACrBiI,EAAcG,QAASH,EAAcI,UAAWJ,EAAcK,WAEhE,GAAe,WAAZP,EAAsB,CACvB,MAAMQ,EAAUhE,EAAmB2D,EAAOnK,MAE1C,IAAI,MAAM4J,KAAeQ,EAAa,CACpC,MAAMK,EAAgB,GAAGxI,OACvB2H,EAAYS,QAAST,EAAYU,UAAWV,EAAYW,WAE1DC,EAAQZ,EAAY/C,KAAO,CAAA,EAE3B,IAAI,MAAM6D,KAAiBD,EACzBD,EAAQZ,EAAY/C,KAAK6D,EAAc1K,MAAQ,CAAA,EAC5C0K,EAAcC,WACfH,EAAQZ,EAAY/C,KAAK6D,EAAc1K,MAAQV,KAAKyK,OAAOC,EAASU,EAAcC,YAGlFH,EAAQZ,EAAY/C,KAAK6D,EAAc1K,MAAQ0K,CAGzD,CACI,OAAOF,CACX,CACE,GAAe,WAAZR,EAAsB,CACvB,IAA2B,IAAxBE,EAAcL,MAAmB,OAAO,EAC3C,MAAMW,EAAUhE,EAAmB2D,EAAOnK,MAE1C,IAAI,MAAM4J,KAAeQ,EAAa,CACpC,MAAMK,EAAgB,GAAGxI,OACvB2H,EAAYS,QAAST,EAAYU,UAAWV,EAAYW,WAE1D,IAAIK,EACJC,EACA,IAAI,MAAMH,KAAiBD,EACzB,GAA0B,SAAvBC,EAAc1K,KAAiB,CAC7B0K,EAAcC,YAAcf,EAAYC,QACzCe,EAActL,KAAKyK,OAAOC,EAASU,EAAcC,aAEnD,MAAME,CAChB,CAEUD,IAAeA,EAAchB,EAAYC,OAC7CW,EAAQZ,EAAY/C,KAAO+D,CACjC,CACI,OAAOJ,CACX,CACA,CACe,MAAMM,UAAmB5H,YACtC,WAAA/D,CAAYC,EAAY,CAAE,EAAE2L,GAC1BrF,QACA,MAAMnG,EAAW9J,OAAOO,OAAO,CAAEwT,SAAUE,GAAYtK,GAKvD3J,OAAOqL,iBAAiBxB,KAAM,CAC5B6K,OAAU,CAAEpJ,MAAOgK,GACnBC,iBAAoB,CAAEjK,MAAOxB,EAASyL,kBACtCC,SAAY,CAAElK,MAAOxB,EAAS0L,UAC9BC,WAAc,CAAEnK,MAAOxB,EAAS2L,YAChCrE,IAAO,CAAE9F,MAAOxB,EAASsH,KACzB9F,MAAS,CAAEA,MAAOxB,EAASwB,OAC3BsJ,QAAW,CAAEtJ,MAVC,IAWduJ,UAAa,CAAEvJ,MAVC,IAWhBwJ,UAAa,CAAExJ,MAVC,IAWhB8I,MAAS,CACP9F,UAAU,EACV,SAAI8F,GAAwB,EAC5B,SAAIA,CAAMsB,GAAU1V,OAAO+L,eAAelC,KAAM,QAAS,CAAEyB,MAAOoK,GAAS,GAE7EpB,OAAU,CAAE5I,cAAc,EAAM,GAAAC,GAC9B,MAAMoJ,EAAUT,EAAO1S,KAAKiI,MAE5B,OADA7J,OAAO+L,eAAelC,KAAM,SAAU,CAAEyB,MAAOyJ,IACxCA,CACf,IAEA,ECnFA,MAAMd,EAAW,CACfC,KAASe,GAAkB,GAAGA,EAAcnB,OAC5CO,MAAUY,GAAkB,GAAGA,EAAcnB,QAEhC,MAAM6B,UAAkBlI,YACrC,WAAA/D,CAAYkM,EAAc,CAAE,EAAEN,GAC5BrF,QACA,MAAMwF,EAAazV,OAAO4Q,OACxB5Q,OAAOO,OAAO,CAAEwT,SAAUE,GAAY2B,IAExC5V,OAAOqL,iBAAiBxB,KAAM,CAC5B4L,WAAc,CAAEnK,MAAOmK,GACvBf,OAAU,CAAEpJ,MAAOgK,GACnB/K,KAAQ,CAAEe,MAAOmK,EAAWlL,MAC5BwJ,SAAY,CAAEzI,MAAOmK,EAAW1B,UAChC8B,SAAY,CAAEnK,cAAc,EAAM,GAAAC,GAiBhC,MAAMmK,EAhBN,SAAkBhU,EAAMC,EAAQU,EAASrB,GACvC,MAAMqU,WAAEA,EAAU1B,SAAEA,EAAQxJ,KAAEA,GAASV,KACvC,IAAIkM,EAAe,IAAInC,EAAa,CAClCrJ,KAAMA,EACN6G,IAAKtP,EACLwJ,MAAOmK,EAAWnK,MAClByI,SAAUxR,EAAgB,CAAA,EAAIwR,EAAU0B,EAAW1B,YAErD,MAAMmB,EAAaO,EAAWI,YAAYzN,WAM1C,MALyB,iBAAf8M,GACRa,EAAab,WAAaA,EAC1Ba,EAAajC,KAAOoB,EAAWd,OAE1B2B,EAAajC,KAAOoB,EACpBa,CACjB,EACuCnU,KAAKiI,MAIpC,OAHA7J,OAAO+L,eAAelC,KAAM,WAAY,CACtCyB,MAAOwK,IAEFA,CACf,IAEA,ECvCe,MAAME,UAA0BL,EAC7C,WAAAjM,CAAYkM,EAAaN,GACvBrF,MAAMjQ,OAAOO,OAAO,CAAA,EAAIqV,EAAa,CACnCrL,KAAM,WACNsL,SAAU,CAAC/T,EAAMC,EAAQU,EAASrB,KAChC,MAAM6U,mBAAEA,EAAkBC,uBAAEA,EAAsB3L,KAAEA,GAAS+K,EACvDa,EAAuBnW,OAAOO,OAAO,CAAE,EAAE0V,GAC/C,IAGInC,EAHAsC,EAA2BF,EAI/B,GAHmBlW,OAAOO,OAAOwQ,EAAmBxG,GAAO9H,EAASrB,GACjDyI,KAAK4L,WAEpBS,GAMF,GAJGlW,OAAOqW,OAAOF,EAAsBrU,YAC9BqU,EAAqBrU,GAC5BsU,KAECA,EAA0B,CAC3B,MAAME,EAAW,IAAIC,GAAOJ,EAAsB,CAChD9T,KAAMiT,EAAQjT,KACdmU,OAAQlB,EAAQkB,SAEZC,EAAUzW,OAAOO,OAAO,CAAE,EAAEa,EAASqB,GAE3CqR,EADqBwC,EAAST,SAASY,GACnBrC,KAChC,OAdsCN,GAAO,EAgBrC,OAAOA,KAEPwB,EACR,EC/BA,MAAMhF,WAAEA,EAAUE,SAAEA,IAAakG,EAElB,MAAMC,WAAsBhB,EACzC,WAAAjM,CAAYkM,EAAc,CAAE,EAAEN,GAC5BrF,MAAMjQ,OAAOO,OAAO,CAAA,EAAIqV,EAAa,CACnCrL,KAAM,OACNsL,SAAU,CAAC/T,EAAMC,EAAQU,EAASrB,KAChC,IAAI0S,EACJ,MAAM2B,EAAa5L,KAAK4L,WACxB,IAAImB,EAAwBpW,EAAOiV,EAAWnK,OAU9C,GAREsL,EAD2B,aAA1BA,EACuBpW,EAAOiV,EAAWnK,SAEpCmK,EAAWnK,iBAAiBiL,GACVd,EAAWnK,MAAMf,KAGjB/J,EAAOiV,EAAWnK,OAEzCkF,GAASV,SAAS8G,GAAwB,CAC3C,MAAM3F,EAAczQ,EAAOuB,GAC3B,GAAmB,cAAhBkP,EAA+B6C,GAAO,OACpC,GAA6B,cAA1B8C,EAAyC9C,GAAO,OACnD,GAAG2B,EAAWnK,iBAAiBiL,GAAQ,CAE1CzC,EADmB2B,EAAWnK,MAAMuK,SAAS9T,EAAQU,EAEjE,MACiBqR,EAAQ8C,IAA0B3F,CACnD,MACe6C,GAAO,EACd,OAAOA,KAEPwB,EACR,EClCe,MAAMuB,WAAuBlB,EAC1C,WAAAjM,CAAYkM,EAAc,CAAE,EAAEN,GAC5BrF,MAAMjQ,OAAOO,OAAOqV,EAAa,CAC/BrL,KAAM,QACNsL,SAAU,CAAC/T,EAAMC,KACf,MAAM0T,EAAa5L,KAAK4L,WACxB,IAAI3B,EACJ,GAAqB,iBAAX/R,EAAuB+R,GAAO,MACnC,CACH,MAAMgD,IAAEA,EAAGC,IAAEA,GAAQtB,EACrB,IAAIuB,EAAUC,EACUD,OAAblX,IAARgX,GAAiC/U,GAAU+U,EAAIxL,MAE1B2L,OAAbnX,IAARiX,GAAiChV,GAAUgV,EAAIzL,MAEvBwI,KAAxBkD,IAAYC,EAEzB,CACQ,OAAOnD,KAEPwB,EACR,ECrBe,MAAM4B,WAAwBvB,EAC3C,WAAAjM,CAAYkM,EAAc,CAAE,EAAEN,GAC5BrF,MAAMjQ,OAAOO,OAAOqV,EAAa,CAC/BrL,KAAM,SACNsL,SAAU,CAAC/T,EAAMC,KACf,MAAM0T,EAAa5L,KAAK4L,WACxB,IAAI3B,EACJ,GAAqB,iBAAX/R,EAAuB+R,GAAO,MACnC,CACH,MAAMgD,IAAEA,EAAGC,IAAEA,GAAQtB,EACrB,IAAIuB,EAAUC,EAEZD,OADSlX,IAARgX,GACW/U,EAAOiB,QAAU8T,EAAIxL,MAIjC2L,OADSnX,IAARiX,GACWhV,EAAOiB,QAAU+T,EAAIzL,MAGRwI,KAAxBkD,IAAYC,EAEzB,CACQ,OAAOnD,KAEPwB,EACR,ECzBe,MAAM6B,WAAsBxB,EACzC,WAAAjM,CAAYkM,EAAc,CAAE,EAAEN,GAC5BrF,MAAMjQ,OAAOO,OAAOqV,EAAa,CAC/BrL,KAAM,OACNsL,SAAU,CAAC/T,EAAMC,KACf,MAAM0T,EAAa5L,KAAK4L,WACxB,IAAI3B,EACJ,GAAI,CACF,SAAU,SAAU,WACpBhE,gBAAgB/N,GACb,CAEH+R,EADoB2B,EAAWnK,MACZwE,SAAS/N,EACtC,MAJqC+R,GAAO,EAKpC,OAAOA,KAEPwB,EACR,ECjBe,MAAM8B,WAAuBzB,EAC1C,WAAAjM,CAAYC,EAAY,CAAE,EAAE2L,GAC1BrF,MAAMjQ,OAAOO,OAAOoJ,EAAW,CAC7BY,KAAM,QACNsL,SAAU,CAAC/T,EAAMC,KACf,MAAM0T,EAAa5L,KAAKC,SACxB,IAAIgK,EACJ,GAAI,CACF,SAAU,SAAU,WACpBhE,gBAAgB/N,GACb,CACW0T,EACYnK,MAAM+L,KAAKtV,EAC/C,MAJqC+R,GAAO,EAKpC,QAAOA,CAAc,IAErBwB,EACR,ECjBA,IAAA1D,GAAe,IAAIpQ,IAAaxB,OAAOO,OAAO,CAC5CiV,UAAU,EACVD,iBAAkB,MAElB+B,QAAQ,EACRC,WAAY,CACVhN,KAAM,OACNe,MAAO,aAEL9J,GCDN,MAAM+U,WAAe9I,YACnB,WAAA/D,CAAYoI,EAAc,GAAItQ,EAAW,CAAA,GACvCyO,QACAjQ,OAAOqL,iBAAiBxB,KAAM,CAC5BnI,QAAW,CAAE4J,MAAO+G,GAAQ7Q,IAC5B+I,KAAQ,CAAEe,MAAO9K,EAAOsR,IACxB0E,OAAU,CAAE9K,cAAc,EAAM,GAAAC,GAC9B,MAAMjK,QAAEA,GAAYmI,KACd2M,EAAU9U,EAAc,OAAIA,EAAQ8U,OAAS,KAEnD,OADAxW,OAAO+L,eAAelC,KAAM,SAAU,CAAEyB,MAAOkL,IACxCA,CACf,GACMgB,KAAQ,CAAE9L,cAAc,EAAM,GAAAC,GAC5B,IAAI6L,EAAO3N,KACX4N,EACA,KAAMD,IACD,MAAC1X,EAAW,MAAMgQ,SAAS0H,EAAKhB,SACnCgB,EAAOA,EAAKhB,OAEd,OAAOgB,CACf,GACMpG,IAAO,CAAE1F,cAAc,EAAM,GAAAC,GAC3B,MAAMtJ,KAAEA,GAASwH,KACXuH,EAAM,EAAS/O,EAAKmD,MAAM,KAAKiC,MAAQ,KAE7C,OADAzH,OAAO+L,eAAelC,KAAM,MAAO,CAAEyB,MAAO8F,IACrCA,CACf,GACM/O,KAAQ,CAAEqJ,cAAc,EAAM,GAAAC,GAC5B,MAAMjK,QAAEA,GAAYmI,KACdxH,EAAQX,EAAY,KACtBnC,OAAOmC,EAAQW,MACf,KAEJ,OADArC,OAAO+L,eAAelC,KAAM,OAAQ,CAAEyB,MAAOjJ,IACtCA,CACf,GACMmT,SAAY,CAAE9J,cAAc,EAAM,GAAAC,GAChC,MAAM6J,EAAW3L,KAAKnI,QAAQ8T,SAE9B,OADAxV,OAAO+L,eAAelC,KAAM,WAAY,CAAEyB,MAAOkK,IAC1CA,CACf,GACMS,mBAAsB,CAAEvK,cAAc,EAAM,GAAAC,GAC1C,MAAMsK,EAAqBlF,EAAmBlH,KAAKU,MAEnD,IAAI,MAAOwH,EAAc2F,KAAwB1X,OAAOgC,QAAQ6H,KAAKsC,SACxB,IAAxCuL,EAAoBlC,UAAUlK,QAC/B2K,EAAmBlE,GAAgB2F,GAIvC,OADA1X,OAAO+L,eAAelC,KAAM,qBAAsB,CAAEyB,MAAOtL,OAAO4Q,OAAOqF,KAClEA,CACf,GACMC,uBAA0B,CAAExK,cAAc,EAAM,GAAAC,GAC9C,MAAMuK,EAAyBlW,OAAOoQ,KAAKvG,KAAKoM,oBAAoBjT,OAEpE,OADAhD,OAAO+L,eAAelC,KAAM,yBAA0B,CAAEyB,MAAO4K,IACxDA,CACf,GACMX,iBAAoB,CAAE7J,cAAc,EAAM,GAAAC,GACxC,MAAM4J,EAAmB1L,KAAKnI,QAAQ6T,iBAEtC,OADAvV,OAAO+L,eAAelC,KAAM,mBAAoB,CAAEyB,MAAOiK,IAClDA,CACf,GACMpJ,OAAU,CAAET,cAAc,EAAM,GAAAC,GAC9B,IAAI4L,EACJ,MAAMhN,EAAOV,KAAKU,KACN,UAATA,EAAoBgN,EAAazF,EAAYjR,MAAM,EAAG,GACxC,WAAT0J,IAAqBgN,EAAazF,GAC1C,MAAM3F,EAiGd,SAAyB2F,EAAawD,GACpC,MAAMiC,EAAaxG,EAAmBe,GACtC,GAAG6F,GAAsB7F,EAAawD,GAAY,OAAOxD,EAEzD,IAAI,MACFC,EAAc7E,KACXlN,OAAOgC,QAAQ8P,GAAc,CAChC,IAAI8F,EAAqB,CAAA,EACGpX,EAAO0M,GACnC,MAAM2K,EAAuBF,GAAsBzK,EAAgBoI,GACnE,GAAGoB,EAAUjG,WAAWX,SAAS5C,GAC/BlN,OAAOO,OAAOqX,EAAoB,CAAErN,KAAM,CAAEe,MAAO4B,UAEhD,GAAGwJ,EAAUlG,SAASV,SAAS5C,GAClClN,OAAOO,OAAOqX,EAAoB,CAAErN,KAAM,CAAEe,MAAOoL,EAAUpW,MAAM4M,WAEhE,GAAI2K,GASJ,GAAGA,EACN,IAAI,MAAOC,EAAwBC,KAAuB/X,OAAOgC,QAAQkL,GAAiB,CACxF,MAAM8K,EAAwBC,GAAuBF,EAAoBzC,GACzE,GAAI0C,EAqBIA,IACNJ,EAAmBE,GAA0BC,OAtBpB,CACzB,IAAIG,EACJ,GAA8B,SAA3BJ,EACD,GAAGC,GAAoD,iBAAvBA,EAAiC,CAC/D,MAAMI,EAAmB7C,EAAY,KAAI,CAACA,EAAQjT,KAAM0P,GAAczP,KAAK,KAAOyP,EAClFmG,EAAoB,IAAI3B,GAAOwB,EAAoB/X,OAAOO,OAAO,CAAE,EAAE+U,EAAQ5T,QAAS,CACpF8U,OAAQlB,EACRjT,KAAM8V,IAEtB,MAEcD,EAAoBH,OAItBG,EAAoBH,EAEtBH,EAAmBE,GAA0B,CAC3CvN,KAAMuN,EAAwBxM,MAAO4M,EAEjD,CAIA,MApCmC,CAC7B,MAAMC,EAAmB7C,EAAY,KAAI,CAACA,EAAQjT,KAAM0P,GAAczP,KAAK,KAAOyP,EAClF/R,OAAOO,OAAOqX,EAAoB,CAChCrN,KAAM,CAAEA,KAAM,OAAQe,MAAO,IAAIiL,GAAOrJ,EAAgBlN,OAAOO,OAAO,GAAI+U,EAAQ5T,QAAS,CACzF8U,OAAQlB,EACRjT,KAAM8V,OAGhB,CA8BIP,EAAmBQ,WAAa,GAChCb,EAAWxF,GAAgB6F,EAC3B,MAAMQ,EAAa,IAAIC,IACvBD,EAAW7E,IAAI,OAAQvT,OAAOO,OAAO,CAAA,EAAI,CACvCgK,KAAM,OAAQ+N,UAAW3B,GAAerL,MAAOsM,EAAmBrN,KAAKe,SAEzE8M,EAAW7E,IAAI,WAAYvT,OAAOO,OAAO,CAAA,EAAI,CAC3CgK,KAAM,WAAY+N,UAAWtC,EAAmB1K,MAAOsM,EAAmBpC,UAAUlK,QAAS,KAE5FsM,EAAmBW,MAASH,EAAW7E,IAAI,QAASvT,OAAOO,OAAO,GAAIqX,EAAmBW,MAAO,CACjGhO,KAAM,QAAS+N,UAAWzB,OAEpBe,EAAmBd,KAAOc,EAAmBb,MAAOqB,EAAW7E,IAAI,QAASvT,OAAOO,OAAO,CAAA,EAAI,CACpGgK,KAAM,QAASuM,IAAKc,EAAmBd,IAAKC,IAAKa,EAAmBb,IAAKuB,UAAWzB,MAEnFe,EAAmB5U,OAAUoV,EAAW7E,IAAI,SAAUvT,OAAOO,OAAO,GAAIqX,EAAmB5U,OAAQ,CACpGuH,KAAM,SAAU+N,UAAWpB,OAErBU,EAAmBY,WAAaZ,EAAmBa,YAAaL,EAAW7E,IAAI,SAAUvT,OAAOO,OAAO,CAAA,EAAI,CACjHgK,KAAM,SAAUuM,IAAKc,EAAmBY,UAAWzB,IAAK0B,UAAWH,UAAWpB,MAE7EU,EAAmBc,MAAQN,EAAW7E,IAAI,OAAQvT,OAAOO,OAAO,GAAIqX,EAAmBc,KAAM,CAC9FnO,KAAM,OAAQ+N,UAAWnB,MAExBS,EAAmBjR,OAASyR,EAAW7E,IAAI,QAASvT,OAAOO,OAAO,GAAIqX,EAAmBjR,MAAO,CACjG4D,KAAM,QAAS+N,UAAWlB,aAErBQ,EAAmBd,WACnBc,EAAmBb,WACnBa,EAAmBY,iBACnBZ,EAAmBa,UAC1B,IAAI,MACFE,EAAgBC,KACbR,EAAWpW,UAAW,CACzB,MAAM6W,EAAiBD,EAAmBN,UAC1CV,EAAmBe,GAAkBC,EACrChB,EAAmBQ,WAAWnW,KAAK,IAAI4W,EAAeD,EAAoBtD,GAChF,CACA,CACE,OAAOiC,CACT,CA/LuBuB,CAAgBvB,EAAY1N,MAE3C,OADA7J,OAAO+L,eAAelC,KAAM,SAAU,CAAEyB,MAAOa,IACxCA,CACf,GACM0J,SAAY,CAAEvK,MAAO,YAAYJ,GAC/B,IAAI6N,YAAEA,EAAWtW,QAAEA,EAAOrB,QAAEA,GAoEpC,YAAmC8J,GACjC,IAAI6N,EAAatW,EAASrB,EACD,IAAtB8J,EAAWlI,QACZ+V,EAAc,KAAMtW,EAAUyI,EAAW8N,QAAS5X,EAAU,MAEhC,IAAtB8J,EAAWlI,OACd,CAAC,SAAU,UAAU8M,gBAAgB5E,EAAW,KACjD6N,EAAc7N,EAAW8N,QAASvW,EAAUyI,EAAW8N,QAAS5X,EAAU,MAEpE8J,EAAW,IAA+B,iBAAlBA,EAAW,KACzC6N,EAAc,KAAMtW,EAAUyI,EAAW8N,QAAS5X,EAAU8J,EAAW8N,SAG7C,IAAtB9N,EAAWlI,QACd,CAAC,SAAU,UAAU8M,gBAAgB5E,EAAW,MACjD6N,EAAc7N,EAAW8N,QAASvW,EAAUyI,EAAW8N,QAAS5X,EAAU8J,EAAW8N,SAGzF,MAAO,CAAED,cAAatW,UAASrB,UACjC,CAvFgD6X,IAA0B/N,GAClE9J,EAAUA,GAAW2P,EAAmBtO,GACxC,MAAM0J,OAAEA,EAAM9J,KAAEA,EAAImT,SAAEA,EAAQjL,KAAEA,EAAIgL,iBAAEA,GAAqB1L,KAC3D,IAAIqL,EAAa,IAAIG,EAAW,CAC9BG,WAAUD,mBACVE,WAAYtJ,EACZiF,IAAK2H,EACLzN,MAAO7I,GACNoH,MACH,MAAMqP,EAAmBlZ,OAAOgC,QAAQS,GACxC,IAAI0W,EAAsB,EAC1B,KAAMA,EAAsBD,EAAiBlW,QAAQ,CACnD,MAAO0O,EAAYC,GAAgBuH,EAAiBC,GAC9CC,EAAqBvP,KAAKwP,iBAAiB3H,EAAYC,EAAclP,EAASrB,IACpD,IAA7BgY,EAAmBhF,MAAkBc,EAAWN,QAAQ3S,KAAKmX,IAC3B,IAA7BA,EAAmBhF,MAAmBc,EAAWL,UAAU5S,KAAKmX,QACnCtZ,IAA7BsZ,EAAmBhF,OAAuBc,EAAWJ,UAAU7S,KAAKmX,GAC5ED,GACV,CAKQ,OAJGjE,EAAWN,QAAQ5R,OAAUkS,EAAWd,OAAQ,EAC3Cc,EAAWL,UAAU7R,OAAUkS,EAAWd,OAAQ,EAClDc,EAAWJ,UAAU9R,OAAUkS,EAAWd,WAAQtU,EACnDoV,EAAWd,OAAQ,EACnBc,CACf,GACMmE,iBAAoB,CAAE/N,MAAO,WAC3B,MAAMxJ,KAAEA,EAAIC,OAAEA,EAAMU,QAAEA,EAAOrB,QAAEA,GA8DvC,YAA2C8J,GACzC,IAAKpJ,EAAMC,EAAQU,EAASrB,GAAW8J,EACvC,MAAO,CAAEpJ,OAAMC,SAAQU,UAASrB,UAClC,CAjEmDkY,IAAkClR,YACvE+D,OAAEA,EAAM9J,KAAEA,EAAImT,SAAEA,EAAQd,OAAEA,EAAMnK,KAAEA,EAAIgL,iBAAEA,GAAqB1L,KACnE,IAAI+N,EACQ,UAATrN,EAAoBqN,EAAqBzL,EAAO,GAClC,WAAT5B,IAAqBqN,EAAqBzL,EAAOrK,IACzD,MAAMsX,EAAqB,IAAI/D,EAAW,CACxCG,WACAD,mBACAE,WAAYmC,EACZxG,IAAKtP,EACLwJ,MAAOvJ,GACN8H,MACH,QAA0B/J,IAAvB8X,EAAkC,CACnC,MAAM7B,EAAe,IAAInC,EAAa,CACpCrJ,KAAM,KACNkL,WAAY,KACZrE,IAAKtP,EACLwJ,MAAOvJ,GACN8H,MACHkM,EAAajC,MAAO,EACpBsF,EAAmBtE,UAAU7S,KAAK8T,EAC5C,MAEUwD,EACA,IAAI,MAAOC,EAAiBC,KAAezZ,OAAOgC,QAAQ4V,EAAmBQ,YAAa,CACxF,MAAMrC,EAAe0D,EAAW5D,SAAS/T,EAAMC,EAAQU,EAASrB,GAIhE,IAHyB,IAAtB2U,EAAajC,KAAiBsF,EAAmBxE,QAAQ3S,KAAK8T,IACnC,IAAtBA,EAAajC,KAAkBsF,EAAmBvE,UAAU5S,KAAK8T,QAC3CjW,IAAtBiW,EAAajC,MAAsBsF,EAAmBtE,UAAU7S,KAAK8T,GAChD,QAA1BlM,KAAK0L,kBAA8B6D,EAAmBvE,UAAU7R,OACjE,MAAMuW,CAEpB,CAKQ,OAHGH,EAAmBvE,UAAU7R,OAAUoW,EAAmBhF,OAAQ,EAC7DgF,EAAmBxE,QAAQ5R,OAAUoW,EAAmBhF,OAAQ,EAChEgF,EAAmBtE,UAAU9R,SAAUoW,EAAmBhF,OAAQ,GACnEgF,CACf,IAEA,EAyHA,SAASzB,GAAsBpW,EAAS+T,GACtC,IAAI/T,GAAWA,aAAmBgV,GAAU,OAAO,EACnD,MAAMmD,EAAUpE,EAAQ5T,QAAQ6V,WAAWhN,KAC3C,OAAOvK,OAAOqW,OAAO9U,EAASmY,EAChC,CACA,SAASzB,GAAuB1W,EAAS+T,GACvC,IAAI/T,EAAW,OAAO,EACtB,MAAMoY,EAAWrE,EAAQ5T,QAAQ6V,WAAWjM,MAC5C,OAAOtL,OAAOqW,OAAO9U,EAASoY,EAChC,CCpRe,MAAMC,WAAmBC,YACtC,WAAAnQ,CAAYuB,EAAOtB,EAAWmQ,GAC5B7J,MAAMhF,EAAOtB,GACb3J,OAAOqL,iBAAiBxB,KAAM,CAC5BkQ,MAAS,CAAEpO,IAAI,IAAYmO,GAC3B1I,IAAO,CAAE1F,cAAc,EAAM,GAAAC,GAC3B,MAAMyF,EAAOvH,KAAS,KAAIA,KAAKxH,KAAKmD,MAAM,KAAKiC,MAAQ,KAEvD,OADAzH,OAAO+L,eAAelC,KAAM,MAAO,CAAEyB,MAAO8F,IACrCA,CACf,GACM4I,OAAU,CAAEtO,cAAc,EAAM,GAAAC,GAC9B,MAAMqO,EAASrQ,EAAUqQ,OAEzB,OADAha,OAAO+L,eAAelC,KAAM,SAAU,CAAEyB,MAAO0O,IACxCA,CACf,GACM1O,MAAS,CAAEI,cAAc,EAAM,GAAAC,GAC7B,MAAML,EAAQ3B,EAAU2B,MAExB,OADAtL,OAAO+L,eAAelC,KAAM,QAAS,CAAEyB,MAAOA,IACvCA,CACf,GACMjJ,KAAQ,CAAEqJ,cAAc,EAAM,GAAAC,GAC5B,MAAMtJ,EAAOsH,EAAUtH,KAEvB,OADArC,OAAO+L,eAAelC,KAAM,OAAQ,CAAEyB,MAAOjJ,IACtCA,CACf,GACM4X,OAAU,CAAEvO,cAAc,EAAM,GAAAC,GAC9B,MAAMsO,EAAStQ,EAAUsQ,OAEzB,OADAja,OAAO+L,eAAelC,KAAM,SAAU,CAAEyB,MAAO2O,IACxCA,CACf,IAEA,EC/Be,MAAMC,GACnBC,IAAW,EACXC,IAAW,EACXC,IAAU,EACVC,IAAW,EACXC,GACAC,GACAC,GACAC,GACA,WAAAhR,CAAYC,EAAY,IACtB,IAAI,MAAO7H,EAAMC,KAAW/B,OAAOgC,QAAQ2H,GAAcE,KAAK/H,GAAQC,CAC1E,CACE,UAAIyY,GAAW,OAAO3Q,MAAK2Q,CAAO,CAClC,UAAIA,CAAOG,GACT,IAAqB,IAAlB9Q,MAAKuQ,EAAqB,OAAOvQ,MAAK2Q,EACzC3Q,MAAK2Q,EAAUG,GAASC,UACxB/Q,MAAKuQ,GAAW,CACpB,CACE,SAAIK,GAAU,OAAO5Q,MAAK4Q,CAAM,CAChC,SAAIA,CAAMI,GACR,IAAoB,IAAjBhR,MAAKwQ,EAAoB,OAAOxQ,MAAK4Q,EACxC5Q,MAAK4Q,EAASI,GAAQD,UACtB/Q,MAAKwQ,GAAU,CACnB,CACE,UAAIK,GACF,IACoB,IAAlB7Q,MAAKyQ,GACL,CAACzQ,MAAKuQ,EAAUvQ,MAAKwQ,GAASvK,UAAS,GACrC,OAAOjG,MAAK6Q,EAChB,MAAMF,EAASpH,KAAKK,UAAU5J,KAAK2Q,QAEnC,IAAIE,EAKJ,OAJuBA,EAFTtH,KAAKK,UAAU5J,KAAK4Q,SAErBD,EAEb3Q,MAAK6Q,EAAUA,EACf7Q,MAAKyQ,GAAW,EACTzQ,MAAK6Q,CAChB,SCrCe,cAA6Bb,YAC1C,WAAAnQ,CAAYuB,EAAOtB,EAAWmQ,GAC5B7J,MAAMhF,GACNjL,OAAOqL,iBAAiBxB,KAAM,CAC5BuH,IAAO,CAAE1F,cAAc,EAAM,GAAAC,GAC3B,MAAMyF,EAAMzH,EAAUyH,IAEtB,OADApR,OAAO+L,eAAelC,KAAM,MAAO,CAAEyB,MAAO8F,IACrCA,CACf,GACM/O,KAAQ,CAAEqJ,cAAc,EAAM,GAAAC,GAC5B,MAAMtJ,EAAQyX,EAAW,KACrB,CAACA,EAAOzX,KAAMsH,EAAUyH,KAAK9O,KAAK,KAClCqH,EAAUyH,IAEd,OADApR,OAAO+L,eAAelC,KAAM,OAAQ,CAAEyB,MAAOjJ,IACtCA,CACf,GACMiJ,MAAS,CAAEI,cAAc,EAAM,GAAAC,GAC7B,MAAML,EAAQ3B,EAAU2B,MAExB,OADAtL,OAAO+L,eAAelC,KAAM,QAAS,CAAEyB,MAAOA,IACvCA,CACf,GACM8I,MAAS,CAAE1I,cAAc,EAAM,GAAAC,GAC7B,MAAMyI,EAAQzK,EAAUyK,MAExB,OADApU,OAAO+L,eAAelC,KAAM,QAAS,CAAEyB,MAAO8I,IACvCA,CACf,IAEA,GCtBA,IAAe0G,GAAA,CACbva,OCHa,SAAgBuZ,EAAQtY,KAAagB,GAClD,MAAMd,EAAU1B,OAAOO,OAAO,CAAE,EAAEiB,GAE5BuZ,EAAcrZ,EAAQqZ,aAAe,UACrC1Y,KAAEA,EAAIqS,OAAEA,EAAM9P,OAAEA,EAAMuH,OAAEA,GAAW2N,GACnCkB,iBAAEA,EAAgBC,cAAEA,EAAazF,SAAEA,EAAQ0F,WAAEA,EAAUC,iBAAEA,GAAqBzZ,EAC9E0Z,EAAkB,GAClBC,EAAe,IAAInB,GAAO,CAAEM,OAAQV,IAE1C,IAAI,IAAIrX,KAAWD,EAAU,CAC3B,IAAI8Y,EACJ,MAAMC,EAAqB,IAAIrB,GAAO,CAAEM,OAAQV,IAG7C,IAAC0B,EAFDnb,MAAM8H,QAAQ1F,GAAY6Y,EAAiB,GACtC7Y,GAA8B,iBAAZA,IAAwB6Y,EAAiB,CAAE,GAElEN,GAAoBtG,IACrB8G,EAAc9G,EAAOmB,SAASpT,EAASqX,EAAOc,WAC1BY,EAAYlH,UAElCmH,EACA,IAAI,IAAK/J,EAAYC,KAAiB3R,OAAOgC,QAAQS,GAAU,CAC7D,MAAMiZ,EAA6B,IAAIxB,GAAO,CAAEM,OAAQrO,EAAOuF,KACzDiK,EAAgC,IAAIzB,GAAO,CAAEM,OAAQrO,EAAOuF,KAClE,GAAGgD,GAAUsG,EAAkB,CAC7B,MAAMY,EAAkB9B,EAAOc,UACzBiB,EAAkBpZ,EAClBqZ,EAAsBpH,EAAO2E,iBAAiB3H,EAAYC,EAAckK,EAAiBD,GAC/F,GAAGT,EAAkB,CACnB,IAAI5Q,EAAMwR,EAEPD,EAAoB1H,OACrB7J,EAAO,gBACPwR,EAAe,CAAC,gBAAiBrK,GAAYpP,KAAK,OAGlDiI,EAAO,mBACPwR,EAAe,CAAC,mBAAoBrK,GAAYpP,KAAK,MAEvD,IAAI,MAAM0Z,IAAc,CAACzR,EAAMwR,GAC7BjC,EAAOhP,cAAc,IAAImR,GAAeD,EAAYF,EAAqBhC,GAErF,CACQ,IAAIgC,EAAoB1H,MAAS,SAASqH,CAClD,CACM,IAAIS,EACJ,GAAGvK,GAAwC,iBAAjBA,EAA2B,CAInD,IAAIwK,EAHDxK,aAAwBmI,EAAOpQ,cAChCwS,EAAcvK,EAAaiJ,WAGEuB,EAAX,UAAjBzH,GAAQnK,KAAgCmK,EAAOvI,OAAO,GAAG5B,KAAKe,MACxC,WAAjBoJ,GAAQnK,KAAiCmK,EAAOvI,OAAOuF,GAAYnH,KAAKe,MAC7D,KACnB,MAAM8Q,EAAY,EACd,CAAC/Z,EAAMqP,GAAYpP,KAAK,KACxB/C,OAAOmS,GACX,IAAkB,IAAfwJ,EAAsB,CACvB,MAAMmB,EAAa9Z,EAAgB,CAAE,EAAEb,EAAS,CAC9CW,KAAM+Z,EACN5F,OAAQsD,IAEVoC,EAAc,IAAIpC,EAAOpQ,YAAYiI,EAAcwK,EAAWE,GAC9D,MAAMC,EAAa,CAAE5K,CAACA,GAAawK,GACnClc,OAAOO,OAAO4L,EAAQmQ,GACtBtc,OAAOO,OAAO+a,EAAgBgB,EACxC,KACa,CACH,GAAGnQ,EAAOuF,aAAuBoI,EAAOpQ,YACtCwS,EAAc/P,EAAOuF,OAElB,CACH,MAAM6K,EAAgBxL,EAAmBY,GACnC0K,EAAa9Z,EAAgB,CAAE,EAAEb,EAAS,CAC9CW,KAAM+Z,EACN5F,OAAQsD,IAEVoC,EAAc,IAAIpC,EAAOpQ,YAAY6S,EAAeJ,EAAWE,EAC3E,CACU,MAAMC,EAAa,CAAE5K,CAACA,GAAawK,GACnClc,OAAOO,OAAO4L,EAAQmQ,GACtBtc,OAAOO,OAAO+a,EAAgBgB,GAC9BxC,EAAO0C,sBACiB,UAArBN,EAAY3R,KACV,CAAC,OAAQ,WAAWuF,SAASiL,GAAgBmB,EAAYnB,MAAgBpJ,GACrEuK,EAAYnB,GAAapJ,GAEL,WAArBuK,EAAY3R,MAAqB2R,EAAwB,OAAEvK,EAC7E,CACA,KACW,CACHuK,EAAcvK,EACd,MAAM2K,EAAa,CAAE5K,CAACA,GAAawK,GACnClc,OAAOO,OAAO4L,EAAQmQ,GACtBtc,OAAOO,OAAO+a,EAAgBgB,EACtC,CACM,GAAGrB,EAAe,CAChB,MAAMwB,EAAiB,EAAS,CAACpa,EAAMqP,GAAYpP,KAAK,KAAO/C,OAAOmS,GACtE,GAAGuJ,EAAc,6BAA8B,CAC7C,MAAM1Q,EAAO,CAAC,uBAAwBmH,GAAYpP,KAAK,KACvDqZ,EAA8BlB,MAAQtO,EAAOuF,GAC7CoI,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAMoa,EACNnR,MAAO4Q,EACPlC,OAAQ2B,EACR1B,OAAQ,CACNrV,OAAQ0W,IAETxB,GAEf,CACWmB,EAAoC,uBACrCS,EAA2BjB,MAAQtO,EAAOuF,GAC1CoI,EAAOhP,cACL,IAAI8O,GAAW,uBAAwB,CACrCvX,KAAMoa,EACNnR,MAAO4Q,EACPlC,OAAQ0B,EACRzB,OAAQ,CACNrV,OAAQ0W,IAETxB,IAGf,CACA,CACIsB,EAAgBnZ,KAAKqZ,GAClBL,GAAiBA,EAA4B,eAC9CM,EAAmBd,MAAQX,EAC3BA,EAAOhP,cACL,IAAI8O,GAAW,eAAgB,CAC7BvX,OACA2X,OAAQuB,EACRtB,OAAQ,CACNrV,OAAQ0W,IAETxB,IAGX,CAaE,OAZGmB,GAAiBA,EAAsB,SACxCI,EAAaZ,MAAQX,EACrBA,EAAOhP,cACL,IAAI8O,GAAW,SAAU,CACvBvX,OACA2X,OAAQqB,EACRpB,OAAQ,CACNyC,QAAStB,IAEVtB,KAGAA,CACT,EDrJEzO,iBEJa,SAA0ByO,EAAQtY,EAAUwR,GACzD,MAAM3Q,KAAEA,EAAIqS,OAAEA,GAAWoF,EACzB,IAAIkB,iBACFA,EAAgBC,cAAEA,EAAazF,SAAEA,EAAQN,WACzCA,EAAUiG,iBAAEA,EAAgBwB,iBAAEA,GAC5Bnb,EACJ,MAAMob,EAA4B5c,OAAOgC,QAAQgR,GAC3C6J,EAAyB,IAAI3C,GAAO,CAAEM,OAAQV,IAEpD,IAAI,MACF/H,EAAcS,KACXoK,EACH9C,EAAO/N,eAAegG,EAAcS,EAAqBxS,OAAOO,OAAO,CAAE,EAAEiB,EAAU,CACnF0T,aAAYyH,sBAmBhB,OAhBG1B,GAAiBA,EAAgC,mBAClD4B,EAAuBpC,MAAQX,EAC/BA,EAAOhP,cACL,IAAI8O,GACF,mBACA,CACEvX,OACAiJ,MAAOwO,EAAOc,UACdX,OAAQ,CACN6C,YAAa9J,IAGjB8G,KAICA,CACT,EF5BE/N,eGLa,SAAwB+N,EAAQtY,EAAUuQ,EAAcS,GACrE,MAAM9Q,EAAU1B,OAAOO,OAAO,CAAE,EAAEiB,GAE5BuZ,EAAcrZ,EAAQqZ,aAAe,oBACrCgC,eACJA,EAAc/B,iBAAEA,EAAgBC,cAAEA,EAAa/F,WAC/CA,EAAUiG,iBAAEA,EAAgBwB,iBAAEA,GAC5Bjb,GACEyK,OAAEA,EAAM9J,KAAEA,EAAIqS,OAAEA,GAAWoF,EAC3BpH,EAAgBF,EAAoBlH,MAEpC0R,GAD2Bhd,OAAOiS,yBAAyB9F,EAAQ4F,IAAiB,CAAA,GACrCzG,MAC/C2R,EAAuB,IAAI/C,GAAO,CAAEM,OAAQwC,IAC5CE,EAA0B,IAAIhD,GAAO,CAAEM,OAAQwC,IAC/CG,EAAqCH,aAA+BlD,EAAOpQ,YACjF,GAAGgL,GAAUsG,EAAkB,CAC7B,MAAMoC,EAAgB1I,EAAO2E,iBAC3BtH,EACAR,EAAWmB,EAAe,UAAYA,EACtC,CAAE,EACFoH,EAAOc,WAET,GAAGO,EAAkB,CACnB,IAAI5Q,EAAMwR,EAIPqB,EAAchJ,OACf7J,EAAO,gBACPwR,EAAe,CAAC,gBAAiBhK,GAAczP,KAAK,OAGpDiI,EAAO,mBACPwR,EAAe,CAAC,mBAAoBhK,GAAczP,KAAK,MAEzD,IAAI,MAAM0Z,IAAc,CAACzR,EAAMwR,GAC7BjC,EAAOhP,cAAc,IAAImR,GAAeD,EAAYoB,EAAetD,GAE3E,CACI,IAAIsD,EAAchJ,MAAS,OAAO0F,CACtC,CACE,GAAGpH,GAA0C,iBAAlBA,EAA4B,CACrD,MAAM0J,EAAY,EACd,CAAC/Z,EAAM0P,GAAczP,KAAK,KAC1B/C,OAAOwS,GACX,GAAGoL,GACqB,IAAnBJ,EACDC,EAAoB3R,iBAAiBmH,GAGrCxS,OAAO+L,eAAeI,EAAQ4F,EAAcS,OAG3C,CACH,IAAI2J,EACDzH,IAC6ByH,EAAX,UAAhBzH,EAAOnK,KAAgCmK,EAAOvI,OAAO,GAAG5B,KAAKe,MACxC,WAAhBoJ,EAAOnK,KAAiCmK,EAAOvI,OAAO4F,GAAcxH,KAAKe,WAC9DxL,GAErB,IAAIuR,EAAYN,EAAmB2B,GACnC,MAAM2J,EAAa9Z,EAAgB,CAAE,EAAEb,EAAS,CAC9CW,KAAM+Z,EACN5F,OAAQsD,IAEJuD,EAAW,IAAIvD,EAAOpQ,YAC1B2H,EAAW8K,EAAWE,IAEF,IAAnBU,GACD5Q,EAAO4F,GAAgBsL,EACvBvD,EAAO0C,sBACc,UAAlBa,EAAS9S,KACP,CAAC,OAAQ,WAAWuF,SAASiL,GAAgBsC,EAAStC,MAAgBrI,GAClE2K,EAAStC,GAAarI,GAEL,WAAlB2K,EAAS9S,MAAqB8S,EAAqB,iBAAE3K,KAEpC,IAAnBqK,GACN/c,OAAO+L,eAAeI,EAAQ4F,EAAcS,EAEpD,CACA,MAEIxS,OAAO+L,eAAeI,EAAQ4F,EAAcS,GAE9C,GAAGyI,EAAe,CAChB,MAAMwB,EAAiB,EACnB,CAACpa,EAAM0P,GAAczP,KAAK,KAC1B/C,OAAOwS,GACX,GAAGkJ,EAAc,uBAAwB,CACvCiC,EAAwBzC,MAAQtO,EAAO4F,GACvC,MAAMxH,EAAO,CAAC,iBAAkBwH,GAAczP,KAAK,KACnDwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAMoa,EACNnR,MAAOoH,EACPsH,OAAQkD,EACRjD,OAAQ,CACNqD,KAAMvL,EACNwL,WAAY/K,IAEbsH,GAEX,CACOmB,EAA8B,iBAC/BgC,EAAqBxC,MAAQtO,EAAO4F,GACpC+H,EAAOhP,cACL,IAAI8O,GAAW,iBAAkB,CAC/BvX,KAAMoa,EACNnR,MAAOoH,EACPsH,OAAQiD,EACRhD,OAAQ,CACNqD,KAAMvL,EACNwL,WAAY/K,IAEbsH,IAGX,CACE,OAAOA,CACT,EHlHElJ,OIRa,SAAgBkJ,EAAQtY,GACrC,MAAMgc,UAAEA,EAASvC,cAAEA,GAAkBzZ,GAC/B2K,OAAEA,GAAW2N,EACnB,IAAiB,IAAd0D,EAED,IAAI,MACFzL,EAAc7E,KACXlN,OAAOgC,QAAQmK,GACfe,aAA0B4M,EAAOpQ,cAClCwD,EAAe0D,SACZqK,GAAiBA,EAA8B,gBAChDnB,EAAOhP,cACL,IAAI8O,GACF,iBACA,CAAEvX,KAAM6K,EAAe7K,MACvByX,KAiBZ,OAVA9Z,OAAO4Q,OAAOzE,GACX8O,GAAiBA,EAAsB,QACxCnB,EAAOhP,cACL,IAAI8O,GACF,SACA,CAAEvX,KAAMyX,EAAOzX,MACfyX,IAICA,CACT,EJxBE2D,KKTa,SAAc3D,EAAQtY,GACnC,MAAMgc,UAAEA,EAASvC,cAAEA,GAAkBzZ,GAC/B2K,OAAEA,GAAW2N,EACnB,IAAiB,IAAd0D,EAED,IAAI,MACFzL,EAAc7E,KACXlN,OAAOgC,QAAQmK,GACfe,aAA0B4M,EAAOpQ,cAClCwD,EAAeuQ,OACZxC,GAAiBA,EAA4B,cAC9CnB,EAAOhP,cACL,IAAI8O,GACF,eACA,CAAEvX,KAAM6K,EAAe7K,MACvByX,KAiBZ,OAVA9Z,OAAOyd,KAAKtR,GACT8O,GAAiBA,EAAoB,MACtCnB,EAAOhP,cACL,IAAI8O,GACF,OACA,CAAEvX,KAAMyX,EAAOzX,MACfyX,IAICA,CACT,GCzBA,IAAe4D,GAAA,CACblR,OCRa,SAAgBsN,EAAQtY,GACrC,MAAM2K,OAAEA,EAAM9J,KAAEA,EAAIqS,OAAEA,GAAWoF,GAC3BkB,iBAAEA,EAAgBC,cAAEA,EAAarW,OAAEA,EAAMuW,iBAAEA,GAAqB3Z,EAChE0J,EAAa,GAAGsB,UAAUpE,WAChC,IAAIuV,EAAaxR,EAAOnJ,OACxB,MAAM/C,EAAS,GACf,IACI8Z,EADA6D,EAAe,IAAIvd,MAAMwd,KAAK1R,IAElC2R,EACA,IAAI,IAAI/b,KAAUmJ,EAAY,CAC5B,GAAGwJ,GAAUsG,EAAkB,CAC7B,MAAMY,EAAkB9B,EAAOc,UACzBiB,EAAkBjX,GAAUmM,EAAmB6K,GAC/CmC,EAAarJ,EAAO2E,iBAAiBsE,EAAYK,UAAWnC,EAAiBD,GACnF,GAAGlH,GAASyG,EAAkB,CAC5B,IAAI5Q,EAAMwR,EAIPgC,EAAW3J,OACZ7J,EAAO,gBACPwR,EAAe,CAAC,gBAAiB4B,GAAYrb,KAAK,OAGlDiI,EAAO,mBACPwR,EAAe,CAAC,mBAAoB4B,GAAYrb,KAAK,MAEvD,IAAI,MAAM0Z,IAAc,CAACzR,EAAMwR,GAC7BjC,EAAOhP,cAAc,IAAImR,GAAeD,EAAY+B,EAAYjE,GAE1E,CACM,IAAIiE,EAAW3J,MAAO,CAAEuJ,IAAc,SAASG,CAAa,CAClE,CACI,MAAM1B,EAAY,EACd,CAAC/Z,EAAMsb,GAAYrb,KAAK,KACxB/C,OAAOoe,GACX,GAAG5b,GAA4B,iBAAXA,EAAqB,CACpCA,aAAkB+X,EAAOpQ,cAAe3H,EAASA,EAAO6Y,WAC3D,IAAIuB,EAAYzH,GAAQvI,OAAO,GAAG5B,KAAKe,OAAS,KAChD,MAAM+R,EAAWtM,EAAmBhP,GACpC,IAAIuJ,EAAQ,IAAIwO,EAAOpQ,YAAY2T,EAAUlB,EAAW,CACtD9Z,KAAM+Z,EACN5F,OAAQsD,IAEVxO,EAAMkB,OAAOzK,GACb9B,EAAO0d,GAAcrS,CAC3B,MAEMrL,EAAO0d,GAAc5b,EAGvB,GADA6b,EAAevd,MAAMK,UAAU8L,OAAO5L,KAAKgd,EAAc3d,EAAO0d,IAC7D1C,EAAe,CAChB,MAAMwB,EAAiB,EACnB,CAACpa,EAAMsb,GAAYrb,KAAK,KACxB/C,OAAOoe,GACR1C,EAA6B,eAC9BnB,EAAOhP,cACL,IAAI8O,GAAW,gBAAiB,CAC9BvX,KAAMoa,EACNnR,MAAOrL,EAAO0d,GACd1D,OAAQ,CACN0D,aACArS,MAAOrL,EAAO0d,KAEf7D,IAGJmB,EAAc,yBAEfnB,EAAOhP,cACL,IAAI8O,GAAW,gBAAiB,CAC9BvX,KAAMoa,EACNnR,MAAOrL,EAAO0d,GACd1D,OAAQ,CACN0D,aACArS,MAAOrL,EAAO0d,KAEf7D,GAGb,CACI6D,GACJ,CAYE,OAXA5D,EAAQ,IAAID,EAAOpQ,YAAYkU,EAAclJ,EAAQoF,EAAOpY,SACzDuZ,GAAiBA,EAAsB,QACxCnB,EAAOhP,cACL,IAAI8O,GAAW,SAAU,CACvBvX,OACA4X,OAAQ,CACNha,OAAQ8Z,IAETD,IAGAC,CACT,EDtFEkE,WEVa,SAAoBnE,EAAQtY,GACzC,MAAM2K,OAAEA,EAAM9J,KAAEA,GAASyX,GACnBkB,iBAAEA,EAAgBG,iBAAEA,EAAgBF,cAAEA,GAAkBzZ,EAExD0c,EACJ9V,UAAU,IAAM,EACdA,UAAU,GACV+D,EAAOnJ,OAASoF,UAAU,GACxB+V,EACJ/V,UAAU,IAAM,EACdA,UAAU,GACV+D,EAAOnJ,OAASoF,UAAU,GACxBlC,OACapG,IAAjBsI,UAAU,GACR+D,EAAOnJ,OAEToF,UAAU,IAAM,EACdA,UAAU,GACV+D,EAAOnJ,OAASoF,UAAU,GACxBgW,EAAc,GACpB,IAAIC,EAAYF,EACZG,EAAcJ,EAElB,KAAMG,EAAYnY,GAAK,CACrB,MAAMqY,EAAWpS,EAAOkS,GASxB,GARAD,EAAYnc,KAAKsc,GACjBle,MAAMK,UAAUud,WAAWrd,KACzBuL,EACAmS,EACAD,EACAA,EAAY,GAEdvE,EAAO0C,sBACJvB,EAAe,CAChB,MAAMwB,EAAiB,EACnB,CAACpa,EAAMgc,GAAW/b,KAAK,KACvB/C,OAAO8e,GAmBX,GAlBGpD,EAAiC,mBAClCnB,EAAOhP,cACL,IAAI8O,GACF,oBACA,CACEvX,KAAMoa,EACNnR,MAAOiT,EACPtE,OAAQ,CACN9N,OAAQmS,EACRH,MAAOE,EACPnY,IAAKmY,EAAY,EACjBG,KAAMD,IAGVzE,IAIHmB,EAAc,4BAA6B,CAC5C,MAAM1Q,EAAQ,CAAC,oBAAqB8T,GAAW/b,KAAK,KACpDwX,EAAOhP,cACL,IAAI8O,GACFrP,EACA,CACElI,KAAMoa,EACNnR,MAAOiT,EACPtE,OAAQ,CACN9N,OAAQmS,EACRH,MAAOE,EACPnY,IAAKmY,EAAY,EACjBG,KAAMD,IAGVzE,GAGZ,CACA,CACIuE,IACAC,GACJ,CAmBE,OAjBGrD,GAAiBA,EAA0B,YAC5CnB,EAAOhP,cACL,IAAI8O,GACF,aACA,CACEvX,OACA4X,OAAQ,CACN9N,OAAQ+R,EACRC,MAAOA,EACPjY,IAAKA,EACLuY,MAAOL,IAGXtE,IAICA,CACT,EFtFE4E,KGVa,SAAc5E,EAAQtY,KAAa0J,GAChD,MAAMxJ,EAAU1B,OAAOO,OAAO,CAAE,EAAEiB,IAC5B2K,OAAEA,EAAM9J,KAAEA,EAAIqS,OAAEA,GAAWoF,EAC3B6E,EAAejd,EAAQid,aACvB5D,EAAcrZ,EAAQqZ,aAAe4D,GACrC3D,iBAAEA,EAAgB4D,SAAEA,EAAQ3D,cAAEA,EAAaE,iBAAEA,GAAqBzZ,EAClEmd,EAAS,GACf,IAAIC,EAOAC,EALFD,EAD0B,iBAAlB5T,EAAW,GACTA,EAAW,IAAM,EACvBA,EAAW,GACXiB,EAAOnJ,OAASkI,EAAW,GAEjB,EAGd6T,EAD0B,iBAAlB7T,EAAW,GACXA,EAAW,IAAM,EACrBA,EAAW,GACXiB,EAAOnJ,OAASkI,EAAW,GACjBiB,EAAOnJ,OACpB4b,GAAYzS,EAAOnJ,OAAS+b,IAAQ5S,EAAOnJ,OAAS+b,GACvD,IAAIC,EAAYF,EAChBG,EACA,KACED,EAAY7S,EAAOnJ,QACnBgc,EAAYD,GACZ,CACA,GAAGrK,GAAUsG,EAAkB,CAC7B,IAAI+C,EAAarJ,EAAOmB,SAASkI,EAAYjE,EAAOc,WACpD,GAAGO,EAAkB,CACnB,IAAI5Q,EAAMwR,EAIPgC,EAAW3J,OACZ7J,EAAO,gBACPwR,EAAe,CAAC,gBAAiBiD,GAAW1c,KAAK,OAGjDiI,EAAO,mBACPwR,EAAe,CAAC,mBAAoBiD,GAAW1c,KAAK,MAEtD,IAAI,MAAM0Z,IAAc,CAACzR,EAAMwR,GAC7BjC,EAAOhP,cAAc,IAAImR,GAAeD,EAAY+B,EAAYjE,GAE1E,CACM,IAAIiE,EAAW3J,MAAS,SAAS6K,CACvC,CACI,MAAM7C,EAAY,EACd,CAAC/Z,EAAM2c,GAAW1c,KAAK,KACvB/C,OAAOyf,GACX,IACI1T,EADAvJ,EAASmJ,EAAW,GAExB,GAAGnJ,GAA4B,iBAAXA,EAAqB,CACpCA,aAAkB+X,EAAOpQ,cAAe3H,EAASA,EAAO6Y,WAC3D,MAAMuB,EAAYzH,GAAQvI,OAAO,GAAG5B,KAAKe,OAAS,KAC5CiR,EAAgBxL,EAAmBhP,GACnCsa,EAAarc,OAAOO,OAAO,CAAA,EAAImB,EAAS,CAC5CW,KAAM+Z,EACN5F,OAAQsD,IAEVxO,EAAQ,IAAIwO,EAAOpQ,YAAY6S,EAAeJ,EAAWE,EAC/D,CASI,GARAhc,MAAMK,UAAUge,KAAK9d,KAAKuL,EAAQb,EAAO0T,EAAWA,EAAY,GAChElF,EAAO0C,sBACW,UAAflR,EAAMf,KACJ,CAAC,OAAQ,WAAWuF,SAASiL,GAAgBzP,EAAMyP,MAAgBhZ,GAC/DuJ,EAAMyP,GAAahZ,GAEL,WAAfuJ,EAAMf,MAAqBe,EAAMqT,GAAc5c,GACvD8c,EAAO5c,KAAKqJ,GACT2P,EAAe,CAChB,MAAMwB,EAAiB,EACnB,CAACpa,EAAM2c,GAAW1c,KAAK,KACvB/C,OAAOyf,GAcX,GAbG/D,EAA2B,aAC5BnB,EAAOhP,cACL,IAAI8O,GAAW,cAAe,CAC5BvX,KAAMoa,EACNnR,MAAOA,EACP2O,OAAQ,CACNkE,MAAOa,EACP9Y,IAAK8Y,EAAY,EACjB1T,UAEDwO,IAGJmB,EAAc,sBAAuB,CACtC,MAAM1Q,EAAO,CAAC,cAAeyU,GAAW1c,KAAK,KAC7CwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAMoa,EACNxC,OAAQ,CACNkE,MAAOa,EACP9Y,IAAK8Y,EAAY,EACjB1T,UAEDwO,GAEb,CACA,CACIkF,GACJ,CAcE,OAbG/D,GAAiBA,EAAoB,MACtCnB,EAAOhP,cACL,IAAI8O,GAAW,OAAQ,CACrBvX,OACA4X,OAAQ,CACNkE,MAAOW,EACP5Y,IAAK6Y,EACLF,WAGJ/E,IAGGA,CACT,EH3GErS,IIZa,SAAaqS,EAAQtY,GAClC,MAAMyZ,cAAEA,GAAkBzZ,GACpB2K,OAAEA,EAAM9J,KAAEA,GAASyX,EACnBoF,EAAa7e,MAAMK,UAAU+G,IAAI7G,KAAKuL,GACtCgT,EAAkBhT,EAAOnJ,OAAS,EAExC,GADA8W,EAAO0C,sBACJvB,GAAiBA,EAAmB,IAAG,CACxC,MAAMwB,EAAiB,EACnB,CAACpa,EAAM8c,GAAiB7c,KAAK,KAC7B/C,OAAO4f,GACTrF,EAAOhP,cACP,IAAI8O,GACF,MACA,CACEvX,KAAMoa,EACNnR,MAAO4T,EACPjF,OAAQ,CACNmF,aAAcD,EACdE,QAASH,IAGbpF,GAGR,CACE,OAAOoF,CACT,EJbEjd,KKZa,SAAc6X,EAAQtY,KAAa8d,GAChD,MAAM5d,EAAU1B,OAAOO,OAAO,CAAE,EAAEiB,GAC5BuZ,EAAc,OACd4D,EAAejd,EAAQid,cACvB3D,iBAAEA,EAAgBC,cAAEA,EAAarW,OAAEA,EAAMuW,iBAAEA,GAAqBzZ,GAChEyK,OAAEA,EAAM9J,KAAEA,EAAIqS,OAAEA,GAAWoF,EAC3ByF,EAAW,GACjB,IAAIC,EAAgB,EAEpB,IAAI,IAAIC,KAAYH,EAAW,CAC7B,IAAID,EACJ,GAAG3K,GAAUsG,EAAkB,CAC7B,MAAMY,EAAkB9B,EAAOc,UACzBiB,EAAkBjX,GAAUmM,EAAmB6K,GAC/C8D,EAAehL,EAAO2E,iBAAiBmG,EAAeC,EAAU5D,EAAiBD,GACvF,GAAGT,EAAkB,CACnB,IAAI5Q,EAAMwR,EAIP2D,EAAatL,OACd7J,EAAO,gBACPwR,EAAe,CAAC,gBAAiByD,GAAeld,KAAK,OAGrDiI,EAAO,mBACPwR,EAAe,CAAC,mBAAoByD,GAAeld,KAAK,MAE1D,IAAI,MAAM0Z,IAAc,CAACzR,EAAMwR,GAC7BjC,EAAOhP,cAAc,IAAImR,GAAeD,EAAY0D,EAAc5F,GAE5E,CACM,IAAI4F,EAAatL,MAAS,OAAOjI,EAAOnJ,MAC9C,CACI,MAAMoZ,EAAY,EACd,CAAC/Z,EAAMmd,GAAeld,KAAK,KAC3B/C,OAAOigB,GACX,GAAGC,GAAgC,iBAAbA,EAAuB,CAC3CA,EAAYA,aAAoB3F,EAAOpQ,YAAe+V,EAAS7E,UAAY6E,EAC3E,MAAMtD,EAAYzH,GAAQvI,OAAO,GAAG5B,KAAKe,OAAS,KAC5CiR,EAAgBxL,EAAmBvQ,EAAOif,IAC1CE,EAAkB3f,OAAOO,OAAO,CAAA,EAAImB,EAAS,CACjDW,KAAM+Z,EACN5F,OAAQsD,IAEVuF,EAAU,IAAIvF,EAAOpQ,YAAY6S,EAAeJ,EAAWwD,GAC3Dtf,MAAMK,UAAUuB,KAAKrB,KAAKuL,EAAQkT,GAClCvF,EAAO0C,sBACa,UAAjB6C,EAAQ9U,KACN,CAAC,OAAQ,WAAWuF,SAASiL,GAAgBsE,EAAQtE,MAAgB0E,GACjEJ,EAAQtE,GAAa0E,GAEL,WAAjBJ,EAAQ9U,MAAqB8U,EAAQV,GAAcc,EACjE,MAEMJ,EAAUI,EACVpf,MAAMK,UAAUuB,KAAKrB,KAAKuL,EAAQkT,GAGpC,GADAE,EAAStd,KAAKod,GACXpE,EAAe,CAChB,MAAMwB,EAAiB,EACnB,CAACpa,EAAMmd,GAAeld,KAAK,KAC3B/C,OAAOigB,GAaX,GAZGvE,EAA2B,aAC5BnB,EAAOhP,cACL,IAAI8O,GAAW,cAAe,CAC5BvX,KAAMoa,EACNnR,MAAOiU,EAASC,GAChBvF,OAAQ,CACNuF,gBACAH,QAASE,EAASC,KAEnB1F,IAGJmB,EAAc,sBAAuB,CACtC,MAAM1Q,EAAO,CAAC,cAAeiV,GAAeld,KAAK,KACjDwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAMoa,EACNnR,MAAOiU,EAASC,GAChBvF,OAAQ,CACNuF,gBACAH,QAASE,EAASC,KAEnB1F,GAEb,CACA,CACI0F,GACJ,CAWE,OAVGvE,GAAiBA,EAAoB,MACtCnB,EAAOhP,cACL,IAAI8O,GAAW,OAAQ,CACrBvX,OACA4X,OAAQ,CACNsF,aAEDzF,IAGA3N,EAAOnJ,MAChB,ELzFE4c,QMda,SAAiB9F,EAAQtY,GACtC,MAAMyZ,cAAEA,GAAkBzZ,GACpB2K,OAAEA,EAAM9J,KAAEA,GAASyX,EAiBzB,OAhBAzZ,MAAMK,UAAUkf,QAAQhf,KAAKuL,KAAW/D,WACxC0R,EAAO0C,sBACJvB,GAAiBA,EAAuB,SACzCnB,EAAOhP,cACL,IAAI8O,GACF,UACA,CACEvX,OACA4X,OAAQ,CACN4F,UAAW1T,IAGf2N,IAICA,CACT,ENLEd,MOfa,SAAec,EAAQtY,GACpC,MAAMyZ,cAAEA,GAAkBzZ,GACpB2K,OAAEA,EAAM9J,KAAEA,GAASyX,EACnBgG,EAAezf,MAAMK,UAAUsY,MAAMpY,KAAKuL,GAC1C4T,EAAoB,EAE1B,GADAjG,EAAO0C,sBACJvB,GAAiBA,EAAqB,MAAG,CAC1C,MAAMwB,EAAiB,EACnB,CAACpa,EAAM0d,GAAmBzd,KAAK,KAC/B/C,OAAOwgB,GACXjG,EAAOhP,cACL,IAAI8O,GACF,QACA,CACEvX,KAAMoa,EACNnR,MAAOwU,EACP7F,OAAQ,CACNmF,aAAcW,EACdV,QAASS,IAGbhG,GAGR,CACE,OAAOgG,CACT,EPVE/P,OQfa,SAAgB+J,EAAQtY,GACrC,MAAME,EAAU1B,OAAOO,OAAO,CAAE,EAAEiB,GAC5Bmd,EAAejd,EAAQid,aACvB5D,EAAcrZ,EAAQqZ,aAAe4D,GACrC1D,cAAEA,EAAarW,OAAEA,GAAWlD,GAC5ByK,OAAEA,EAAM9J,KAAEA,EAAIqS,OAAEA,GAAWoF,GAC3BkB,iBAAEA,EAAgBG,iBAAEA,GAAqBzZ,EACzCwJ,EAAa,IAAI9C,WACjB0W,EAAU5T,EAAW,IAAM,EAC7BA,EAAW,GACXiB,EAAOnJ,OAASkI,EAAW,GACzB8U,EAAgB9U,EAAW,IAAM,EACnC,OAEkBpL,IAAlBoL,EAAW,IACX4T,EAAS5T,EAAW,IAAMiB,EAAOnJ,OAC/BmJ,EAAOnJ,OAAS8b,EAChB5T,EAAW,GACX+U,EAAY/U,EAAWrK,MAAM,GAC7Bqf,EAAWD,EAAUjd,OACrBmd,EAAc,GACpB,IAAIC,EAAmB,EAEvB,KAAMA,EAAmBJ,GAAc,CACrC,MAAMK,EAAahgB,MAAMK,UAAUqP,OAAOnP,KAAKuL,EAAQ2S,EAAQ,GAAG,GAElE,GADAqB,EAAYle,KAAKoe,GACdpF,EAAe,CAChB,MAAMwB,EAAiB,EACnB,CAACpa,EAAM+d,GAAkB9d,KAAK,KAC9B/C,OAAO6gB,GAcX,GAbGnF,EAAmC,qBACpCnB,EAAOhP,cACL,IAAI8O,GAAW,sBAAuB,CACpCvX,KAAMoa,EACNnR,MAAO+U,EACPpG,OAAQ,CACNtJ,MAAOmO,EAASsB,EAChBE,YAAaF,EACbC,WAAYA,IAEbvG,IAGJmB,EAAc,8BAA+B,CAC9C,MAAM1Q,EAAO,CAAC,sBAAuB6V,GAAkB9d,KAAK,KAC5DwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAMoa,EACNnR,MAAO+U,EACPpG,OAAQ,CACNtJ,MAAOmO,EAASsB,EAChBE,YAAaF,EACbC,WAAYA,IAEbvG,GAEb,CACA,CACIsG,GACJ,CACE,IAAIG,EAAgB,EACpBC,EACA,KAAMD,EAAgBL,GAAU,CAC9B,IAAIO,EAAUR,EAAUM,GACxB,GAAG7L,GAAUsG,EAAkB,CAC7B,MAAMY,EAAkB9B,EAAOc,UACzBiB,EAAkBjX,GAAUmM,EAAmB6K,GAC/C8E,EAAehM,EAAO2E,iBAAiB+F,aAAcC,QAASxD,EAAiBD,GACrF,GAAGT,EAAkB,CACnB,IAAI5Q,EAAMwR,EAIP2E,EAAatM,OACd7J,EAAO,gBACPwR,EAAe,CAAC,gBAAiBwE,GAAeje,KAAK,OAGrDiI,EAAO,mBACPwR,EAAe,CAAC,mBAAoBwE,GAAeje,KAAK,MAE1D,IAAI,MAAM0Z,IAAc,CAACzR,EAAMwR,GAC7BjC,EAAOhP,cAAc,IAAImR,eAAeD,EAAY0E,EAAc5G,GAE5E,CACM,IAAI4G,EAAatM,MAAO,CAAEmM,IAAiB,SAASC,CAAS,CACnE,CACI,MAAMpE,EAAY,EACd,CAAC/Z,EAAMke,GAAeje,KAAK,KAC3B/C,OAAOghB,GACX,IAAII,EAAa7B,EAASyB,EAC1B,GAAGE,GAA8B,iBAAZA,EAAsB,CACtCA,aAAmB3G,EAAOpQ,cAAe+W,EAAUA,EAAQ7F,WAC9D,MAAMuB,EAAYzH,GAAQvI,OAAO,GAAG5B,KAAKe,OAAS,KAC5CiR,EAAgBxL,EAAmB0P,GACnCpE,EAAa9Z,gBAAgB,CAAE,EAAEb,EAAS,CAC9CW,KAAM+Z,EACN5F,OAAQsD,IAEV2G,EAAU,IAAI3G,EAAOpQ,YAAY6S,EAAeJ,EAAWE,GAC3Dhc,MAAMK,UAAUqP,OAAOnP,KAAKuL,EAAQwU,EAAY,EAAGF,GACnD3G,EAAO0C,sBACa,UAAjBiE,EAAQlW,KACN,CAAC,OAAQ,WAAWuF,SAASiL,GAAgB0F,EAAQ1F,MAAgBhZ,QACjE0e,EAAQ1F,GAAahZ,QAEL,WAAjB0e,EAAQlW,MAAqBkW,EAAQ9B,GAAc5c,OACjE,MAEM1B,MAAMK,UAAUqP,OAAOnP,KAAKuL,EAAQwU,EAAY,EAAGF,GAErD,GAAGxF,EAAe,CAChB,MAAMwB,EAAiB,EACnB,CAACpa,EAAMke,GAAeje,KAAK,KAC3B/C,OAAOghB,GAcX,GAbGtF,EAAgC,kBACjCnB,EAAOhP,cACL,IAAI8O,GAAW,mBAAoB,CACjCvX,KAAMoa,EACNnR,MAAOmV,EACPxG,OAAQ,CACNtJ,MAAOmO,EAASyB,EAChBK,SAAUL,EACVE,QAASA,IAEV3G,IAGJmB,EAAc,2BAA4B,CAC3C,MAAM1Q,EAAO,CAAC,mBAAoBgW,GAAeje,KAAK,KACtDwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAMoa,EACNnR,MAAOmV,EACPxG,OAAQ,CACNtJ,MAAOmO,EAASyB,EAChBK,SAAUL,EACVE,QAASA,IAEV3G,GAEb,CACA,CACIyG,GACJ,CAeE,OAdGtF,GAAiBA,EAAsB,QACxCnB,EAAOhP,cACL,IAAI8O,GAAW,SAAU,CACvBvX,OACA4X,OAAQ,CACN6E,SACA+B,QAASV,EACTW,MAAOb,EACPjd,OAAQmJ,EAAOnJ,SAGnB8W,IAGGqG,CACT,ERhJE/S,QShBa,SAAiB0M,EAAQtY,KAAa8d,GACnD,MAAM5d,EAAU1B,OAAOO,OAAO,CAAE,EAAEiB,GAE5Bmd,EAAejd,EAAQid,cACvB3D,iBAAEA,EAAgBC,cAAEA,EAAarW,OAAEA,EAAMuW,iBAAEA,GAAqBzZ,GAChEyK,OAAEA,EAAM9J,KAAEA,EAAIqS,OAAEA,GAAWoF,EAC3ByF,EAAW,GACjB,IAAIC,EAAgB,EAEpB,IAAI,IAAIC,KAAYH,EAAW,CAC7B,IAAID,EACJ,GAAG3K,GAAUsG,EAAkB,CAC7B,MAAMY,EAAkB9B,EAAOc,UACzBiB,EAAkBjX,GAAUmM,EAAmB6K,GAC/C8D,EAAehL,EAAO2E,iBAAiBmG,EAAeC,EAAU5D,EAAiBD,GACvF,GAAGT,EAAkB,CACnB,IAAI5Q,EAAMwR,EAIP2D,EAAatL,OACd7J,EAAO,gBACPwR,EAAe,CAAC,gBAAiByD,GAAeld,KAAK,OAGrDiI,EAAO,mBACPwR,EAAe,CAAC,mBAAoByD,GAAeld,KAAK,MAE1D,IAAI,MAAM0Z,IAAc,CAACzR,EAAMwR,GAC7BjC,EAAOhP,cAAc,IAAImR,eAAeD,EAAY0D,EAAc5F,GAE5E,CACM,IAAI4F,EAAatL,MAAS,OAAOjI,EAAOnJ,MAC9C,CACI,MAAMoZ,EAAY,EACd,CAAC/Z,EAAMmd,GAAeld,KAAK,KAC3B/C,OAAOigB,GACX,GAAGC,GAAgC,iBAAbA,EAAuB,CAC3CA,EAAYA,aAAoB3F,EAAOpQ,YAAe+V,EAAS7E,UAAY6E,EAC3E,MAAMtD,EAAYzH,GAAQvI,OAAO,GAAG5B,KAAKe,OAAS,KAC5CiR,EAAgBxL,EAAmBvQ,EAAOif,IAC1CE,EAAkB3f,OAAOO,OAAO,CAAA,EAAImB,EAAS,CACjDW,KAAM+Z,EACN5F,OAAQsD,IAEVuF,EAAU,IAAIvF,EAAOpQ,YAAY6S,EAAeJ,EAAWwD,GAC3Dtf,MAAMK,UAAU0M,QAAQxM,KAAKuL,EAAQkT,GACrCvF,EAAO0C,sBACa,UAAjB6C,EAAQ9U,KAAoB8U,EAAmB,WAAKI,GAC9B,WAAjBJ,EAAQ9U,MAAqB8U,EAAQV,GAAcc,EACjE,MAEMJ,EAAUI,EACVpf,MAAMK,UAAU0M,QAAQxM,KAAKuL,EAAQkT,GAGvC,GADAE,EAASnS,QAAQiS,GACdpE,EAAe,CAChB,MAAMwB,EAAiB,EACnB,CAACpa,EAAMmd,GAAeld,KAAK,KAC3B/C,OAAOigB,GAaX,GAZGvE,EAA8B,gBAC/BnB,EAAOhP,cACL,IAAI8O,GAAW,iBAAkB,CAC/BvX,KAAMoa,EACNnR,MAAOiU,EAASC,GAChBvF,OAAQ,CACNuF,gBACAH,QAASE,EAASC,KAEnB1F,IAGJmB,EAAc,yBAA0B,CACzC,MAAM1Q,EAAO,CAAC,iBAAkBiV,GAAeld,KAAK,KACpDwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAMoa,EACNnR,MAAOiU,EAASC,GAChBvF,OAAQ,CACNuF,gBACAH,QAASE,EAASC,KAEnB1F,GAEb,CACA,CACI0F,GACJ,CAWE,OAVGvE,GAAiBA,EAAuB,SACzCnB,EAAOhP,cACL,IAAI8O,GAAW,UAAW,CACxBvX,OACA4X,OAAQ,CACNsF,aAEDzF,IAGA3N,EAAOnJ,MAChB,GClGA,IAAe+d,GAAA,CACbpV,ICDa,SAAqBmO,EAAQtY,KAAa0J,GACvD,IAAI8V,EACJ,MAAMtf,EAAUF,EAShB,MAR4B,iBAAlB0J,EAAW,IACM,IAAtBA,EAAWlI,QAAgBT,EAAgBb,EAASwJ,EAAW,IAClE8V,ECNW,SAA4BlH,EAAQtY,EAAU0P,GAC3D,MAAM/E,OAAEA,EAAM9J,KAAEA,GAASyX,GACnBmB,cAAEA,EAAagG,QAAEA,EAAOC,aAAEA,GAAiB1f,EACjD,IAAe,IAAZyf,EAAkB,CACnB,MAAM9P,EAAWD,EAAM1L,MAAM,IAAIuD,OAAO+H,IAClCqQ,EAAchQ,EAAS6H,QAC7B,IAAItG,EAAgBvG,EAAOgV,GAC3B,GAAGhQ,EAASnO,OAAQ,CAClB,IAAoB,IAAjBke,QAA4CphB,IAAlB4S,EAA+B,OAC5D,OAAOA,EAAc/G,IAAIwF,EAAS7O,KAAK,KAAMd,EACnD,CACI,GAAGyZ,IACEA,EAA2B,aAC5BnB,EAAOhP,cACL,IAAI8O,GAAW,cAAe,CAC5BvX,OACAiJ,MAAOoH,EACPuH,OAAQ,CACN7I,IAAK+P,EACL7V,MAAOoH,IAERoH,IAGJmB,EAAc,qBAAqB,CACpC,MAAM1Q,EAAO,CAAC,cAAe4W,GAAa7e,KAAK,KACzC8e,EAAQ,CAAC/e,EAAM8e,GAAa7e,KAAK,KACvCwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAM+e,EACNnH,OAAQ,CACN3O,MAAOoH,IAERoH,GAEb,CAEI,OAAOpH,CACX,CACO,IAAe,IAAZuO,EAEN,OADsB9U,EAAOgV,YAGjC,CDrCkBE,CAAmBvH,EAAQpY,KAAYwJ,KAG5B,IAAtBA,EAAWlI,QAAgBT,EAAgBb,EAASwJ,EAAW,IAClE8V,EEXW,SAAoBlH,EAAQtY,GACzC,MAAMa,KAAEA,GAASyX,GACXmB,cAAEA,GAAkBzZ,EAY1B,OAXGyZ,GAAiBA,EAAmB,KACrCnB,EAAOhP,cACL,IAAI8O,GAAW,MAAO,CACpBvX,OACAiJ,MAAOwO,EAAOc,UACdX,OAAQ,CACN3O,MAAOwO,EAAOc,YAEfd,IAGAA,CACT,CFJkBwH,CAAWxH,EAAQpY,KAAYwJ,IAExC8V,CACT,EDVEzN,IIFa,SAAqBuG,EAAQtY,KAAa0J,GACvD,IAAIqW,EACJ,MAAM7f,EAAUF,EAShB,MAR4B,iBAAlB0J,EAAW,IACM,IAAtBA,EAAWlI,QAAgBT,EAAgBb,EAASwJ,EAAW,IAClEqW,ECLW,SAA4BzH,EAAQtY,EAAU0P,EAAOnP,GAClE,MAAML,EAAU1B,OAAOO,OAAO,CAAE,EAAEiB,GAC5Bmd,EAAe,MACf5D,EAAcrZ,EAAQqZ,aAAe,OACrC5O,OAAEA,EAAM9J,KAAEA,EAAIqS,OAAEA,GAAWoF,GAC3BkB,iBACJA,EAAgBC,cAAEA,EAAagG,QAAEA,EAAOzD,UACxCA,EAAS0D,aAAEA,EAAY/F,iBACvBA,EAAgBvW,OAAEA,GAChBlD,EACJ,IAAe,IAAZuf,EAAkB,CACnB,MAAM9P,EAAWD,EAAM1L,MAAM,IAAIuD,OAAO+H,IAClCqQ,EAAchQ,EAAS6H,QAC7B,IAAItG,EACJ,MAAMD,EAAsBjS,EAAOuB,GAC7Bqa,EAAY,EACd,CAAC/Z,EAAM8e,GAAa7e,KAAK,KACzB/C,OAAO4hB,GACX,GAAGhQ,EAASnO,OAAQ,CAClB,GAAGwa,QAAqC1d,IAAxBqM,EAAOgV,GAA4B,CACjD,IAAIhF,EAIAkB,EAH2BlB,EAAX,UAAjBzH,GAAQnK,KAAgCmK,EAAOvI,OAAO,GAAG5B,KAAKe,MACxC,WAAjBoJ,GAAQnK,KAAiCmK,EAAOvI,OAAOgV,GAAa5W,KAAKe,WAC9DxL,EAEmBud,EAAX,UAAxB5K,EAA8C,GACjB,WAAxBA,GAEHK,MAAMrT,OAAO0hB,IAFqC,CAAE,EAGrC,GAEpB,MAAMxB,EAAkBpd,EAAgB,CAAE,EAAEb,EAAS,CACnDW,KAAM+Z,EACN5F,OAAQsD,IAEVpH,EAAgB,IAAIoH,EAAOpQ,YAAY2T,EAAUlB,EAAWwD,EACpE,MAEQjN,EAAgBvG,EAAOgV,GAEzB,IAAoB,IAAjBD,QAA4CphB,IAAlB4S,EAA+B,OAM5D,MAL0B,UAAvBA,EAAcnI,KACZ,CAAC,OAAQ,WAAWuF,SAASiL,GAAgBrI,EAAcqI,MAAgBhZ,GACvE2Q,EAAcqI,GAAahZ,GAEL,WAAvB2Q,EAAcnI,MAAqBmI,EAAciM,GAAcxN,EAAS7O,KAAK,KAAMP,EAAQL,GAC5FgR,CACb,CACI,GAAGgC,GAAUsG,EAAkB,CAC7B,MAAMY,EAAkB9B,EAAOc,UACzBiB,EAAkBjX,GAAUmM,EAAmB6K,GAC/C4F,EAAkB9M,EAAO2E,iBAAiB8H,EAAapf,EAAQ8Z,EAAiBD,GACtF,GAAGT,EAAkB,CACnB,IAAI5Q,EAAMwR,EACPyF,EAAgBpN,OACjB7J,EAAO,gBACPwR,EAAe,CAAC,gBAAiBoF,GAAa7e,KAAK,OAGnDiI,EAAO,mBACPwR,EAAe,CAAC,mBAAoBoF,GAAa7e,KAAK,MAExD,IAAI,MAAM0Z,IAAc,CAACzR,EAAMwR,GAC7BjC,EAAOhP,cAAc,IAAImR,GAAeD,EAAYwF,EAAiB1H,GAE/E,CACM,IAAI0H,EAAgBpN,MAAS,MACnC,CACI,GAAGrS,GAA4B,iBAAXA,EAAqB,CACpCA,aAAkB+X,EAAOpQ,cAAe3H,EAASA,EAAO6Y,WAC3D,MAAMnI,EAAqBjS,EAAOuB,GAClC,IAAIoa,EACAkB,EAC2BlB,EAAX,UAAjBzH,GAAQnK,KAAgCmK,EAAOvI,OAAO,GAAG5B,KAAKe,MACxC,WAAjBoJ,GAAQnK,KAAiCmK,EAAOvI,OAAOgV,GAAa5W,KAAKe,WAC9DxL,EACmBud,EAAX,UAAxB5K,EAA8C,GACjB,WAAxBA,GAEHK,MAAMrT,OAAO0hB,IAFqC,CAAE,EAGrC,GAEpB,MAAMxB,EAAkBpd,EAAgB,CAAE,EAAEb,EAAS,CACnDW,KAAM+Z,EACN5F,OAAQsD,IAEVpH,EAAgB,IAAIoH,EAAOpQ,YAAY2T,EAAUlB,EAAWwD,GAC5DxT,EAAOgV,GAAezO,EACtBoH,EAAO0C,sBACmB,UAAvB9J,EAAcnI,KACZ,CAAC,OAAQ,WAAWuF,SAASiL,GAAgBrI,EAAcqI,MAAgBhZ,GACvE2Q,EAAcqI,GAAahZ,GAEL,WAAvB2Q,EAAcnI,MAAqBmI,EAAciM,GAAc5c,EAC7E,MAEM2Q,EAAgB3Q,EAChBoK,EAAOgV,GAAezO,EAGxB,MAAM+O,EAAiB/O,EAAckI,UACrC,GAAGK,EAAe,CAChB,MAAMwB,EAAiB,EACnB,CAACpa,EAAM8e,GAAa7e,KAAK,KACzB/C,OAAO4hB,GAaX,GAZGlG,EAA2B,aAC5BnB,EAAOhP,cACL,IAAI8O,GAAW,cAAe,CAC5BvX,KAAMoa,EACNnR,MAAOmW,EACPxH,OAAQ,CACN7I,IAAK+P,EACL7V,MAAOmW,IAER3H,IAGJmB,EAAc,oBAAqB,CACpC,MAAM1Q,EAAO,CAAC,cAAe4W,GAAa7e,KAAK,KAC/CwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAMoa,EACNnR,MAAOmW,EACPxH,OAAQ,CACN3O,MAAOmW,IAER3H,GAEb,CACA,CACI,OAAOpH,CACX,CACO,IAAe,IAAZuO,EAAmB,CACzB,IAAIE,EAAcjQ,EAClB,GAAGnP,GAA4B,iBAAXA,EAAqB,CACpCA,aAAkB+X,EAAOpQ,cAAe3H,EAASA,EAAO6Y,WAC3D,MAAMnI,EAAsBjS,EAAOuB,GACnC,IAAIoa,EACAkB,EACgB,UAAjB3I,GAAQnK,OACT4R,EAAYzH,EAAOvI,OAAO,GAAG5B,KAAKe,OAGlC6Q,EADkB,WAAjBzH,GAAQnK,KACGmK,EAAOvI,OAAOgV,GAAa5W,KAAKe,WAE3BxL,EACmBud,EAAX,UAAxB5K,EAA8C,GACjB,WAAxBA,GAEHK,MAAMrT,OAAO0hB,IAFqC,CAAE,EAGrC,GAEpB,MAGMxB,EAAkBpd,EAAgB,CAAE,EAAEb,EAAS,CACnDW,KAJgB,EACd,CAACA,EAAM8e,GAAa7e,KAAK,KACzB/C,OAAO4hB,GAGT3K,OAAQsD,IAEVpH,cAAgB,IAAIoH,EAAOpQ,YAAY2T,EAAUlB,EAAWwD,GAC5DxT,EAAOgV,GAAezO,cACtBoH,EAAO0C,sBACmB,UAAvB9J,cAAcnI,KACZ,CAAC,OAAQ,WAAWuF,SAASiL,GAAgBrI,cAAcqI,MAAgBhZ,GACvE2Q,cAAcqI,GAAahZ,GAEL,WAAvB2Q,cAAcnI,MAAqBmI,cAAciM,GAAc5c,EAC7E,MAEM2Q,cAAgB3Q,EAChBoK,EAAOgV,GAAezO,cAExB,GAAGuI,EAAe,CAChB,MAAMwB,EAAiB,EACnB,CAACpa,EAAM8e,GAAa7e,KAAK,KACzB/C,OAAO4hB,GAaX,GAZGlG,EAA2B,aAC5BnB,EAAOhP,cACL,IAAI8O,GAAW,cAAe,CAC5BvX,KAAMoa,EACNnR,MAAOmW,eACPxH,OAAQ,CACN7I,IAAK+P,EACL7V,MAAOmW,iBAER3H,IAGJmB,EAAc,oBAAqB,CACpC,MAAM1Q,EAAO,CAAC,cAAe4W,GAAa7e,KAAK,KAC/CwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAMoa,EACNnR,MAAOmW,eACPxH,OAAQ,CACN3O,MAAOmW,iBAER3H,GAEb,CACA,CACI,OAAOpH,aACX,CACA,CDtMkBgP,CAAmB5H,EAAQpY,KAAYwJ,KAG5B,IAAtBA,EAAWlI,QAAgBT,EAAgBb,EAASwJ,EAAW,IAClEqW,EEVW,SAAoBzH,EAAQtY,EAAUsQ,GACnD,MAAMzP,KAAEA,EAAIqS,OAAEA,GAAWoF,EACzB,IAAIkB,iBAAEA,EAAgBC,cAAEA,EAAazF,SAAEA,EAAQ2F,iBAAEA,GAAsB3Z,EAEvE,IAAI,MAAOuQ,EAAc7E,KAAmBlN,OAAOgC,QAAQ8P,GACzDgI,EAAOvG,IAAIxB,EAAc7E,EAAgBlN,OAAOO,OAAOiB,EAAU,CAC/DoD,OAAQkN,KAcZ,OAXGmJ,GAAiBA,EAAmB,KACrCnB,EAAOhP,cACL,IAAI8O,GAAW,MAAO,CACpBvX,OACAiJ,MAAOwO,EAAOc,UACdX,OAAQ,CACN3O,MAAOwO,EAAOc,YAEfd,IAGAA,CACT,CFXkB6H,CAAW7H,EAAQpY,KAAYwJ,IAExCqW,CACT,EJTEK,OOHa,SAAwB9H,EAAQtY,KAAa0J,GAC1D,IAAI2W,EACJ,MAAMngB,EAAUF,EAShB,MAR4B,iBAAlB0J,EAAW,IACM,IAAtBA,EAAWlI,QAAgBT,EAAgBb,EAASwJ,EAAW,IAClE2W,ECNW,SAA+B/H,EAAQtY,EAAU0P,GAC9D,MAAM/E,OAAEA,EAAM9J,KAAEA,EAAIqS,OAAEA,GAAWoF,GAC3BmB,cAAEA,EAAagG,QAAEA,EAAOC,aAAEA,EAAYlG,iBAAEA,EAAgBG,iBAAEA,GAAqB3Z,EACrF,IAAe,IAAZyf,EAoEE,IAAe,IAAZA,OAAH,CACH,MAAME,EAAcjQ,EACdwB,EAAgBvG,EAAOgV,GAE7B,GAAGzM,GAAUsG,EAAkB,CAC7B,MAAM8G,EAAwBhI,EAAOc,iBAC9BkH,EAAsBX,GAC7B,MAAMK,EAAkB9M,EAAOmB,SAASsL,EAAaW,EAAuBhI,EAAOc,WACnF,GAAGO,EAAkB,CACnB,IAAI5Q,EAAMwR,EAIPyF,EAAgBpN,OACjB7J,EAAO,gBACPwR,EAAe,CAAC,gBAAiBoF,GAAa7e,KAAK,OAGnDiI,EAAO,mBACPwR,EAAe,CAAC,mBAAoBoF,GAAa7e,KAAK,MAExD,IAAI,MAAM0Z,IAAc,CAACzR,EAAMwR,GAC7BjC,EAAOhP,cACL,IAAImR,GAAeD,EAAYwF,EAAiB1H,GAG5D,CACM,IAAI0H,EAAgBpN,MAAS,MACnC,CAMI,GAJG1B,aAAyBoH,EAAOpQ,aACjCgJ,EAAckP,OAAOpgB,UAEhB2K,EAAOgV,GACXlG,IACEA,EAA8B,gBAC/BnB,EAAOhP,cACL,IAAI8O,GAAW,iBAAkB,CAC/BvX,OACAiJ,MAAOoH,EACPuH,OAAQ,CACN7I,IAAK+P,EACL7V,MAAOoH,IAERoH,IAGJmB,EAAc,wBAAwB,CACvC,MAAM1Q,EAAO,CAAC,iBAAkB4W,GAAa7e,KAAK,KAC5C8e,EAAQ,CAAC/e,EAAM8e,GAAa7e,KAAK,KACvCwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAM+e,EACN9V,MAAOoH,EACPuH,OAAQ,CACN3O,MAAOoH,IAERoH,GAEb,CAGA,KAlIE,CACE,MAAM3I,EAAWD,EAAM1L,MAAM,IAAIuD,OAAO+H,IAClCqQ,EAAchQ,EAAS6H,QAC7B,IAAItG,EAAgBvG,EAAOgV,GAC3B,GAAGhQ,EAASnO,OAAQ,CAClB,IAAoB,IAAjBke,QAA4CphB,IAAlB4S,EAA+B,OAC5D,OAAOA,EAAckP,OAAOzQ,EAAS7O,KAAK,KAAMd,EACtD,CACI,GAAGkT,GAAUsG,EAAkB,CAC7B,MAAM8G,EAAwBhI,EAAOc,iBAC9BkH,EAAsBX,GAC7B,MAAMK,EAAkB9M,EAAOmB,SAASsL,EAAaW,EAAuB,CAAE,EAAEhI,EAAOc,WACvF,GAAGO,EAAkB,CACnB,IAAI5Q,EAAMwR,EACV,MAAMgG,EAAqB,EACvB,CAAC1f,EAAM8e,GAAa7e,KAAK,KACzB/C,OAAO4hB,GACRK,EAAgBpN,OACjB7J,EAAO,gBACPwR,EAAe,CAAC,gBAAiBoF,GAAa7e,KAAK,OAGnDiI,EAAO,mBACPwR,EAAe,CAAC,mBAAoBoF,GAAa7e,KAAK,MAExD,IAAI,MAAM0Z,IAAc,CAACzR,EAAMwR,GAC7BjC,EAAOhP,cACL,IAAImR,GAAeD,EAAYhc,OAAOO,OAAOihB,EAAiB,CAC5Dnf,KAAM0f,IACJjI,GAGhB,CACM,IAAI0H,EAAgBpN,MAAS,MACnC,CAKI,GAJG1B,GAA0C,iBAAlBA,GACzBA,EAAckP,OAAOpgB,UAEhB2K,EAAOgV,GACXlG,IACEA,EAA8B,gBAC/BnB,EAAOhP,cACL,IAAI8O,GAAW,iBAAkB,CAC/BvX,OACAiJ,MAAOoH,EACPuH,OAAQ,CACN7I,IAAK+P,EACL7V,MAAOoH,IAERoH,IAGJmB,EAAc,wBAAwB,CACvC,MAAM1Q,EAAO,CAAC,iBAAkB4W,GAAa7e,KAAK,KAC5C8e,EAAQ,CAAC/e,EAAM8e,GAAa7e,KAAK,KACvCwX,EAAOhP,cACL,IAAI8O,GAAWrP,EAAM,CACnBlI,KAAM+e,EACN9V,MAAOoH,EACPuH,OAAQ,CACN3O,MAAOoH,IAERoH,GAEb,CAkEA,CACA,CDhIqBkI,CAAsBlI,EAAQpY,KAAYwJ,KAGlC,IAAtBA,EAAWlI,QAAgBT,EAAgBb,EAASwJ,EAAW,IAClE2W,EEXW,SAAuB/H,EAAQtY,GAC5C,MAAM2K,OAAEA,GAAW2N,EACnB,IAAI,MAAOmI,EAAoBC,KAAyBliB,OAAOgC,QAAQmK,GACrE2N,EAAO8H,OAAOK,EAAoBzgB,GAEpC,MAAMa,KAAEA,GAASyX,GACXmB,cAAEA,GAAkBzZ,EAW1B,OAVGyZ,GAAiBA,EAAsB,QACxCnB,EAAOhP,cACL,IAAI8O,GAAW,SAAU,CACvBvX,OACA4X,OAAQ,CACN3O,MAAOwO,EAAOc,YAEfd,IAGAA,CACT,CFPqBqI,CAAcrI,EAAQpY,KAAYwJ,IAE9C2W,CACT,GGXA,MAAMO,GAAWpiB,OAAO4Q,OAAO,CAC7BzQ,OAAQ,CAAC,CACPiQ,KAAM,CAAC,WACPiS,iBAAkB,SAASC,EAAaxI,GACtC,MAAO,CAAExO,MAAO,WAAqB,OAAOwO,EAAOzG,MAAM,CAAE9I,KAAM,UAAa,EAC/E,GACA,CACD6F,KAAM,CAAC,YACPiS,iBAAkB,SAASC,EAAaxI,GACtC,MAAO,CAAExO,MAAO,SAAkBiX,EAAiB,CAAA,GACjD,MAAMC,OAAwC1iB,IAA5ByiB,EAAeC,SAC7BD,EAAeC,SAAW,KACxBC,OAAkC3iB,IAAzByiB,EAAeE,MAC1BF,EAAeE,MAAQ,EAC3B,OAAO3I,EAAOzG,MAAM,CAAE9I,KAAM,SAAUiY,WAAUC,SACjD,EACF,GACA,CACDrS,KAAM,CACJ,UAAW,cAAe,4BAC1B,2BAA4B,sBACG,UAAW,SAAU,KACpD,iBAAkB,eAAgB,WAAY,WAC9C,OAAQ,oBAAqB,UAE/BiS,iBAAkB,SAASC,EAAaxI,GACtC,MAAO,CAAExO,MAAOtL,OAAOsiB,GAAa1gB,KAAK,KAAMkY,EAAOc,WACvD,GACA,CACDxK,KAAM,CAAC,uBAAwB,kBAC/BiS,iBAAkB,SAASC,EAAaxI,GACtC,MAAO,CAAExO,MAAO,IAAMwO,EAAOzG,MAAM,CAAE9I,KAAM,WAAY+X,GACxD,GACA,CACD/X,KAAM,WACN6F,KAAMpQ,OAAOoQ,KAAK0K,IAClBuH,iBAAkB,SAASC,EAAaxI,EAAQtY,GAC9C,MAAO,CAAE8J,MAAOwP,GAAewH,GAAa1gB,KAAK,KAAMkY,EAAQtY,GACrE,IAEEpB,MAAO,CAAC,CACNgQ,KAAM,CAAC,UACPiS,iBAAkB,SAASK,EAAe5I,EAAQtY,GAChD,MAAO,CACLmK,IAAG,IAAYmO,EAAO3N,OAAOnJ,OAC7B,GAAAuQ,CAAIrG,GAAkB4M,EAAO3N,OAAOnJ,OAASkK,CAAgB,EAErE,GACK,CACDkD,KAAM,CACJ,OAAQ,YAAa,UAAW,MAElCiS,iBAAkB,SAASC,EAAaxI,GACtC,MAAO,CAAExO,MAAOjL,MAAMiiB,GACvB,GACA,CACDlS,KAAM,CACJ,KAAM,QAAS,SAAU,OAAQ,YAAa,WAC9C,gBAAiB,OAAQ,UAAW,UAAW,WAC/C,UAAW,OAAQ,cAAe,MAAO,SAAU,cACnD,QAAS,OAAQ,OAAQ,aAAe,WAAY,YACpD,QAEFiS,iBAAkB,SAASC,EAAaxI,GACtC,MAAO,CAAExO,MAAOjL,MAAMK,UAAU4hB,GAAa1gB,KAAK,KAAMkY,GAC9D,GACK,CACDvP,KAAM,WACN6F,KAAMpQ,OAAOoQ,KAAKsN,IAClB2E,iBAAkB,SAASC,EAAaxI,EAAQtY,GAC9C,MAAO,CAAE8J,MAAOoS,GAAc4E,GAAa1gB,KAAK,KAAMkY,EAAQtY,GACpE,IAEEmhB,IAAK,CAAC,CACJpY,KAAM,WACN6F,KAAMpQ,OAAOoQ,KAAK2Q,IAClBsB,iBAAkB,SAASC,EAAaxI,EAAQtY,GAC9C,MAAO,CAAE8J,MAAOyV,GAAYuB,GAAa1gB,KAAK,KAAMkY,EAAQtY,GAClE,MCjFA,MAAMohB,GAA6B5iB,OAAO4Q,OACxC,CAAC,OAAQ,YAELiS,GAA8B7iB,OAAO4Q,OACzC,CAAC,SAAU,mBAAoB,QAGlB,SAASkS,GAAOhJ,EAAQhI,EAAatQ,GAClD,MAAM+I,KAAEA,GAASuP,GACX6E,aAAEA,EAAY5D,YAAEA,GAAgCvZ,EAOtD,MANY,UAAT+I,GAAoBqY,GAA2B9S,SAASiL,GACzDjB,EAAOiB,MAAgBjJ,GAER,WAATvH,GAAqBsY,GAA4B/S,SAAS6O,IAChE7E,EAAO6E,GAAc7M,GAEhBgI,CACT,CCTe,MAAMiJ,WAAcvV,EACjC,WAAA9D,CAAYoI,EAAc,CAAE,EAAEwD,EAAU,KAAM9T,EAAW,IACvDyO,MAAM,CAAE3O,kBAAmB,CAAEJ,UAAW,CAAC,CAACE,EAASC,SAChCvB,IAAduB,EAAkCD,EAAQ+K,OAC/B/K,EAAQuK,IAAItK,OAEzByQ,aAAuBiR,KAASjR,EAAcA,EAAY8I,WAC7D,IAAIpE,EAAS,KACTnU,EAAO,KACX,IACErC,OAAO+L,eAAelC,KAAM,QAAS,CAAEyB,MAAO,SAAS0X,GACrD,MAAMC,EAAcD,EAAOxM,OACrB0M,EAAYF,EAAO3gB,KACnB8gB,EAAW,EAAcD,EAAU1d,MAAM,KAAKiC,MAAQyb,EACzD1M,GAAUA,EAAO4M,QAAQD,GAC5B3M,EAASyM,EACT5gB,EAAO6gB,CACf,GACA,CACI,MAAM9W,GAAQC,QAAQC,MAAMF,EAAK,CACjC,IACEpM,OAAO+L,eAAelC,KAAM,UAAW,CAAEyB,MAAO,SAAS+X,GACnCA,EAAShhB,YACtBwH,KAAKxI,UACpB,GACA,CACI,MAAM+K,GAAQC,QAAQC,MAAMF,EAAK,CACjCpM,OAAOqL,iBAAiBxB,KAAM,CAC5BnI,QAAW,CAAEgK,cAAc,EAAM,GAAAC,GAC/B,MAAMjK,ECrCC,CAACF,GACEe,EAAgB,CAC9B+gB,UAAU,EACVC,UAAU,EACVpQ,cAAc,EACd9Q,KAAM,KACNmU,OAAQ,KACR5I,cAAc,EACdoN,kBAAkB,EAClBG,iBAAkB,CAChB,sBAAsB,EACtBiC,eAAiB,EACjB,yBAAyB,EACzBoG,kBAAoB,GAEtBvC,SAAS,EACTC,cAAc,EACdvC,aAAc,MACd5D,YAAa,MACb3Q,QAAS,CACPuY,IAAK,CACHhX,IAAK,CACHsP,cAAe,CACbtP,KAAO,EACPqV,aAAe,EACf,oBAAoB,IAGxBzN,IAAK,CACHiK,WAAW,EACXvC,cAAe,CACb1H,KAAO,EACPgO,aAAe,EACf,oBAAoB,IAGxBK,OAAQ,CACN3G,cAAe,CACb2G,QAAU,EACVC,gBAAkB,EAClB,uBAAuB,KAI7BzhB,MAAO,CACLoM,OAAQ,CACNyO,cAAe,CACb,wBAAwB,EACxBwI,eAAiB,EACjBjX,QAAU,IAGdyR,WAAY,CACVhD,cAAe,CACb,4BAA4B,EAC5ByI,mBAAqB,EACrBzF,YAAc,IAGlBS,KAAM,CACJE,UAAU,EACV3D,cAAe,CACb,sBAAsB,EACtB0I,aAAe,EACfjF,MAAQ,IAGZjX,IAAK,CACHwT,cAAe,CAAExT,KAAO,IAE1BxF,KAAM,CACJgZ,cAAe,CACb,sBAAsB,EACtB2I,aAAe,EACf3hB,MAAQ,IAGZ2d,QAAS,CACP3E,cAAe,CAAE2E,SAAW,IAE9B5G,MAAO,CACLiC,cAAe,CAAEjC,OAAS,IAE5BjJ,OAAQ,CACNkL,cAAe,CACb,8BAA8B,EAC9B4I,qBAAuB,EACvB,2BAA2B,EAC3BC,kBAAoB,EACpB/T,QAAU,IAGd3C,QAAS,CACP6N,cAAe,CACb,yBAAyB,EACzB8I,gBAAkB,EAClB3W,SAAW,KAIjBjN,OAAQ,CACNI,OAAQ,CACN2a,YAAY,EACZD,cAAe,CACb,6BAA6B,EAC7B+I,sBAAwB,EACxBC,cAAgB,EAChB1jB,QAAU,IAGd8K,iBAAkB,CAChB0R,gBAAgB,EAChB9B,cAAe,CAAE5P,kBAAoB,IAEvCU,eAAgB,CACdgR,gBAAgB,EAChB9B,cAAe,CACblP,gBAAkB,EAClB,uBAAuB,IAG3B6E,OAAQ,CACN4M,WAAW,EACXvC,cAAe,CACbiJ,gBAAkB,EAClBtT,QAAU,IAGd6M,KAAM,CACJD,WAAW,EACXvC,cAAe,CACbkJ,cAAgB,EAChB1G,MAAQ,OAKfjc,GDpGmB6Q,CAAQ7Q,GAKxB,GAJGE,EAAQiM,SACT9D,KAAKkE,UAAUrM,EAAQiM,eAChBjM,EAAQiM,QAEdjM,EAAQkM,aAAc,CACvB,MAAMwW,SAA4B1iB,EAAQkM,aAChB,YAAvBwW,EAAoCva,KAAK+D,eACb,WAAvBwW,GAAmCva,KAAK+D,aAAalM,EAAQkM,aAC/E,CAEQ,OADA5N,OAAO+L,eAAelC,KAAM,UAAW,CAAEyB,MAAO5J,IACzCA,CACf,GACM8U,OAAU,CAAE7K,IAAG,IAAY6K,GAC3BnU,KAAQ,CAAEsJ,IAAG,IAAYtJ,GACzB+O,IAAO,CAAEzF,IAAG,IAAY,EAAStJ,EAAKoF,MAAQpF,GAC9C8J,OAAU,CAAET,cAAc,EAAM,GAAAC,GAC9B,MAAMQ,EAAS4E,EAAmBe,GAElC,OADA9R,OAAO+L,eAAelC,KAAM,SAAU,CAAEyB,MAAOa,IACxCA,CACf,GACM5B,KAAQ,CAAEmB,cAAc,EAAM,GAAAC,GAC5B,MAAMpB,EAAO/J,EAAOqJ,KAAKsC,QAEzB,OADAnM,OAAO+L,eAAelC,KAAM,OAAQ,CAAEyB,MAAOf,IACtCA,CACf,GACMmK,OAAU,CAAEhJ,cAAc,EAAM,GAAAC,GAC9B,MAAM0Y,EAAe7jB,EAAO8U,GAC5B,IAAIZ,EAKJ,MAJG,CAAC,YAAa,QAAQ5E,SAASuU,GAAiB3P,EAAS,KACpDY,aAAmBiB,GAAU7B,EAASY,EACtC,CAAC,QAAS,UAAUxF,SAASuU,KAAiB3P,EAAS,IAAI6B,GAAOjB,IAC1EtV,OAAO+L,eAAelC,KAAM,SAAU,CAAEyB,MAAOoJ,IACxCA,CACf,KAEI7K,KAAKya,MAAM,CACT9N,OAAQ3M,KAAKnI,QAAQ8U,OACrBnU,KAAMwH,KAAKnI,QAAQW,OAElB8Q,cAAgBtJ,KAAKnI,QAAQyR,cAC9BnT,OAAOqL,iBAAiBxB,KAAO,CAC7BsJ,aAAgB,CAAEzH,cAAc,EAAM,GAAAC,GACpC,IAAI4Y,EACAliB,EAAO,CAACmiB,OAAOC,SAASC,UAK5B,OAJG7a,KAAKxH,MAAQA,EAAKJ,KAAK4H,KAAKxH,MAC/BA,EAAOA,EAAKC,KAAK,IACjBiiB,EAAgB,IAAItR,EAAa5Q,GACjCrC,OAAO+L,eAAelC,KAAM,eAAgB,CAAEyB,MAAOiZ,IAC9CA,CACjB,GACQI,KAAQ,CAAErZ,MAAO,WACf,OAAOzB,KAAKsJ,aAAaI,IAAI1J,KAAK+Q,UAC5C,GACQgK,KAAQ,CAAEtZ,MAAO,WACf,OAAOzB,KAAKsJ,aAAaxH,KACnC,GACQkZ,OAAU,CAAEvZ,MAAO,WACjB,OAAOzB,KAAKsJ,aAAaO,QACnC,KFZe,SAAiBoG,GAE9B,IAAI,MAAOgL,EAAoBC,KAAqB/kB,OAAOgC,QAAQogB,IAEjE,IAAI,MAAM4C,KAAkBD,EAAkB,CAC5C,MAAM3U,KAAEA,EAAIiS,iBAAEA,EAAgB9X,KAAEA,GAASya,EACzC,IAAI,MAAM1C,KAAelS,EACvB,GAA0B,QAAvB0U,GAAyC,aAATva,EAAqB,CACtD,MAAM0a,EAAqBC,gBACzBpL,EAAOpY,QAAQ0I,QAAQ0a,GAAoBxC,IAEvC6C,EAAgBnlB,OAAOO,OAAO,CAAA,EAAIuZ,EAAOpY,QAASujB,UACjDE,EAAclK,cACrBkK,EAAclK,cAAgBgK,EAAmBhK,cACjDjb,OAAO+L,eACL+N,EAAQwI,EAAaD,EAAiBC,EAAaxI,EAAQqL,GAEvE,MAEUnlB,OAAO+L,eACL+N,EAAQwI,EAAaD,EAAiBC,EAAcxI,GAIhE,CAGA,CEZIsL,CAAQvb,MACLA,KAAKnI,QAAQ4hB,SACdR,GAAOjZ,KAAMA,KAAK+a,QAAU9S,EAAajI,KAAKnI,SAG9CohB,GAAOjZ,KAAMiI,EAAajI,KAAKnI,QAErC,CACE,mBAAA8a,GACE,IAAIzC,EAAQlQ,KACZ,KAAMkQ,GACJA,EAAM7L,eAAe,CAAE9E,QAAQ,IAC/B2Q,EAAQA,EAAMvD,OAEhB,OAAO3M,IACX,CACE,KAAAwJ,CAAM1J,EAAY,CAAEY,KAAM,SAAUiY,SAAU,KAAMC,MAAO,IACzD,IAAI4C,EAAYtU,EAAmBlH,KAAKU,MACxC,IAAI,MACF+a,EAAyB9S,KACtBxS,OAAOgC,QACVhC,OAAOoS,0BAA0BvI,KAAKsC,SACtC,CACA,IAAIkC,WAAEA,EAAU/C,MAAEA,EAAKgD,SAAEA,EAAQ5C,aAAEA,GAAiB8G,EACjDlH,aAAiByX,GAClB/iB,OAAO+L,eAAesZ,EAAWC,EAAyB,CACxDjX,aAAY/C,MAAOA,EAAMsP,UAAWtM,WAAU5C,iBAIhD1L,OAAO+L,eAAesZ,EAAWC,EAAyB,CACxDjX,aAAY/C,QAAOgD,WAAU5C,gBAGvC,CACI,IAAInB,KAAEA,EAAIiY,SAAEA,EAAQC,MAAEA,GAAU9Y,EAChC,MAAY,WAATY,EAA4B8a,EACd,WAAT9a,EAA4B6I,KAAKK,UAAU4R,EAAW7C,EAAUC,QACjE,CACX"}