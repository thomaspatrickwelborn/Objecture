{"version":3,"file":"core-plex.min.js","sources":["../../Recourse/distributement/recourse.js","../development/accessors/index.js","../node_modules/outmatch/build/index.es.mjs","../development/event-definition/index.js","../development/event-definition/settings/index.js","../development/index.js","../development/settings/index.js","../development/expand-events/index.js"],"sourcesContent":["const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives);\nconst PrimitiveValues = Object.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nconst ObjectKeys = Object.keys(Objects);\nconst ObjectValues = Object.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nconst TypeKeys = Object.keys(Types);\nconst TypeValues = Object.values(Types);\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ObjectKeys: ObjectKeys,\n  ObjectValues: ObjectValues,\n  Objects: Objects,\n  PrimitiveKeys: PrimitiveKeys,\n  PrimitiveValues: PrimitiveValues,\n  Primitives: Primitives,\n  TypeKeys: TypeKeys,\n  TypeMethods: TypeMethods,\n  TypeValues: TypeValues,\n  Types: Types\n});\n\nvar regularExpressions = {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n};\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction subpaths($path) {\n  return $path.split(\n    new RegExp(regularExpressions.quotationEscape)\n  )\n}\nfunction keypaths($path) {\n  const _subpaths = subpaths($path);\n  _subpaths.pop();\n  return _subpaths\n}\nfunction key($path) { return subpaths($path).pop() }\nfunction root($path) { return subpaths($path).shift() }\nfunction typeofRoot($path) { return (\n  Number(root($path))\n) ? 'array' : 'object' }\nfunction parse($path) {\n  return {\n    subpaths: subpaths($path),\n    keypaths: keypaths($path),\n    key: key($path),\n    root: root($path),\n    typeofRoot: typeofRoot($path),\n  }\n}\n\nfunction typedObjectLiteral($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf($value);\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase();\n    if(value === 'object') { _typedObjectLiteral = {}; }\n    else if(value === 'array') { _typedObjectLiteral = []; }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  }\n  return _typedObjectLiteral\n}\n\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  let subtarget = $source;\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath]; }\n  return subtarget[key]\n}\nfunction set($path, $source) {\n  const {\n    keypaths, key, typeofRoot\n  } = parse($path);\n  const target = typedObjectLiteral(typeofRoot);\n  let subtarget = target;\n  for(const $subpath of keypaths) {\n    if(Number($subpath)) { subtarget[$subpath] = []; }\n    else { subtarget[$subpath] = {}; }\n    subtarget = subtarget[$subpath];\n  }\n  subtarget[key] = $source;\n  return target\n}\n\nconst ValidPropertyTypes = ['string', 'function'];\nfunction expandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !ValidPropertyTypes.includes(typeOfProperty) ||\n    !ObjectKeys.includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    const sourceValue = (\n      ObjectKeys.includes(typeOf($sourceValue))\n    ) ? expandTree($sourceValue, $property) : $sourceValue;\n    if(typeOfProperty === ValidPropertyTypes[0]) {\n      target[$sourceKey] = set($property, sourceValue);\n    }\n    else if(typeOfProperty === ValidPropertyTypes[1]) {\n      target[$sourceKey] = $property(sourceValue);\n    }\n  }\n  return target\n}\n\nfunction impandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = get($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nvar isArrayLike = ($source) => {\n  let isArrayLike;\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'array') { isArrayLike = true; }\n  else if(\n    typeOfSource === 'object' &&\n    Number.isInteger($source.length) && $source.length >= 0\n  ) {\n    iterateSourceKeys: \n    for(const $sourceKey of Object.keys(\n      Object.getOwnPropertyDescriptors($source)\n    )) {\n      if($sourceKey === 'length') { continue iterateSourceKeys }\n      isArrayLike = !isNaN($sourceKey);\n      if(!isArrayLike) { break iterateSourceKeys }\n    }\n  }\n  else { isArrayLike = false; }\n  return isArrayLike\n};\n\nconst defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar Accessors = {\n  default: defaultAccessor};\n\nconst Options = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options, $options);\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object);\n    const object = accessor($object);\n    if(!object) continue iterateAccessors\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        $value !== object\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction recursiveAssign($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction recursiveAssignConcat($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if( \n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssignConcat($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else if(\n        typeOfTargetPropertyValue === 'array' &&\n        typeOfSourcePropertyValue === 'array'\n      ) {\n        $target[$sourcePropertyKey] = $target[$sourcePropertyKey].concat($sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction recursiveGetOwnPropertyDescriptor($properties, $propertyKey) {\n  const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey);\n  if(['array', 'object'].includes(typeOf(propertyDescriptor.value))) {\n    propertyDescriptor.value = recursiveGetOwnPropertyDescriptors(propertyDescriptor.value);\n  }\n  return propertyDescriptor\n}\n\nfunction recursiveGetOwnPropertyDescriptors($properties) {\n  const propertyDescriptors = {};\n  for(const $propertyKey of Object.keys(Object.getOwnPropertyDescriptors($properties))) {\n    propertyDescriptors[$propertyKey] = recursiveGetOwnPropertyDescriptor($properties, $propertyKey);\n  }\n  return propertyDescriptors\n}\n\nfunction recursiveDefineProperty($target, $propertyKey, $propertyDescriptor) {\n  const typeOfPropertyValue = typeOf($propertyDescriptor.value);\n  if(['array', 'object'].includes(typeOfPropertyValue)) {\n    const propertyValue = isArrayLike(Object.defineProperties(\n      typedObjectLiteral(typeOfPropertyValue), $propertyDescriptor.value\n    )) ? [] : {};\n    $propertyDescriptor.value = recursiveDefineProperties(propertyValue, $propertyDescriptor.value);\n  }\n  Object.defineProperty($target, $propertyKey, $propertyDescriptor);\n  return $target\n}\n\nfunction recursiveDefineProperties($target, $propertyDescriptors) {\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    recursiveDefineProperty($target, $propertyKey, $propertyDescriptor);\n  }\n  return $target\n}\n\nfunction recursiveFreeze($target) {\n  for(const [$propertyKey, $propertyValue] of Object.entries($target)) {\n    if($propertyValue && typeof $propertyValue === 'object') {\n      recursiveFreeze($propertyValue);\n    }\n  }\n  return Object.freeze($target)\n}\n\nexport { expandTree, impandTree, isArrayLike, propertyDirectory, recursiveAssign, recursiveAssignConcat, recursiveDefineProperties, recursiveDefineProperty, recursiveFreeze, recursiveGetOwnPropertyDescriptor, recursiveGetOwnPropertyDescriptors, regularExpressions, typeOf, typedObjectLiteral, index as variables };\n//# sourceMappingURL=recourse.js.map\n","const defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n}\nconst getAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target.get($property) }\n}\nexport default {\n  default: defaultAccessor,\n  get: getAccessor,\n}","function handleNoCommaBraces(span) {\n    if (span.length < 3) {\n        return \"{\" + span + \"}\";\n    }\n    var separatorI = -1;\n    for (var i = 2; i < span.length; i++) {\n        if (span[i] === '.' && span[i - 1] === '.' && (i < 2 || span[i - 2] !== '\\\\')) {\n            if (separatorI > -1) {\n                return \"{\" + span + \"}\";\n            }\n            separatorI = i - 1;\n        }\n    }\n    if (separatorI > -1) {\n        var rangeStart = span.substr(0, separatorI);\n        var rangeEnd = span.substr(separatorI + 2);\n        if (rangeStart.length > 0 && rangeEnd.length > 0) {\n            return \"[\" + span.substr(0, separatorI) + \"-\" + span.substr(separatorI + 2) + \"]\";\n        }\n    }\n    return \"{\" + span + \"}\";\n}\nfunction expand(pattern) {\n    if (typeof pattern !== 'string') {\n        throw new TypeError(\"A pattern must be a string, but \" + typeof pattern + \" given\");\n    }\n    var scanning = false;\n    var openingBraces = 0;\n    var closingBraces = 0;\n    var handledUntil = -1;\n    var results = [''];\n    var alternatives = [];\n    var span;\n    for (var i = 0; i < pattern.length; i++) {\n        var char = pattern[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '{') {\n            if (scanning) {\n                openingBraces++;\n            }\n            else if (i > handledUntil && !openingBraces) {\n                span = pattern.substring(handledUntil + 1, i);\n                for (var j = 0; j < results.length; j++) {\n                    results[j] += span;\n                }\n                alternatives = [];\n                handledUntil = i;\n                scanning = true;\n                openingBraces++;\n            }\n            else {\n                openingBraces--;\n            }\n        }\n        else if (char === '}') {\n            if (scanning) {\n                closingBraces++;\n            }\n            else if (closingBraces === 1) {\n                span = pattern.substring(handledUntil + 1, i);\n                if (alternatives.length > 0) {\n                    var newResults = [];\n                    alternatives.push(expand(span));\n                    for (var j = 0; j < results.length; j++) {\n                        for (var k = 0; k < alternatives.length; k++) {\n                            for (var l = 0; l < alternatives[k].length; l++) {\n                                newResults.push(results[j] + alternatives[k][l]);\n                            }\n                        }\n                    }\n                    results = newResults;\n                }\n                else {\n                    span = handleNoCommaBraces(span);\n                    for (var j = 0; j < results.length; j++) {\n                        results[j] += span;\n                    }\n                }\n                handledUntil = i;\n                closingBraces--;\n            }\n            else {\n                closingBraces--;\n            }\n        }\n        else if (!scanning && char === ',' && closingBraces - openingBraces === 1) {\n            span = pattern.substring(handledUntil + 1, i);\n            alternatives.push(expand(span));\n            handledUntil = i;\n        }\n        if (scanning && (closingBraces === openingBraces || i === pattern.length - 1)) {\n            scanning = false;\n            i = handledUntil - 1;\n        }\n    }\n    if (handledUntil === -1) {\n        return [pattern];\n    }\n    var unhandledFrom = pattern[handledUntil] === '{' ? handledUntil : handledUntil + 1;\n    if (unhandledFrom < pattern.length) {\n        span = pattern.substr(unhandledFrom);\n        for (var j = 0; j < results.length; j++) {\n            results[j] += span;\n        }\n    }\n    return results;\n}\n\nfunction negate(pattern, options) {\n    var supportNegation = options['!'] !== false;\n    var supportParens = options['()'] !== false;\n    var isNegated = false;\n    var i;\n    if (supportNegation) {\n        for (i = 0; i < pattern.length && pattern[i] === '!'; i++) {\n            if (supportParens && pattern[i + 1] === '(') {\n                i--;\n                break;\n            }\n            isNegated = !isNegated;\n        }\n        if (i > 0) {\n            pattern = pattern.substr(i);\n        }\n    }\n    return { pattern: pattern, isNegated: isNegated };\n}\n\nfunction escapeRegExpChar(char) { if (char === '-' ||\n    char === '^' ||\n    char === '$' ||\n    char === '+' ||\n    char === '.' ||\n    char === '(' ||\n    char === ')' ||\n    char === '|' ||\n    char === '[' ||\n    char === ']' ||\n    char === '{' ||\n    char === '}' ||\n    char === '*' ||\n    char === '?' ||\n    char === '\\\\') {\n    return \"\\\\\" + char;\n}\nelse {\n    return char;\n} }\nfunction escapeRegExpString(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += escapeRegExpChar(str[i]);\n    }\n    return result;\n}\n\nfunction Pattern(source, options, excludeDot) {\n    var separator = typeof options.separator === 'undefined' ? true : options.separator;\n    var separatorSplitter = '';\n    var separatorMatcher = '';\n    var wildcard = '.';\n    if (separator === true) {\n        separatorSplitter = '/';\n        separatorMatcher = '[/\\\\\\\\]';\n        wildcard = '[^/\\\\\\\\]';\n    }\n    else if (separator) {\n        separatorSplitter = separator;\n        separatorMatcher = escapeRegExpString(separatorSplitter);\n        if (separatorMatcher.length > 1) {\n            separatorMatcher = \"(?:\" + separatorMatcher + \")\";\n            wildcard = \"((?!\" + separatorMatcher + \").)\";\n        }\n        else {\n            wildcard = \"[^\" + separatorMatcher + \"]\";\n        }\n    }\n    else {\n        wildcard = '.';\n    }\n    var requiredSeparator = separator ? separatorMatcher + \"+?\" : '';\n    var optionalSeparator = separator ? separatorMatcher + \"*?\" : '';\n    var segments = separator ? source.split(separatorSplitter) : [source];\n    var support = {\n        qMark: options['?'] !== false,\n        star: options['*'] !== false,\n        globstar: separator && options['**'] !== false,\n        brackets: options['[]'] !== false,\n        extglobs: options['()'] !== false,\n        excludeDot: excludeDot && options.excludeDot !== false,\n    };\n    return {\n        source: source,\n        segments: segments,\n        options: options,\n        separator: separator,\n        separatorSplitter: separatorSplitter,\n        separatorMatcher: separatorMatcher,\n        optionalSeparator: optionalSeparator,\n        requiredSeparator: requiredSeparator,\n        wildcard: wildcard,\n        support: support,\n    };\n}\nfunction Segment(source, pattern, isFirst, isLast) { return {\n    source: source,\n    isFirst: isFirst,\n    isLast: isLast,\n    end: source.length - 1,\n}; }\nfunction Result() {\nreturn {\n    match: '',\n    unmatch: '',\n    useUnmatch: false,\n}; }\nfunction State(pattern, segment, result) { return {\n    pattern: pattern,\n    segment: segment,\n    result: result,\n    openingBracket: segment.end + 1,\n    closingBracket: -1,\n    openingParens: 0,\n    closingParens: 0,\n    parensHandledUntil: -1,\n    extglobModifiers: [],\n    scanningForParens: false,\n    escapeChar: false,\n    addToMatch: true,\n    addToUnmatch: pattern.support.extglobs,\n    dotHandled: false,\n    i: -1,\n    char: '',\n    nextChar: '',\n}; }\n\nvar EXCLUDE_DOT_PATTERN = '(?!\\\\.)';\nfunction add(state, addition, excludeDot) {\n    if (state.addToUnmatch) {\n        state.result.unmatch += addition;\n    }\n    if (state.addToMatch) {\n        if (excludeDot && !state.dotHandled) {\n            addition = EXCLUDE_DOT_PATTERN + addition;\n        }\n        state.dotHandled = true;\n        state.result.match += addition;\n    }\n    return state.result;\n}\nfunction convertSegment(pattern, segment, result) {\n    var support = pattern.support;\n    var state = State(pattern, segment, result);\n    var separatorMatcher = segment.isLast\n        ? pattern.optionalSeparator\n        : pattern.requiredSeparator;\n    if (!support.excludeDot) {\n        state.dotHandled = true;\n    }\n    if (segment.end === -1) {\n        return segment.isLast && !segment.isFirst ? result : add(state, separatorMatcher);\n    }\n    if (support.globstar && segment.source === '**') {\n        var prefix = !state.dotHandled ? EXCLUDE_DOT_PATTERN : '';\n        var globstarSegment = prefix + pattern.wildcard + \"*?\" + separatorMatcher;\n        return add(state, \"(?:\" + globstarSegment + \")*?\");\n    }\n    while (++state.i <= segment.end) {\n        state.char = state.segment.source[state.i];\n        state.nextChar = state.i < segment.end ? segment.source[state.i + 1] : '';\n        if (state.char === '\\\\') {\n            if (state.i < state.segment.end) {\n                state.escapeChar = true;\n                continue;\n            }\n            else {\n                state.char = '';\n            }\n        }\n        var pattern = state.pattern, segment = state.segment, char = state.char, i = state.i;\n        if (pattern.support.brackets && !state.scanningForParens) {\n            if (i > state.openingBracket && i <= state.closingBracket) {\n                if (state.escapeChar) {\n                    add(state, escapeRegExpChar(char));\n                }\n                else if (i === state.closingBracket) {\n                    add(state, ']');\n                    state.openingBracket = segment.source.length;\n                }\n                else if (char === '-' && i === state.closingBracket - 1) {\n                    add(state, '\\\\-');\n                }\n                else if (char === '!' && i === state.openingBracket + 1) {\n                    add(state, '^');\n                }\n                else if (char === ']') {\n                    add(state, '\\\\]');\n                }\n                else {\n                    add(state, char);\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (i > state.openingBracket) {\n                if (char === ']' &&\n                    !state.escapeChar &&\n                    i > state.openingBracket + 1 &&\n                    i > state.closingBracket) {\n                    state.closingBracket = i;\n                    state.i = state.openingBracket;\n                    if (pattern.separator) {\n                        add(state, \"(?!\" + pattern.separatorMatcher + \")[\", true);\n                    }\n                    else {\n                        add(state, '[', true);\n                    }\n                }\n                else if (i === segment.end) {\n                    add(state, '\\\\[');\n                    state.i = state.openingBracket;\n                    state.openingBracket = segment.source.length;\n                    state.closingBracket = segment.source.length;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (char === '[' &&\n                !state.escapeChar &&\n                i > state.closingBracket &&\n                i < segment.end) {\n                state.openingBracket = i;\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        if (state.pattern.support.extglobs) {\n            var extglobModifiers = state.extglobModifiers, char = state.char, nextChar = state.nextChar, i = state.i;\n            if (nextChar === '(' &&\n                !state.escapeChar &&\n                (char === '@' || char === '?' || char === '*' || char === '+' || char === '!')) {\n                if (state.scanningForParens) {\n                    state.openingParens++;\n                }\n                else if (i > state.parensHandledUntil && !state.closingParens) {\n                    state.parensHandledUntil = i;\n                    state.scanningForParens = true;\n                    state.openingParens++;\n                }\n                else if (state.closingParens >= state.openingParens) {\n                    if (char === '!') {\n                        state.addToMatch = true;\n                        state.addToUnmatch = false;\n                        add(state, state.pattern.wildcard + \"*?\", true);\n                        state.addToMatch = false;\n                        state.addToUnmatch = true;\n                        state.result.useUnmatch = true;\n                    }\n                    extglobModifiers.push(char);\n                    add(state, '(?:', true);\n                    state.openingParens--;\n                    state.i++;\n                    continue;\n                }\n                else {\n                    state.openingParens--;\n                }\n            }\n            else if (char === ')' && !state.escapeChar) {\n                if (state.scanningForParens) {\n                    state.closingParens++;\n                }\n                else if (extglobModifiers.length) {\n                    var modifier_1 = extglobModifiers.pop();\n                    if (modifier_1 === '!' && extglobModifiers.indexOf('!') !== -1) {\n                        throw new Error(\"Nested negated extglobs aren't supported\");\n                    }\n                    modifier_1 = modifier_1 === '!' || modifier_1 === '@' ? '' : modifier_1;\n                    add(state, \")\" + modifier_1);\n                    state.addToMatch = true;\n                    state.addToUnmatch = true;\n                    state.closingParens--;\n                    continue;\n                }\n            }\n            else if (char === '|' && state.closingParens &&\n                !state.scanningForParens &&\n                !state.escapeChar) {\n                add(state, '|');\n                continue;\n            }\n            if (state.scanningForParens) {\n                if (state.closingParens === state.openingParens || i === state.segment.end) {\n                    state.scanningForParens = false;\n                    state.i = state.parensHandledUntil - 1;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        var pattern = state.pattern;\n        var support = pattern.support;\n        if (!state.escapeChar && support.star && state.char === '*') {\n            if (state.i === state.segment.end || state.nextChar !== '*') {\n                add(state, pattern.wildcard + \"*?\", true);\n            }\n        }\n        else if (!state.escapeChar && support.qMark && state.char === '?') {\n            add(state, pattern.wildcard, true);\n        }\n        else {\n            add(state, escapeRegExpChar(state.char));\n        }\n        state.escapeChar = false;\n    }\n    return add(state, separatorMatcher);\n}\nfunction convert(source, options, excludeDot) {\n    var pattern = Pattern(source, options, excludeDot);\n    var result = Result();\n    var segments = pattern.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = Segment(segments[i], pattern, i === 0, i === segments.length - 1);\n        convertSegment(pattern, segment, result);\n    }\n    if (result.useUnmatch) {\n        return \"(?!^\" + result.unmatch + \"$)\" + result.match;\n    }\n    else {\n        return result.match;\n    }\n}\n\nfunction flatMap(array, predicate) {\n    var results = [];\n    for (var i = 0; i < array.length; i++) {\n        var mappedValue = predicate(array[i]);\n        for (var j = 0; j < mappedValue.length; j++) {\n            results.push(mappedValue[j]);\n        }\n    }\n    return results;\n}\nfunction compile(patterns, options) {\n    patterns = Array.isArray(patterns) ? patterns : [patterns];\n    if (options['{}'] !== false) {\n        patterns = flatMap(patterns, expand);\n    }\n    var positiveResults = [];\n    var negativeResults = [];\n    var result = '';\n    for (var i = 0; i < patterns.length; i++) {\n        var negatedPattern = negate(patterns[i], options);\n        var convertedPattern = convert(negatedPattern.pattern, options, !negatedPattern.isNegated);\n        if (negatedPattern.isNegated) {\n            negativeResults.push(convertedPattern);\n        }\n        else {\n            positiveResults.push(convertedPattern);\n        }\n    }\n    if (negativeResults.length) {\n        result = \"(?!(?:\" + negativeResults.join('|') + \")$)\";\n    }\n    if (positiveResults.length > 1) {\n        result += \"(?:\" + positiveResults.join('|') + \")\";\n    }\n    else if (positiveResults.length === 1) {\n        result += positiveResults[0];\n    }\n    else if (result.length) {\n        result += convert('**', options, true);\n    }\n    return \"^\" + result + \"$\";\n}\nfunction isMatch(regexp, sample) { if (typeof sample !== 'string') {\n    throw new TypeError(\"Sample must be a string, but \" + typeof sample + \" given\");\n} return regexp.test(sample); }\n/**\n * Compiles one or more glob patterns into a RegExp and returns an isMatch function.\n * The isMatch function takes a sample string as its only argument and returns true\n * if the string matches the pattern(s).\n *\n * ```js\n * outmatch('src/*.js')('src/index.js') //=> true\n * ```\n *\n * ```js\n * const isMatch = outmatch('*.example.com', '.')\n * isMatch('foo.example.com') //=> true\n * isMatch('foo.bar.com') //=> false\n * ```\n */\nfunction outmatch(pattern, options) {\n    if (typeof pattern !== 'string' && !Array.isArray(pattern)) {\n        throw new TypeError(\"The first argument must be a single pattern string or an array of patterns, but \" + typeof pattern + \" given\");\n    }\n    if (typeof options === 'string' || typeof options === 'boolean') {\n        options = { separator: options };\n    }\n    if (arguments.length === 2 &&\n        !(typeof options === 'undefined' ||\n            (typeof options === 'object' && options !== null && !Array.isArray(options)))) {\n        throw new TypeError(\"The second argument must be an options object or a string/boolean separator, but \" + typeof options + \" given\");\n    }\n    options = options || {};\n    if (options.separator === '\\\\') {\n        throw new Error('\\\\ is not a valid separator');\n    }\n    var regexpPattern = compile(pattern, options);\n    var regexp = new RegExp(regexpPattern, options.flags);\n    var fn = isMatch.bind(null, regexp);\n    fn.options = options;\n    fn.pattern = pattern;\n    fn.regexp = regexp;\n    return fn;\n}\n\nexport { outmatch as default };\n//# sourceMappingURL=index.es.mjs.map\n","import outmatch from 'outmatch'\nimport Settings from './settings/index.js'\nimport { typeOf, propertyDirectory } from 'recourse'\nexport default class EventDefinition {\n  #context\n  #enable = false\n  #nontranssigned = []\n  #_targets = []\n  #_assign\n  #_deassign\n  #_transsign\n  constructor($settings, $context) { \n    if(!$settings || !$context) { return this }\n    const settings = Settings($settings)\n    const assigned = []\n    const deassigned = []\n    const transsigned = []\n    Object.defineProperties(this, {\n      'settings': { value: settings },\n      'path': { value: settings.path },\n      'type': { value: settings.type },\n      'assigned': { value: assigned },\n      'deassigned': { value: deassigned },\n      'transsigned': { value: transsigned },\n      'listener':  { configurable: true, get() {\n        const typeOfListener = typeOf(settings.listener)\n        let listener \n        if(typeOfListener === 'string') {\n          let listenerTarget = $context\n          iterateListenerPathKeys: \n          for(const $pathKey of settings.listener.split('.')) {\n            const value = listenerTarget[$pathKey]\n            if(value !== undefined) { listenerTarget = listenerTarget[$pathKey] }\n            else { break iterateListenerPathKeys }\n          }\n          if(typeOf(listenerTarget) === 'function') {\n            listener = listenerTarget\n          }\n        }\n        else { listener = settings.listener }\n        if(settings.bindListener === true) {\n          listener = listener.bind(this.#context)\n        }\n        Object.defineProperty(this, 'listener', { value: listener })\n        return listener\n      } }\n    })\n    this.#context = $context\n    this.enable = this.settings.enable\n  }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    const targets = this.#targets\n    const assigned = this.assigned\n    const deassigned = this.deassigned\n    assigned.length = 0\n    deassigned.length = 0\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { path, target, enable } = $targetElement\n      const settings = this.settings\n      if(enable === $enable) { continue iterateTargetElements }\n      if($enable === true) {\n        try {\n          this.#assign(target)\n          $targetElement.enable = $enable\n          assigned.push($targetElement)\n          \n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err) } }\n      }\n      else if($enable === false) {\n        try {\n          this.#deassign(target)\n          $targetElement.enable = $enable\n          deassigned.push($targetElement)\n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err) } }\n      }\n    }\n    this.#enable = $enable\n  }\n  get #target() { return this.settings.target }\n  get #targets() {\n    const pretargets = this.#_targets\n    const targets = []\n    if(this.#target) {\n      for(const $target of [].concat(this.#target)) {\n        const pretargetElement = pretargets.find(\n          ($pretarget) => $pretarget?.path === this.path\n        )\n        if(pretargetElement !== undefined) {\n          targets.push(pretargetElement)\n        }\n        else if(pretargetElement === undefined) {ptargets.push({\n            path: this.path,\n            target: $target,\n            enable: false,\n          })\n        }\n      }\n    }\n    else if(typeOf(this.path) === 'string') {\n      const targetPaths = []\n      if(this.path === this.#scopeKey) {\n        const targetElement = {\n          path: this.path,\n          target: this.#context,\n          enable: false,\n        }\n        targets.push(targetElement)\n      }\n      else {\n        if(this.settings.propertyDirectory) {\n          const propertyDirectory = this.#propertyDirectory\n          const propertyPathMatcher = outmatch(this.path, {\n            separator: '.',\n          })\n          iteratePropertyPaths: \n          for(const [$propertyPath, $propertyValue] of propertyDirectory) {\n            const propertyPathMatch = propertyPathMatcher($propertyPath)\n            if(propertyPathMatch === true) { targetPaths.push([$propertyPath, $propertyValue]) }\n          }\n          if(this.path.charAt(0) === '*') {\n            targetPaths.unshift(this.#scopeKey)\n          }\n        }\n        else {\n          targetPaths.push(this.path)\n        }\n        iterateTargetPaths: \n        for(const [$targetPath, $targetValue] of targetPaths) {\n          const pretargetElement = pretargets.find(\n            ($pretarget) => $pretarget.path === $targetPath\n          )\n          let target = $targetValue\n          let targetElement\n          if(target !== undefined) {\n            if(target === pretargetElement?.target) {\n              targetElement = pretargetElement\n            }\n            else if(typeof target === 'object') {\n              targetElement = {\n                path: $targetPath,\n                target: target,\n                enable: false,\n              }\n            }\n          }\n          if(targetElement !== undefined) { targets.push(targetElement) }\n        }\n      }\n    }\n    this.#_targets = targets\n    return this.#_targets\n  }\n  get #scopeKey() { return this.settings.propertyDirectory.scopeKey }\n  get #assign() {\n    if(this.#_assign !== undefined) { return this.#_assign }\n    this.#_assign = this.settings.methods.assign[this.settings.assign].bind(null, this)\n    return this.#_assign\n  }\n  get #deassign() {\n    if(this.#_deassign !== undefined) { return this.#_deassign }\n    this.#_deassign = this.settings.methods.deassign[this.settings.deassign].bind(null, this)\n    return this.#_deassign\n  }\n  get #transsign() {\n    if(this.#_transsign !== undefined) { return this.#_transsign }\n    this.#_transsign = this.settings.methods.transsign[this.settings.transsign].bind(null, this)\n    return this.#_transsign\n  }\n  get #propertyDirectory() {\n    if(!this.settings.propertyDirectory) { return null }\n    const propertyDirectorySettings = Object.assign(this.settings.propertyDirectory, { values: true })\n    return propertyDirectory(this.#context, propertyDirectorySettings)\n  }\n  emit() {\n    const targets = this.#targets\n    const transsigned = this.transsigned\n    const nontranssigned = this.#nontranssigned\n    transsigned.length = 0\n    nontranssigned.length = 0\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { target } = $targetElement\n      try {\n        this.#transsign(target, ...arguments)\n        transsigned.push($targetElement)\n      }\n      catch($err) { nontranssigned.push($targetElement) }\n    }\n    return this\n  }\n}","import accessors from '../../accessors/index.js'\nimport { recursiveAssign, typeOf } from 'recourse'\nexport default ($settings = {}) => {\n  const Settings = {\n    enable: false,\n    assign: 'addEventListener', deassign: 'removeEventListener', transsign: 'dispatchEvent',\n    bindListener: true,\n    errorLog: false,\n    methods: {\n      assign: {\n        addEventListener: function addEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition\n          const { options, useCapture } = settings\n          return $target['addEventListener'](type, listener, options || useCapture)\n        },\n        on: function on($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition\n          return $target['on'](type, listener)\n        },\n        once: function once($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition\n          return $target['once'](type, listener)\n        },\n      }, \n      deassign: {\n        removeEventListener: function removeEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition\n          const { options, useCapture } = settings\n          return $target['removeEventListener'](type, listener, options || useCapture)\n        },\n        off: function off($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition\n          return $target['off'](type, listener)\n        },\n      },\n      transsign: {\n        dispatchEvent: function dispatchEvent($eventDefinition, $target, $event) {\n          return $target['dispatchEvent']($event)\n        },\n        emit: function emit($eventDefinition, $target, $type, ...$arguments) {\n          return $target['emit']($type, ...$arguments)\n        },\n      },\n    },\n  }\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'methods': \n        Settings[$settingKey] = recursiveAssign(Settings[$settingKey], $settingValue)\n        break\n      case 'enableEvents': break\n      default: \n        Settings[$settingKey] = $settingValue\n        break\n    }\n  }\n  return Settings\n}","import { recursiveAssign } from 'recourse'\nimport expandEvents from './expand-events/index.js'\nimport Settings from './settings/index.js'\nimport EventDefinition from './event-definition/index.js'\nexport default class Core extends EventTarget {\n  static implement = function ($target, $settings) {\n    if(!$target || !$settings) { return undefined }\n    const settings = Settings($settings)\n    const events = []\n    Object.defineProperties($target, {\n      [settings.propertyDefinitions.getEvents]: {\n        enumerable: false, writable: false, \n        value: function getEvents() {\n          if(!arguments[0]) { return events }\n          const getEvents = []\n          const $filterEvents = [].concat(arguments[0])\n          iterateFilterEvents: \n          for(const $filterEvent of $filterEvents) {\n            iterateEvents: \n            for(const $event of events) {\n              let match\n              iterateEventFilterProperties: \n              for(const [\n                $filterEventPropertyKey, $filterEventPropertyValue\n              ] of Object.entries($filterEvent)) {\n                let eventFilterMatch\n                if($filterEventPropertyKey === 'listener') {\n                  eventFilterMatch = (\n                    $event.settings[$filterEventPropertyKey] === $filterEventPropertyValue\n                  )\n                }\n                else {\n                  eventFilterMatch = (\n                    $event[$filterEventPropertyKey] === $filterEventPropertyValue\n                  )\n                }\n                if(match !== false) { match = eventFilterMatch }\n                else { break iterateEventFilterProperties }\n              }\n              if(match === true) { getEvents.push($event) }\n            }\n          }\n          return getEvents\n        }\n      },\n      [settings.propertyDefinitions.addEvents]: {\n        enumerable: false, writable: false, \n        value: function addEvents() {\n          if(!arguments.length) { return $target }\n          let $addEvents = expandEvents(arguments[0], settings.propertyDirectory.scopeKey)\n          let $enableEvents = arguments[1] || false\n          iterateAddEvents: \n          for(let $addEvent of $addEvents) {\n            const event = {}\n            for(const $settingKey of [\n              'assign', 'deassign', 'transsign', 'propertyDirectory', 'bindListener'\n            ]) {\n              const settingValue = settings[$settingKey]\n              if(settingValue !== undefined) { event[$settingKey] = settingValue }\n            }\n            recursiveAssign(event, $addEvent)\n            const eventDefinition = new EventDefinition(event, $target)\n            if($enableEvents) { eventDefinition.enable = true }\n            events.push(eventDefinition)\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.removeEvents]: {\n        enumerable: false, writable: false, \n        value: function removeEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0])\n          if($events.length === 0) return $target\n          let eventsIndex = events.length - 1\n          while(eventsIndex > -1) {\n            const event = events[eventsIndex]\n            if($events.includes(event)) {\n              event.enable = false\n              events.splice(eventsIndex, 1)\n            }\n            eventsIndex--\n          }\n          return $target\n        }\n      },\n      [settings.propertyDefinitions.enableEvents]: {\n        enumerable: false, writable: false, \n        value: function enableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0])\n          if($events.length === 0) return $target\n          iterateEvents: for(const $event of $events) { $event.enable = true }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.disableEvents]: {\n        enumerable: false, writable: false, \n        value: function disableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0])\n          if($events.length === 0) return $target\n          iterateEvents: for(const $event of $events) { $event.enable = false }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.reenableEvents]: {\n        enumerable: false, writable: false, \n        value: function reenableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0])\n          for(const $event of $events) {\n            $event.enable = false\n            $event.enable = true\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.emitEvents]: {\n        enumerable: false, writable: false, \n        value: function emitEvents($filterEvents, ...$eventParameters) {\n          const $events = $target[settings.propertyDefinitions.getEvents]($filterEvents)\n          for(const $event of $events) {\n            $event.emit(...$eventParameters)\n          }\n          return $target\n        },\n      },\n    })\n    if(settings.events) { $target[settings.propertyDefinitions.addEvents](settings.events) }\n    if(settings.enableEvents === true) { $target[settings.propertyDefinitions.enableEvents]() }\n    return $target\n  }\n  constructor($settings = {}) {\n    super()\n    return Core.implement(this, $settings)\n  }\n}","import accessors from '../accessors/index.js'\nexport default ($settings = {}) => {\n  const Settings = {\n    events: {},\n    enableEvents: false,\n    propertyDirectory: {\n      accessors: [accessors.default],\n      scopeKey: ':scope', \n      maxDepth: 10,\n    },\n    propertyDefinitions: {\n      getEvents: 'getEvents',\n      addEvents: 'addEvents',\n      removeEvents: 'removeEvents',\n      enableEvents: 'enableEvents',\n      disableEvents: 'disableEvents',\n      reenableEvents: 'reenableEvents',\n      emitEvents: 'emitEvents',\n    },\n  }\n  iterateSettingEntries: \n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'propertyDefinitions':\n      case 'propertyDirectory':\n        Settings[$settingKey] = Object.assign(Settings[$settingKey], $settingValue)\n        break\n      default: \n        Settings[$settingKey] = $settingValue\n        break\n    }\n  }\n  return Settings\n}","function expandEvents($propEvents, $scopeKey = ':scope') {\n  if(\n    Array.isArray($propEvents) ||\n    $propEvents === undefined\n  ) { return $propEvents }\n  const propEvents = []\n  iteratePropEvents:\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.trim().split(' ')\n    let path, type, listener, options\n    if(propEventSettings.length === 1) {\n      path = $scopeKey\n      type = propEventSettings[0]\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0]\n      type = propEventSettings[1]\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0]\n      options = $propEventListener[1]\n    }\n    else {\n      listener = $propEventListener\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    }\n    propEvents.push(propEvent)\n  }\n  return propEvents\n}\n\nexport default expandEvents"],"names":["Primitives","string","String","number","Number","boolean","Boolean","undefined","null","Objects","Object","keys","values","object","array","Array","Types","assign","typeOf","$data","prototype","toString","call","slice","toLowerCase","Options","depth","maxDepth","accessors","default","$target","$property","propertyDirectory","$object","$options","_propertyDirectory","options","$accessor","bind","accessor","$key","$value","entries","push","subtargets","$subtargetKey","$subtarget","path","join","recursiveAssign","$sources","$source","$sourcePropertyKey","$sourcePropertyValue","typeOfTargetPropertyValue","typeOfSourcePropertyValue","get","handleNoCommaBraces","span","length","separatorI","i","rangeStart","substr","rangeEnd","expand","pattern","TypeError","scanning","openingBraces","closingBraces","handledUntil","results","alternatives","char","substring","j","newResults","k","l","unhandledFrom","negate","supportNegation","supportParens","isNegated","escapeRegExpChar","Pattern","source","excludeDot","separator","separatorSplitter","separatorMatcher","wildcard","str","result","escapeRegExpString","requiredSeparator","optionalSeparator","segments","split","support","qMark","star","globstar","brackets","extglobs","Segment","isFirst","isLast","end","EXCLUDE_DOT_PATTERN","add","state","addition","addToUnmatch","unmatch","addToMatch","dotHandled","match","convertSegment","segment","openingBracket","closingBracket","openingParens","closingParens","parensHandledUntil","extglobModifiers","scanningForParens","escapeChar","nextChar","State","modifier_1","pop","indexOf","Error","useUnmatch","convert","isMatch","regexp","sample","test","outmatch","isArray","arguments","regexpPattern","patterns","predicate","mappedValue","flatMap","positiveResults","negativeResults","negatedPattern","convertedPattern","compile","RegExp","flags","fn","EventDefinition","context","enable","nontranssigned","_targets","_assign","_deassign","_transsign","constructor","$settings","$context","this","settings","Settings","deassign","transsign","bindListener","errorLog","methods","addEventListener","$eventDefinition","type","listener","useCapture","on","once","removeEventListener","off","dispatchEvent","$event","emit","$type","$arguments","$settingKey","$settingValue","defineProperties","value","assigned","deassigned","transsigned","configurable","listenerTarget","iterateListenerPathKeys","$pathKey","defineProperty","$enable","targets","$targetElement","target","$err","console","error","pretargets","concat","pretargetElement","find","$pretarget","ptargets","targetPaths","scopeKey","targetElement","propertyPathMatcher","$propertyPath","$propertyValue","charAt","unshift","$targetPath","$targetValue","propertyDirectorySettings","Core","EventTarget","static","events","enableEvents","propertyDefinitions","getEvents","addEvents","removeEvents","disableEvents","reenableEvents","emitEvents","enumerable","writable","$filterEvents","$filterEvent","iterateEventFilterProperties","$filterEventPropertyKey","$filterEventPropertyValue","eventFilterMatch","$addEvents","$propEvents","$scopeKey","propEvents","$propEventSettings","$propEventListener","propEventSettings","trim","propEvent","expandEvents","$enableEvents","$addEvent","event","settingValue","eventDefinition","$events","eventsIndex","includes","splice","$eventParameters","super","implement"],"mappings":"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","x_google_ignoreList":[2]}